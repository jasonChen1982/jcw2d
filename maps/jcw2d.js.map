{"version":3,"sources":["jcw2d.js","modules/utils.js","modules/event.js","modules/animation.js","modules/math/point.js","modules/math/matrix.js","modules/textures/baseTexture.js","modules/textures/texture.js","modules/textures/textureUvs.js","modules/display/display.js","modules/display/container.js","modules/sprite/sprite.js","modules/particles/particleContainer.js","modules/renderer/renderer.js","modules/renderer/manager/shaderManager.js","modules/renderer/shaders/shader.js","modules/renderer/shaders/spriteShader.js","modules/renderer/shaders/particleShader.js","modules/renderer/shaders/graphicsShader.js","modules/RAF.js","modules/const.js","modules/tween.js"],"names":["root","factory","exports","module","define","amd","JC","this","_rt","val","Object","prototype","toString","call","InteractionData","global","x","y","target","originalEvent","cancleBubble","ratio","type","Eventer","touchstarted","mouseDowned","listeners","Animate","opts","element","duration","living","onCompelete","onUpdate","infinity","alternate","ease","repeats","delay","progress","timeScale","paused","Transition","ATRS","from","ATRE","to","Animation","_keyframes","keys","_keyIndex","_direction","_keyConfig","keyConfig","configKey","MovieClip","animations","index","direction","frames","sy","sx","fillMode","fps","pt","nt","PathMotion","points","attachNormal","sDeg","tDeg","pDeg","Animator","start","animates","Point","Matrix","a","b","c","d","tx","ty","BaseTexture","source","scaleMode","width","height","realWidth","realHeight","CONST","SCALE_MODES","DEFAULT","hasLoaded","isLoading","resolution","premultipliedAlpha","imageUrl","isPowerOfTwo","mipmap","loadSource","Texture","baseTexture","frame","noFrame","math","Rectangle","_frame","valid","requiresUpdate","_uvs","on","onBaseTextureUpdated","once","onBaseTextureLoaded","TextureUvs","x0","y0","x1","y1","x2","y2","x3","y3","DisplayObject","_ready","visible","worldAlpha","alpha","scaleX","scaleY","skewX","skewY","rotation","rotationCache","_sr","_cr","pivotX","pivotY","mask","parent","worldTransform","event","passEvent","bounds","Container","cds","Sprite","texture","regX","regY","_texture","tint","blendMode","BLEND_MODES","NORMAL","shaderType","cachedTint","cachedAlpha","vertices","indices","Uint16Array","colors","dynamicStride","dynamicBuffer","dynamicData","indexBuffer","ParticleContainer","maxSize","properties","batchSize","maxBatchSize","_properties","_maxSize","_batchSize","_buffers","_bufferToUpdate","interactiveChildren","setProperties","Renderer","view","options","i","DEFAULT_RENDER_OPTIONS","document","getElementById","projection","Float32Array","transparent","autoResize","blendModes","preserveDrawingBuffer","autoClear","_backgroundColor","_backgroundColorRgb","_backgroundColorString","backgroundColor","handleContextLost","bind","handleContextRestored","addEventListener","_contextOptions","antialias","stencil","shaderManager","ShaderManager","blendModeManager","BlendModeManager","_createContext","_initContext","_mapGlModes","renderSession","gl","drawCount","renderer","currentShader","init","Shader","vertexSrc","fragmentSrc","uniforms","attributes","Error","program","textureCount","MAX_TEXTURE_UNITS","getParameter","MAX_TEXTURE_IMAGE_UNITS","SpriteShader","uSampler","value","projectionMatrix","projectionVector","aVertexPosition","size","aTextureCoord","aColor","join","ParticleShader","uAlpha","customUniforms","u","aAlpha","aPositionCoord","aRotation","customAttributes","GraphicsShader","window","lastTime","androidUC","test","navigator","userAgent","vendors","length","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","RAF","requestAnimFrame","VERSION","PI_2","PI","RTD","DTR","ADD","MULTIPLY","SCREEN","DRAW_MODES","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","LINEAR","NEAREST","clearBeforeRender","SPRITE_BATCH_SIZE","UTILS","hex2rgb","hex","out","hex2string","substr","rgb2hex","rgb","getNextPowerOfTwo","number","result","sayHi","_saidHi","toLowerCase","indexOf","args","console","log","apply","isWebGLSupported","contextOptions","WebGLRenderingContext","canvas","createElement","getContext","getContextAttributes","e","sign","n","removeItems","arr","startIdx","removeCount","len","copyJSON","json","JSON","parse","stringify","isArray","ks","object","isObject","isNumber","isFunction","random","min","euclideanModulo","m","clamp","TextureCache","BaseTextureCache","TWEEN","easeBoth","t","extend","key","fn","push","off","cbs","splice","emit","ev","undefined","ears","nextPose","cache","pause","stop","cancle","create","constructor","update","snippet","pose","setVal","sc","config","interval","next","getFramePos","pos","cf","row","_textureW","lintRow","lintCol","mCol","mRow","playMovie","movie","format","isString","warn","end","This","defineProperty","get","getPoint","rotate","decomposeRotate","rT","l","slice","r","oP","oL","oR","p1","p2","xxxxx","fromTo","animate","keyFrames","clone","copy","p","set","equals","fromArray","array","toArray","transpose","newPos","applyInverse","translate","scale","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","identity","setTransform","sr","cr","cy","nsx","cx","IDENTITY","TEMP_MATRIX","naturalWidth","naturalHeight","utils","wasLoading","complete","_sourceLoaded","onload","onerror","src","fromImage","crossorigin","image","Image","crossOrigin","defineProperties","_updateUvs","fromCanvas","baseFrame","tw","th","clear","isVisible","vals","updateMe","wt","upAnimation","getGlobalPos","cb","getBounds","setBounds","needless","ContainsPoint","px","py","ax","ay","bx","by","lup","depth","lx","addChilds","cd","arguments","removeChilds","updateTransform","updateChilds","render","session","renderMe","renderChilds","noticeEvent","child","upEvent","hitTest","re","hitTestMe","getBound","upTexture","setBlendMode","setShader","shader","initBuffers","uploadDynamic","bindBuffers","drawElements","UNSIGNED_SHORT","property","dynamicOffset","offset","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","enableVertexAttribArray","attribute","_location","vertexAttribPointer","FLOAT","uvs","bufferSubData","containsPoint","point","position","displayObjectUpdateTransform","children","renderable","setObjectRenderer","plugins","particle","SystemRenderer","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","resize","isContextLost","clearColor","COLOR_BUFFER_BIT","renderDisplayObject","displayObject","preventDefault","ONE","ONE_MINUS_SRC_ALPHA","DST_ALPHA","DST_COLOR","ONE_MINUS_SRC_COLOR","drawModes","style","maxAttibs","MAX_VERTEX_ATTRIBS","shaderPool","sprite","graphics","text","TextShader","useProgram","compile","cacheUniformLocations","cacheAttributeLocations","getUniformLocation","getAttribLocation","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","error","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","syncUniform","uniform","il","location","uniform1i","uniform1f","uniform2f","uniform3f","uniform4f","z","w","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform1fv","uniform2fv","uniform3fv","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","_array","activeTexture","initSampler2D","bindTexture","TEXTURE_2D","syncUniforms","updateTexture","createTexture","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","generateMipmap","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","CLAMP_TO_EDGE","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","TextureShader"],"mappings":"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","file":"../src/jcw2d.js","sourcesContent":["(function (root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(function () {\n      return (root.JC = factory());\n    });\n  } else {\n    // Global Variables\n    root.JC = factory();\n  }\n}(this, function () {\n\n    var JC = window.JC||{};\n\n    (function() {\n        var lastTime = 0;\n        var androidUC = /(?=.*?uc)(?=.*?android)/i.test(window.navigator.userAgent);\n        var vendors = ['ms', 'moz', 'webkit', 'o'];\n        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n                window[vendors[x] + 'CancelRequestAnimationFrame'];\n        }\n    \n        if (!window.requestAnimationFrame || androidUC) {\n            window.requestAnimationFrame = function(callback) {\n                var currTime = new Date().getTime();\n                var timeToCall = Math.max(0, 20 - (currTime - lastTime));\n                var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                    timeToCall);\n                lastTime = currTime + timeToCall;\n                return id;\n            };\n        }\n    \n        if (!window.cancelAnimationFrame) {\n            window.cancelAnimationFrame = function(id) {\n                clearTimeout(id);\n            };\n        }\n    \n        window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n    })();\n    \n\n    \n    JC.CONST = {\n        VERSION: '0.0.1',\n    \n        PI_2: Math.PI * 2,\n    \n        RTD: 180 / Math.PI,\n    \n        DTR: Math.PI / 180,\n    \n    \n        /**\n         *\n         * @static\n         * @constant\n         * @property {object} BLEND_MODES\n         * @property {number} BLEND_MODES.NORMAL\n         * @property {number} BLEND_MODES.ADD\n         * @property {number} BLEND_MODES.MULTIPLY\n         * @property {number} BLEND_MODES.SCREEN\n         */\n        BLEND_MODES: {\n            NORMAL:         0,\n            ADD:            1,\n            MULTIPLY:       2,\n            SCREEN:         3\n        },\n    \n        /**\n         *\n         * @static\n         * @constant\n         * @property {object} DRAW_MODES\n         * @property {number} DRAW_MODES.POINTS\n         * @property {number} DRAW_MODES.LINES\n         * @property {number} DRAW_MODES.LINE_LOOP\n         * @property {number} DRAW_MODES.LINE_STRIP\n         * @property {number} DRAW_MODES.TRIANGLES\n         * @property {number} DRAW_MODES.TRIANGLE_STRIP\n         * @property {number} DRAW_MODES.TRIANGLE_FAN\n         */\n        DRAW_MODES: {\n            POINTS:         0,\n            LINES:          1,\n            LINE_LOOP:      2,\n            LINE_STRIP:     3,\n            TRIANGLES:      4,\n            TRIANGLE_STRIP: 5,\n            TRIANGLE_FAN:   6\n        },\n    \n        /**\n         *\n         * @static\n         * @constant\n         * @property {object} SCALE_MODES\n         * @property {number} SCALE_MODES.DEFAULT=LINEAR\n         * @property {number} SCALE_MODES.LINEAR Smooth scaling\n         * @property {number} SCALE_MODES.NEAREST Pixelating scaling\n         */\n        SCALE_MODES: {\n            DEFAULT:    0,\n            LINEAR:     0,\n            NEAREST:    1\n        },\n    \n        DEFAULT_RENDER_OPTIONS: {\n            view: null,\n            resolution: 1,\n            antialias: false,\n            autoResize: false,\n            transparent: false,\n            backgroundColor: 0x000000,\n            clearBeforeRender: true,\n            preserveDrawingBuffer: false\n        },\n    \n        SPRITE_BATCH_SIZE: 2000 //nice balance between mobile and desktop machines\n    };\n\n    /**\n     * 简单拷贝json对象\n     *\n     * @name copyJSON\n     * @memberof JC\n     * @property {JC.copyJSON}\n     */\n    \n    // JC.copyJSON = ;\n    \n    /**\n     * 将角度转化成弧度\n     *\n     * @name DTR\n     * @memberof JC\n     * @property {JC.DTR}\n     */\n    \n    // JC.DTR = Math.PI/180;\n    \n    \n    /**\n     * 是否为数组\n     *\n     * @name isArray\n     * @memberof JC\n     * @property {JC.isArray}\n     */\n    // JC.isArray = ;\n    \n    /**\n     * 是否为对象\n     *\n     * @name isObject\n     * @memberof JC\n     * @property {JC.isObject}\n     */\n    // JC.isObject = (function(){\n    //     var ks = _rt({});\n    //     return function(object){\n    //         return Object.prototype.toString.call(object) === ks;\n    //     };\n    // })();\n    \n    /**\n     * 是否为数字\n     *\n     * @name isNumber\n     * @memberof JC\n     * @property {JC.isNumber}\n     */\n    // JC.isNumber = (function(){\n    //     var ks = _rt(1);\n    //     return function(object){\n    //         return Object.prototype.toString.call(object) === ks;\n    //     };\n    // })();\n    \n    /**\n     * 是否为函数\n     *\n     * @name isFunction\n     * @memberof JC\n     * @property {JC.isFunction}\n     */\n    // JC.isFunction = (function(){\n    //     var ks = _rt(function(){});\n    //     return function(object){\n    //         return Object.prototype.toString.call(object) === ks;\n    //     };\n    // })();\n    \n    /**\n     * 强化的随机数\n     *\n     * @name random\n     * @memberof JC\n     * @property {JC.random}\n     */\n    \n    // JC.random = function(min, max){\n    //     if (JC.isArray(min))\n    //         return min[~~(Math.random() * min.length)];\n    //     if (!JC.isNumber(max))\n    //         max = min || 1, min = 0;\n    //     return min + Math.random() * (max - min);\n    // };\n    \n    \n    /**\n     * 阿基米德求模\n     *\n     * @name euclideanModulo\n     * @memberof JC\n     * @property {JC.euclideanModulo}\n     */\n    \n    // JC.euclideanModulo = function(n, m){\n    //     return ((n % m) + m) % m;\n    // };\n    \n    function _rt(val) {\n        return Object.prototype.toString.call(val);\n    }\n    \n    JC.UTILS = {\n    \n        hex2rgb: function(hex, out) {\n            out = out || [];\n    \n            out[0] = (hex >> 16 & 0xFF) / 255;\n            out[1] = (hex >> 8 & 0xFF) / 255;\n            out[2] = (hex & 0xFF) / 255;\n    \n            return out;\n        },\n    \n        hex2string: function(hex) {\n            hex = hex.toString(16);\n            hex = '000000'.substr(0, 6 - hex.length) + hex;\n    \n            return '#' + hex;\n        },\n    \n        rgb2hex: function(rgb) {\n            return ((rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255);\n        },\n    \n        getNextPowerOfTwo: function(number) {\n            // see: http://en.wikipedia.org/wiki/Power_of_two#Fast_algorithm_to_check_if_a_positive_number_is_a_power_of_two\n            if (number > 0 && (number & (number - 1)) === 0) {\n                return number;\n            } else {\n                var result = 1;\n    \n                while (result < number) {\n                    result <<= 1;\n                }\n    \n                return result;\n            }\n        },\n    \n        isPowerOfTwo: function(width, height) {\n            return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n        },\n    \n        sayHi: function(type) {\n            if (this._saidHi) {\n                return;\n            }\n    \n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n                var args = [\n                    '\\n %c %c %c jcw2d.js ' + JC.CONST.VERSION + ' - ✰ ' + type + ' ✰  %c ' + ' %c ' + ' http://www.jason82.com/  %c %c ♥%c♥%c♥ \\n\\n',\n                    'background: #ff66a5; padding:5px 0;',\n                    'background: #ff66a5; padding:5px 0;',\n                    'color: #ff66a5; background: #030307; padding:5px 0;',\n                    'background: #ff66a5; padding:5px 0;',\n                    'background: #ffc3dc; padding:5px 0;',\n                    'background: #ff66a5; padding:5px 0;',\n                    'color: #ff2424; background: #fff; padding:5px 0;',\n                    'color: #ff2424; background: #fff; padding:5px 0;',\n                    'color: #ff2424; background: #fff; padding:5px 0;'\n                ];\n    \n                window.console.log.apply(console, args); //jshint ignore:line\n            } else if (window.console) {\n                window.console.log('jcw2d.js ' + JC.CONST.VERSION + ' - ' + type + ' - http://www.jason82.com/'); //jshint ignore:line\n            }\n    \n            this._saidHi = true;\n        },\n    \n        isWebGLSupported: function() {\n            var contextOptions = { stencil: true };\n            try {\n                if (!window.WebGLRenderingContext) {\n                    return false;\n                }\n    \n                var canvas = document.createElement('canvas'),\n                    gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);\n    \n                return !!(gl && gl.getContextAttributes().stencil);\n            } catch (e) {\n                return false;\n            }\n        },\n    \n        sign: function(n) {\n            return n ? (n < 0 ? -1 : 1) : 0;\n        },\n    \n        removeItems: function(arr, startIdx, removeCount) {\n            var length = arr.length;\n    \n            if (startIdx >= length || removeCount === 0) {\n                return;\n            }\n    \n            removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);\n            for (var i = startIdx, len = length - removeCount; i < len; ++i) {\n                arr[i] = arr[i + removeCount];\n            }\n    \n            arr.length = len;\n        },\n    \n        copyJSON: function(json) {\n            return JSON.parse(JSON.stringify(json));\n        },\n    \n        isArray: (function() {\n            var ks = _rt('s');\n            return function(object) {\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        isObject: (function() {\n            var ks = _rt({});\n            return function(object) {\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        isNumber: (function() {\n            var ks = _rt(1);\n            return function(object) {\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        /**\n         * 是否为函数\n         *\n         * @name isFunction\n         * @memberof JC\n         * @property {JC.isFunction}\n         */\n        isFunction: (function() {\n            var ks = _rt(function() {});\n            return function(object) {\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        /**\n         * 强化的随机数\n         *\n         * @name random\n         * @memberof JC\n         * @property {JC.random}\n         */\n        random: function(min, max) {\n            if (this.isArray(min))\n                return min[~~(Math.random() * min.length)];\n            if (!this.isNumber(max))\n                max = min || 1, min = 0;\n            return min + Math.random() * (max - min);\n        },\n    \n        /**\n         * 阿基米德求模\n         *\n         * @name euclideanModulo\n         * @memberof JC\n         * @property {JC.euclideanModulo}\n         */\n        euclideanModulo: function(n, m) {\n            return ((n % m) + m) % m;\n        },\n    \n        clamp: function(x, a, b) {\n            return (x < a) ? a : ((x > b) ? b : x);\n        },\n    \n        TextureCache: {},\n    \n        BaseTextureCache: {}\n    \n    };\n    \n\n    JC.TWEEN = {\n        easeBoth: function(t, b, c, d) { //加速减速曲线\n            if ((t /= d / 2) < 1) {\n                return c / 2 * t * t + b;\n            }\n            return -c / 2 * ((--t) * (t - 2) - 1) + b;\n        },\n        extend: function(opts) {\n            if (!opts) return;\n            for (var key in opts) {\n                if (key !== 'extend' && opts[key]) this[key] = opts[key];\n            }\n        }\n    };\n    \n\n    /**\n     * jcw2d的事件消息对象的类\n     *\n     * @class JC.InteractionData\n     * @constructor\n     */\n    function InteractionData() {\n        /**\n         * 转换到canvas坐标系统的事件触发点\n         *\n         * @property global\n         * @type Object\n         */\n        this.global = { x: -100000, y: -100000 };\n    \n        /**\n         * 事件源\n         *\n         * @property target\n         * @type JC.Container\n         */\n        this.target = null;\n    \n        /**\n         * 浏览器的原始事件对象\n         *\n         * @property originalEvent\n         * @type Event\n         */\n        this.originalEvent = null;\n    \n        /**\n         * 在canvas内阻止事件冒泡\n         *\n         * @property cancleBubble\n         * @type Boolean\n         */\n        this.cancleBubble = false;\n    \n        /**\n         * canvas视窗和页面坐标的兑换比例\n         *\n         * @property ratio\n         * @type Number\n         */\n        this.ratio = 1;\n    \n        /**\n         * 事件类型\n         *\n         * @property type\n         * @type String\n         */\n        this.type = '';\n    }\n    JC.InteractionData = InteractionData;\n    \n    \n    \n    /**\n     * jcw2d的事件对象的类\n     *\n     * @class JC.Eventer\n     * @constructor Eventer\n     * @memberof JC\n     */\n    function Eventer() {\n        this.touchstarted = false;\n        this.mouseDowned = false;\n        this.listeners = {};\n    }\n    /**\n     * 事件对象的事件绑定函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 回调函数\n     * @private\n     */\n    Eventer.prototype.on = function(type, fn) {\n        this.listeners[type] = this.listeners[type] || [];\n        this.listeners[type].push(fn);\n    };\n    /**\n     * 事件对象的事件解绑函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 注册时回调函数的引用\n     * @private\n     */\n    Eventer.prototype.off = function(type, fn) {\n        if (this.listeners[type]) {\n            var i = this.listeners[type].length;\n            if (fn) {\n                while (i--) {\n                    if (cbs[type][i] === fn) {\n                        cbs[type].splice(i, 1);\n                    }\n                }\n            } else {\n                cbs[type].length = 0;\n            }\n        }\n    };\n    /**\n     * 事件对象的触发事件函数\n     *\n     * @param ev {JC.InteractionData} 事件类型\n     * @private\n     */\n    Eventer.prototype.emit = function(ev) {\n        if (this.listeners === undefined) return;\n        var ears = this.listeners;\n        var cbs = ears[ev.type];\n        if (cbs !== undefined) {\n            var length = cbs.length;\n            var i;\n            for (i = 0; i < length; i++) {\n                cbs[i].call(this, ev);\n            }\n        }\n    };\n    JC.Eventer = Eventer;\n    \n\n    /**\n     * 动画对象的基本类型\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画配置信息\n     */\n    \n    function Animate(opts) {\n        this.element = opts.element || {};\n        this.duration = opts.duration || 300;\n        this.living = true;\n    \n        this.onCompelete = opts.onCompelete || null;\n        this.onUpdate = opts.onUpdate || null;\n    \n        this.infinity = opts.infinity || false;\n        this.alternate = opts.alternate || false;\n        this.ease = opts.ease || 'easeBoth';\n        this.repeats = opts.repeats || 0;\n        this.delay = opts.delay || 0;\n        this.progress = 0 - this.delay;\n    \n        this.timeScale = opts.timeScale || 1;\n    \n        this.paused = false;\n    }\n    JC.Animate = Animate;\n    Animate.prototype.nextPose = function() {\n        var cache = {};\n        for (var i in this.ATRE) {\n            cache[i] = JC.TWEEN[this.ease](this.progress, this.ATRS[i], this.ATRE[i] - this.ATRS[i], this.duration);\n            if (this.element[i] !== undefined) this.element[i] = cache[i];\n        }\n        return cache; //this.onUpdate\n    };\n    Animate.prototype.pause = function() {\n        this.paused = true;\n    };\n    Animate.prototype.start = function() {\n        this.paused = false;\n    };\n    Animate.prototype.stop = function() {\n        this.progress = this.duration;\n    };\n    Animate.prototype.cancle = function() {\n        this.living = false;\n    };\n    \n    \n    /**\n     * Transition类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画所具备的特性\n     */\n    \n    function Transition(opts) {\n        JC.Animate.call(this, opts);\n    \n        this.ATRS = opts.from;\n        this.ATRE = opts.to;\n    }\n    JC.Transition = Transition;\n    Transition.prototype = Object.create(JC.Animate.prototype);\n    Transition.prototype.constructor = JC.Transition;\n    Transition.prototype.update = function(snippet) {\n        if (this.paused || !this.living) return;\n        this.progress += this.timeScale * snippet;\n    \n        if (this.progress < this.duration) {\n            if (this.progress < 0) return;\n            var pose = this.nextPose();\n            this.onUpdate && this.onUpdate(pose, this.progress / this.duration);\n        } else {\n            this.element.setVal(this.ATRE);\n            this.onUpdate && this.onUpdate(this.ATRE, 1);\n            if (this.repeats > 0 || this.infinity) {\n                this.repeats > 0 && --this.repeats;\n                this.progress = 0;\n                if (this.alternate) {\n                    var sc = JC.copyJSON(this.ATRS);\n                    this.ATRS = JC.copyJSON(this.ATRE);\n                    this.ATRE = sc;\n                } else {\n                    this.element.setVal(this.ATRS);\n                }\n            } else {\n                this.living = false;\n                this.onCompelete && this.onCompelete();\n            }\n        }\n    };\n    \n    \n    /**\n     * Animation类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画配置信息\n     */\n    function Animation(opts) {\n        JC.Animate.call(this, opts);\n    \n        this._keyframes = opts.keys;\n        this._keyIndex = 0;\n        this._direction = 1;\n        this._keyConfig = opts.keyConfig;\n    \n        this.configKey();\n    }\n    JC.Animation = Animation;\n    Animation.prototype = Object.create(JC.Animate.prototype);\n    Animation.prototype.constructor = JC.Animation;\n    Animation.prototype.configKey = function() {\n        this.ATRS = this._keyframes[this._keyIndex];\n        this._keyIndex += this._direction;\n        this.ATRE = this._keyframes[this._keyIndex];\n        var config = this._keyConfig[Math.min(this._keyIndex, this._keyIndex - this._direction)] || {};\n        this.ease = config.ease || this.ease;\n        this.duration = config.duration || this.duration;\n        this.progress = 0;\n    };\n    Animation.prototype.update = function(snippet) {\n        if (this.paused || !this.living) return;\n        this.progress += this.timeScale * snippet;\n    \n        if (this.progress < this.duration) {\n            if (this.progress < 0) return;\n            var pose = this.nextPose();\n            this.onUpdate && this.onUpdate(pose, this.progress / this.duration, this._keyIndex);\n        } else {\n            this.element.setVal(this.ATRE);\n            this.onUpdate && this.onUpdate(this.ATRE, 1, this._keyIndex);\n            if (this._keyIndex < this._keyframes.length - 1 && this._keyIndex > 0) {\n                this.configKey();\n            } else {\n                if (this.repeats > 0 || this.infinity) {\n                    this.repeats > 0 && --this.repeats;\n                    if (this.alternate) {\n                        this._direction *= -1;\n                    } else {\n                        this._keyIndex = 0;\n                    }\n                    this.configKey();\n                } else {\n                    this.living = false;\n                    this.onCompelete && this.onCompelete();\n                }\n            }\n        }\n    };\n    \n    \n    /**\n     * MovieClip类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [element] {object} 动画对象 内部传入\n     * @param [opts] {object} 动画配置信息 内部传入\n     */\n    function MovieClip(element, opts) {\n        this.element = element;\n        this.living = false;\n    \n        this.onCompelete = null;\n        // this.onUpdate = null;\n    \n        this.infinity = false;\n        this.alternate = false;\n        this.repeats = 0;\n    \n        this.animations = opts.animations || {};\n    \n        this.index = 0;\n        this.direction = 1;\n        this.frames = [];\n        this.sy = opts.sy || 0;\n        this.sx = opts.sx || 0;\n        this.fillMode = 0;\n        this.fps = 16;\n    \n        this.paused = false;\n    \n        this.pt = 0;\n        this.nt = 0;\n    }\n    JC.MovieClip = MovieClip;\n    MovieClip.prototype.update = function(snippet) {\n        if (this.paused || !this.living) return;\n        this.nt += snippet;\n        if (this.nt - this.pt < this.interval) return;\n        this.pt = this.nt;\n        var i = this.index + this.direction;\n        if (i < this.frames.length && i >= 0) {\n            this.index = i;\n            // Do you need this handler???\n            // this.onUpdate&&this.onUpdate(this.index);\n        } else {\n            if (this.repeats > 0 || this.infinity) {\n                this.repeats > 0 && --this.repeats;\n                if (this.alternate) {\n                    this.direction *= -1;\n                    this.index += this.direction;\n                } else {\n                    this.direction = 1;\n                    this.index = 0;\n                }\n                // Do you need this handler???\n                // this.onUpdate&&this.onUpdate(this.index);\n            } else {\n                this.living = false;\n                this.index = this.fillMode;\n                this.onCompelete && this.onCompelete();\n                this.next && this.next();\n            }\n        }\n    };\n    MovieClip.prototype.getFramePos = function() {\n        var pos = {\n            x: this.sx,\n            y: this.sy\n        };\n        var cf = this.frames[this.index];\n        if (cf > 0) {\n            var row = this.element._textureW / this.element.width >> 0;\n            var lintRow = this.sx / this.element.width >> 0;\n            var lintCol = this.sy / this.element.height >> 0;\n            var mCol = lintCol + (lintRow + cf) / row >> 0;\n            var mRow = (lintRow + cf) % row;\n            pos.x = mRow * this.element.width;\n            pos.y = mCol * this.element.height;\n        }\n        return pos;\n    };\n    MovieClip.prototype.playMovie = function(opts) {\n        this.next = null;\n        var movie = this.format(opts.movie);\n        if (!JC.isArray(movie)) return;\n        this.frames = movie;\n        this.index = 0;\n        this.direction = 1;\n        this.fillMode = opts.fillMode || 0;\n        this.fps = opts.fps || this.fps;\n        this.infinity = opts.infinity || false;\n        this.alternate = opts.alternate || false;\n        this.repeats = opts.repeats || 0;\n        this.living = true;\n        this.onCompelete = opts.onCompelete || null;\n    };\n    MovieClip.prototype.format = function(movie) {\n        if (JC.isString(movie)) {\n            var config = this.animations[movie];\n            if (config) {\n                return this.format(config);\n            } else {\n                console.warn(\n                    '%c JC.MovieClip warn %c: you didn\\`t config %c' + movie + '%c in animations ',\n                    'color: #f98165; background: #80a89e',\n                    'color: #80a89e; background: #cad9d5;',\n                    'color: #f98165; background: #cad9d5',\n                    'color: #80a89e; background: #cad9d5'\n                );\n                return false;\n            }\n        } else if (JC.isArray(movie)) {\n            return movie;\n        } else if (JC.isObject(movie)) {\n            var arr = [];\n            for (var i = movie.start; i <= movie.end; i++) {\n                arr.push(i);\n            }\n            if (movie.next && this.animations[movie.next]) {\n                var This = this;\n                this.next = function() {\n                    This.playMovie({\n                        movie: this.animations[movie.next],\n                        infinity: true\n                    });\n                };\n            }\n            return arr;\n        }\n    };\n    MovieClip.prototype.pause = function() {\n        this.paused = true;\n    };\n    MovieClip.prototype.start = function() {\n        this.paused = false;\n    };\n    MovieClip.prototype.cancle = function() {\n        this.living = false;\n    };\n    Object.defineProperty(MovieClip.prototype, 'interval', {\n        get: function() {\n            return this.fps > 0 ? 1000 / this.fps >> 0 : 16;\n        }\n    });\n    \n    \n    /**\n     * Transition类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画所具备的特性\n     * @param [opts] {object} 动画配置信息\n     */\n    \n    function PathMotion(opts) {\n        JC.Animate.call(this, opts);\n    \n        this.points = opts.points;\n        this.attachNormal = opts.attachNormal || false;\n        this.sDeg = false;\n        this.tDeg = 0;\n        this.pDeg = 0;\n    }\n    JC.PathMotion = PathMotion;\n    PathMotion.prototype = Object.create(JC.Animate.prototype);\n    PathMotion.prototype.constructor = JC.PathMotion;\n    PathMotion.prototype.update = function(snippet) {\n        if (this.paused || !this.living) return;\n        this.progress += this.timeScale * snippet;\n    \n        if (this.progress < this.duration) {\n            if (this.progress < 0) return;\n            var pose = this.nextPose();\n            this.onUpdate && this.onUpdate(pose, this.progress / this.duration);\n        } else {\n            this.element.setVal(this.ATRE);\n            this.onUpdate && this.onUpdate(this.ATRE, 1);\n            if (this.repeats > 0 || this.infinity) {\n                this.repeats > 0 && --this.repeats;\n                this.progress = 0;\n                if (this.alternate) {\n                    var sc = JC.copyJSON(this.ATRS);\n                    this.ATRS = JC.copyJSON(this.ATRE);\n                    this.ATRE = sc;\n                } else {\n                    this.element.setVal(this.ATRS);\n                }\n            } else {\n                this.living = false;\n                this.onCompelete && this.onCompelete();\n            }\n        }\n    };\n    PathMotion.prototype.nextPose = function() {\n        var cache = {};\n        // for(var i in this.ATRE){\n        //     cache[i] = JC.TWEEN[this.ease]( this.progress , this.ATRS[i] , this.ATRE[i] - this.ATRS[i] , this.duration );\n        //     if(this.element[i]!==undefined)this.element[i] = cache[i];\n        // }\n        var t = JC.TWEEN[this.ease](this.progress, 0, 1, this.duration);\n        var pos = this.getPoint(t, this.points);\n        cache.x = pos.x;\n        cache.y = pos.y;\n        // cache.y = pos.y;\n        if (this.attachNormal) {\n            cache.rotate = this.decomposeRotate(t);\n        }\n        return cache; //this.onUpdate\n    };\n    PathMotion.prototype.getPoint = function(t, points) {\n        var a = points,\n            len = a.length,\n            rT = 1 - t,\n            l = a.slice(0, len - 1),\n            r = a.slice(1),\n            oP = {};\n        if (len > 3) {\n            var oL = this.getPoint(t, l),\n                oR = this.getPoint(t, r);\n            oP.x = rT * oL.x + t * oR.x;\n            oP.y = rT * oL.y + t * oR.y;\n            // oP.z = rT * oL.z + t * oR.z;\n            return oP;\n        } else {\n            oP.x = rT * rT * points[0].x + 2 * t * rT * points[1].x + t * t * points[2].x;\n            oP.y = rT * rT * points[0].y + 2 * t * rT * points[1].y + t * t * points[2].y;\n            // oP.z = rT * rT * points[0].z + 2 * t * rT * points[1].z + t * t * points[2].z;\n            return oP;\n        }\n    };\n    PathMotion.prototype.decomposeRotate = function(t) {\n        var p1 = this.getPoint(t, this.points);\n        var p2 = this.getPoint(t + 0.01, this.points);\n        var deg = p1.xxxxx + p2.x;\n    };\n    \n    /**\n     * Animator类型动画对象\n     *\n     * @class\n     * @memberof JC\n     */\n    function Animator() {\n        this.start = false;\n        this.animates = [];\n    }\n    JC.Animator = Animator;\n    Animator.prototype.update = function(snippet) {\n        for (var i = 0; i < this.animates.length; i++) {\n            if (!this.animates[i].living) this.animates.splice(i, 1);\n            this.animates[i] && this.animates[i].update(snippet);\n        }\n    };\n    Animator.prototype.fromTo = function(opts) {\n        var animate = new JC.Transition(opts);\n        this.animates.push(animate);\n        return animate;\n    };\n    Animator.prototype.keyFrames = function(opts) {\n        var animate = new JC.Animation(opts);\n        this.animates.push(animate);\n        return animate;\n    };\n    \n\n    /**\n     * The Point object represents a location in a two-dimensional coordinate system, where x represents\n     * the horizontal axis and y represents the vertical axis.\n     *\n     * @class\n     * @memberof PIXI\n     * @param [x=0] {number} position of the point on the x axis\n     * @param [y=0] {number} position of the point on the y axis\n     */\n    function Point(x, y) {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x || 0;\n    \n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y || 0;\n    }\n    \n    JC.Point = Point;\n    Point.prototype.constructor = JC.Point;\n    \n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    Point.prototype.clone = function() {\n        return new Point(this.x, this.y);\n    };\n    \n    /**\n     * Copies x and y from the given point\n     *\n     * @param p {PIXI.Point}\n     */\n    Point.prototype.copy = function(p) {\n        this.set(p.x, p.y);\n    };\n    \n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param p {PIXI.Point}\n     * @returns {boolean}\n     */\n    Point.prototype.equals = function(p) {\n        return (p.x === this.x) && (p.y === this.y);\n    };\n    \n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param [x=0] {number} position of the point on the x axis\n     * @param [y=0] {number} position of the point on the y axis\n     */\n    Point.prototype.set = function(x, y) {\n        this.x = x || 0;\n        this.y = y || ((y !== 0) ? this.x : 0);\n    };\n    \n    /**\n     * 矩阵对象，用来描述和记录对象的tansform 状态信息\n     *\n     * @class\n     * @memberof JC\n     */\n    function Matrix() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n    }\n    JC.Matrix = Matrix;\n    Matrix.prototype.constructor = JC.Matrix;\n    \n    /**\n     * 从数组设置一个矩阵\n     *\n     * @param array {number[]}\n     */\n    Matrix.prototype.fromArray = function(array) {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    };\n    \n    /**\n     * 将对象的数据以数组的形式导出\n     *\n     * @param transpose {boolean} 是否对矩阵进行转置\n     * @return {number[]} 返回数组\n     */\n    Matrix.prototype.toArray = function(transpose) {\n        if (!this.array) this.array = new JC.Float32Array(9);\n        var array = this.array;\n    \n        if (transpose) {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        } else {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n        return array;\n    };\n    \n    /**\n     * 将坐标点与矩阵左乘\n     *\n     * @param pos {object} 原始点\n     * @param newPos {object} 变换之后的点\n     * @return {object} 返回数组\n     */\n    Matrix.prototype.apply = function(pos, newPos) {\n        newPos = newPos || {};\n        newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n        newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n        return newPos;\n    };\n    /**\n     * 将坐标点与转置矩阵左乘\n     *\n     * @param pos {object} 原始点\n     * @param newPos {object} 变换之后的点\n     * @return {object} 变换之后的点\n     */\n    Matrix.prototype.applyInverse = function(pos, newPos) {\n        var id = 1 / (this.a * this.d + this.c * -this.b);\n        newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n        newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n        return newPos;\n    };\n    /**\n     * 位移操作\n     *\n     * @return {this} \n     */\n    Matrix.prototype.translate = function(x, y) {\n        this.tx += x;\n        this.ty += y;\n        return this;\n    };\n    /**\n     * 缩放操作\n     *\n     * @return {this} \n     */\n    Matrix.prototype.scale = function(x, y) {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n        return this;\n    };\n    /**\n     * 旋转操作\n     *\n     * @return {this} \n     */\n    Matrix.prototype.rotate = function(angle) {\n        var cos = Math.cos(angle);\n        var sin = Math.sin(angle);\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n        this.a = a1 * cos - this.b * sin;\n        this.b = a1 * sin + this.b * cos;\n        this.c = c1 * cos - this.d * sin;\n        this.d = c1 * sin + this.d * cos;\n        this.tx = tx1 * cos - this.ty * sin;\n        this.ty = tx1 * sin + this.ty * cos;\n        return this;\n    };\n    /**\n     * 矩阵相乘\n     *\n     * @return {this} \n     */\n    Matrix.prototype.append = function(matrix) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        this.a = matrix.a * a1 + matrix.b * c1;\n        this.b = matrix.a * b1 + matrix.b * d1;\n        this.c = matrix.c * a1 + matrix.d * c1;\n        this.d = matrix.c * b1 + matrix.d * d1;\n        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n        return this;\n    };\n    /**\n     * 单位矩阵\n     *\n     * @return {this} \n     */\n    Matrix.prototype.identity = function() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n        return this;\n    };\n    /**\n     * 快速设置矩阵各个分量\n     *\n     * @return {this} \n     */\n    Matrix.prototype.setTransform = function(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n        var a, b, c, d, sr, cr, cy, sy, nsx, cx;\n    \n        sr = Math.sin(rotation);\n        cr = Math.cos(rotation);\n        cy = Math.cos(skewY);\n        sy = Math.sin(skewY);\n        nsx = -Math.sin(skewX);\n        cx = Math.cos(skewX);\n    \n        a = cr * scaleX;\n        b = sr * scaleX;\n        c = -sr * scaleY;\n        d = cr * scaleY;\n    \n        this.a = cy * a + sy * c;\n        this.b = cy * b + sy * d;\n        this.c = nsx * a + cx * c;\n        this.d = nsx * b + cx * d;\n    \n        this.tx = x + (pivotX * a + pivotY * c);\n        this.ty = y + (pivotX * b + pivotY * d);\n    \n        return this;\n    };\n    JC.IDENTITY = new Matrix();\n    JC.TEMP_MATRIX = new Matrix();\n    \n\n    function BaseTexture(source, scaleMode) {\n        JC.Eventer.call(this);\n    \n        this.width = 100;\n    \n        this.height = 100;\n    \n        this.realWidth = 100;\n    \n        this.realHeight = 100;\n    \n        this.scaleMode = scaleMode || JC.CONST.SCALE_MODES.DEFAULT;\n    \n        this.hasLoaded = false;\n    \n        this.isLoading = false;\n    \n        this.source = null; // set in loadSource, if at all\n    \n        this.resolution = 1;\n    \n        this.premultipliedAlpha = true;\n    \n        this.imageUrl = null;\n    \n        this.isPowerOfTwo = false;\n    \n        this.mipmap = false;\n    \n        // this._glTextures = {};\n    \n        // if no source passed don't try to load\n        if (source) {\n            this.loadSource(source);\n        }\n    \n    }\n    \n    BaseTexture.prototype = Object.create(JC.Eventer.prototype);\n    BaseTexture.prototype.constructor = BaseTexture;\n    \n    BaseTexture.prototype.update = function() {\n        this.realWidth = this.source.naturalWidth || this.source.width;\n        this.realHeight = this.source.naturalHeight || this.source.height;\n    \n        this.width = this.realWidth / this.resolution;\n        this.height = this.realHeight / this.resolution;\n    \n        this.isPowerOfTwo = utils.isPowerOfTwo(this.realWidth, this.realHeight);\n    \n        this.emit({ type: 'update' });\n    };\n    \n    BaseTexture.prototype.loadSource = function(source) {\n        var wasLoading = this.isLoading;\n        this.hasLoaded = false;\n        this.isLoading = false;\n    \n        this.source = source;\n    \n        if ((this.source.complete || this.source.getContext) && this.source.width && this.source.height) {\n            this._sourceLoaded();\n        } else if (!source.getContext) {\n            this.isLoading = true;\n    \n            var This = this;\n    \n            source.onload = function() {\n                source.onload = null;\n                source.onerror = null;\n    \n                This.isLoading = false;\n                This._sourceLoaded();\n                This.emit({ type: 'loaded' });\n            };\n    \n            source.onerror = function() {\n                source.onload = null;\n                source.onerror = null;\n    \n                This.isLoading = false;\n                This.emit({ type: 'error' });\n            };\n    \n            if (source.complete && source.src) {\n                this.isLoading = false;\n    \n                source.onload = null;\n                source.onerror = null;\n    \n                if (source.width && source.height) {\n                    this._sourceLoaded();\n    \n                    // If any previous subscribers possible\n                    if (wasLoading) {\n                        this.emit({ type: 'loaded' });\n                    }\n                } else {\n                    // If any previous subscribers possible\n                    if (wasLoading) {\n                        this.emit({ type: 'error' });\n                    }\n                }\n            }\n        }\n    };\n    \n    BaseTexture.prototype._sourceLoaded = function() {\n        this.hasLoaded = true;\n        this.update();\n    };\n    BaseTexture.fromImage = function(imageUrl, crossorigin, scaleMode) {\n        var baseTexture = JC.UTILS.BaseTextureCache[imageUrl];\n    \n        if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0) {\n            crossorigin = true;\n        }\n    \n        if (!baseTexture) {\n            var image = new Image();\n            if (crossorigin) {\n                image.crossOrigin = '';\n            }\n    \n            baseTexture = new BaseTexture(image, scaleMode);\n            baseTexture.imageUrl = imageUrl;\n    \n            image.src = imageUrl;\n    \n            JC.UTILS.BaseTextureCache[imageUrl] = baseTexture;\n    \n        }\n    \n        return baseTexture;\n    };\n    \n    function Texture(baseTexture, frame) {\n        JC.Eventer.call(this);\n    \n        this.noFrame = false;\n    \n        if (!frame) {\n            this.noFrame = true;\n            frame = new math.Rectangle(0, 0, 1, 1);\n        }\n    \n        if (baseTexture instanceof Texture) {\n            baseTexture = baseTexture.baseTexture;\n        }\n    \n        this.baseTexture = baseTexture;\n    \n        this._frame = frame;\n    \n        this.valid = false;\n    \n        this.requiresUpdate = false;\n    \n        this._uvs = null;\n    \n        this.width = 0;\n    \n        this.height = 0;\n    \n        if (baseTexture.hasLoaded) {\n            if (this.noFrame) {\n                frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n    \n                // if there is no frame we should monitor for any base texture changes..\n                baseTexture.on('update', this.onBaseTextureUpdated, this);\n            }\n            this.frame = frame;\n        } else {\n            baseTexture.once('loaded', this.onBaseTextureLoaded, this);\n        }\n    \n    }\n    \n    Texture.prototype = Object.create(JC.Eventer.prototype);\n    Texture.prototype.constructor = Texture;\n    \n    Object.defineProperties(Texture.prototype, {\n        frame: {\n            get: function() {\n                return this._frame;\n            },\n            set: function(frame) {\n                this._frame = frame;\n    \n                this.noFrame = false;\n    \n                this.width = frame.width;\n                this.height = frame.height;\n    \n                this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;\n    \n                if (this.valid) {\n                    this._updateUvs();\n                }\n            }\n        }\n    });\n    \n    Texture.prototype.update = function() {\n        this.baseTexture.update();\n    };\n    \n    Texture.prototype.onBaseTextureLoaded = function(baseTexture) {\n        // TODO this code looks confusing.. boo to abusing getters and setterss!\n        if (this.noFrame) {\n            this.frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n        } else {\n            this.frame = this._frame;\n        }\n    \n        this.emit('update', this);\n    };\n    \n    Texture.prototype.onBaseTextureUpdated = function(baseTexture) {\n        this._frame.width = baseTexture.width;\n        this._frame.height = baseTexture.height;\n    \n        this.emit('update', this);\n    };\n    \n    Texture.prototype._updateUvs = function() {\n        if (!this._uvs) {\n            this._uvs = new TextureUvs();\n        }\n        this._uvs.set(this.frame, this.baseTexture);\n    };\n    \n    Texture.fromImage = function(imageUrl, crossorigin, scaleMode) {\n        var texture = JC.UTILS.TextureCache[imageUrl];\n    \n        if (!texture) {\n            texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin, scaleMode));\n            JC.UTILS.TextureCache[imageUrl] = texture;\n        }\n    \n        return texture;\n    };\n    \n    Texture.fromCanvas = function(canvas, scaleMode) {\n        return new Texture(BaseTexture.fromCanvas(canvas, scaleMode));\n    };\n    \n    function TextureUvs() {\n        this.x0 = 0;\n        this.y0 = 0;\n    \n        this.x1 = 1;\n        this.y1 = 0;\n    \n        this.x2 = 1;\n        this.y2 = 1;\n    \n        this.x3 = 0;\n        this.y3 = 1;\n    }\n    \n    TextureUvs.prototype.set = function(frame, baseFrame) {\n        var tw = baseFrame.width;\n        var th = baseFrame.height;\n    \n        this.x0 = frame.x / tw;\n        this.y0 = frame.y / th;\n    \n        this.x1 = (frame.x + frame.width) / tw;\n        this.y1 = frame.y / th;\n    \n        this.x2 = (frame.x + frame.width) / tw;\n        this.y2 = (frame.y + frame.height) / th;\n    \n        this.x3 = frame.x / tw;\n        this.y3 = (frame.y + frame.height) / th;\n    };\n    TextureUvs.prototype.get = function() {\n        return new Float32Array([\n            this.x0, this.y0, this.x1, this.y1,\n            this.x2, this.y2, this.x3, this.y3\n        ]);\n    };\n    \n\n    /**\n     * 显示对象的基类\n     *\n     * @class\n     * @memberof JC\n     */\n    function DisplayObject() {\n        this._ready = true;\n    \n        this.visible = true;\n        this.worldAlpha = 1;\n        this.alpha = 1;\n    \n        this.scaleX = 1;\n        this.scaleY = 1;\n    \n        this.skewX = 0;\n        this.skewY = 0;\n    \n        this.rotation = 0;\n        this.rotationCache = 0;\n        this._sr = 0;\n        this._cr = 1;\n    \n        this.x = 0;\n        this.y = 0;\n    \n        this.pivotX = 0;\n        this.pivotY = 0;\n    \n        this.mask = null;\n    \n        this.parent = null;\n        this.worldTransform = new JC.Matrix();\n    \n        this.event = new JC.Eventer();\n        this.passEvent = false;\n        this.bounds = [];\n    \n        this.Animator = new JC.Animator();\n    }\n    JC.DisplayObject = DisplayObject;\n    DisplayObject.prototype.constructor = JC.DisplayObject;\n    \n    Object.defineProperty(DisplayObject.prototype, 'scale', {\n        get: function() {\n            return this.scaleX;\n        },\n        set: function(scale) {\n            this.scaleX = this.scaleY = scale;\n        }\n    });\n    \n    /**\n     * fromTo动画，指定动画的启始位置和结束位置\n     *\n     * ```js\n     * // 扩展缓动函数，缓动函数库详见目录下的util/tween.js\n     * JC.TWEEN.extend({    \n     *    bounceOut: function(t, b, c, d){\n     *        if ((t/=d) < (1/2.75)) {\n     *            return c*(7.5625*t*t) + b;\n     *        } else if (t < (2/2.75)) {\n     *            return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;\n     *        } else if (t < (2.5/2.75)) {\n     *            return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;\n     *        }\n     *        return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;\n     *    }\n     * });\n     * var dispayObj = new JC.Text('Hello JC','bold 36px Arial','#c32361');\n     * dispayObj.fromTo({\n     *   from: {x: 100},\n     *   to: {x: 200},\n     *   ease: 'bounceOut', // 执行动画使用的缓动函数 默认值为 easeBoth\n     *   repeats: 10, // 动画运动完后再重复10次\n     *   infinity: true, // 无限循环动画\n     *   alternate: true, // 偶数次的时候动画回放\n     *   duration: 1000, // 动画时长 ms单位 默认 300ms\n     *   onUpdate: function(state,rate){},\n     *   onCompelete: function(){ console.log('end'); } // 动画执行结束回调\n     * });\n     * ```\n     *\n     * @param opts {object} 配置\n     * @param clear {boolean} 是否去掉之前的动画\n     */\n    DisplayObject.prototype.fromTo = function(opts, clear) {\n        opts.element = this;\n        this.setVal(opts.from);\n        if (clear) this.Animator.animates.length = 0;\n        return this.Animator.fromTo(opts);\n    };\n    \n    /**\n     * to动画，物体当前位置为动画的启始位置，只需制定动画的结束位置\n     *\n     * @param opts {object} 配置\n     * @param clear {boolean} 是否去掉之前的动画\n     */\n    DisplayObject.prototype.to = function(opts, clear) {\n        opts.element = this;\n        opts.from = {};\n        for (var i in opts.to) {\n            opts.from[i] = this[i];\n        }\n        if (clear) this.Animator.animates.length = 0;\n        return this.Animator.fromTo(opts);\n    };\n    \n    /**\n     * keyFrames动画，设置物体动画的keyframe，可以为相邻的两个keyFrames之前配置差值时间及时间函数\n     *\n     * @param opts {object} 配置\n     * @param clear {boolean} 是否去掉之前的动画\n     */\n    DisplayObject.prototype.keyFrames = function(opts, clear) {\n        opts.element = this;\n        if (clear) this.Animator.animates.length = 0;\n        return this.Animator.keyFrames(opts);\n    };\n    \n    /**\n     * 检测是否可见\n     *\n     * @method isVisible\n     * @private\n     */\n    DisplayObject.prototype.isVisible = function() {\n        return !!(this.visible && this.alpha > 0 && this.scaleX * this.scaleY > 0);\n    };\n    \n    DisplayObject.prototype.setVal = function(vals) {\n        if (vals === undefined) return;\n        for (var key in vals) {\n            if (this[key] === undefined) {\n                continue;\n            } else {\n                this[key] = vals[key];\n            }\n        }\n    };\n    DisplayObject.prototype.updateMe = function() {\n        var pt = this.parent.worldTransform;\n        var wt = this.worldTransform;\n    \n        var a, b, c, d, tx, ty;\n    \n        if (this.skewX || this.skewY) {\n    \n            JC.TEMP_MATRIX.setTransform(\n                this.x,\n                this.y,\n                this.pivotX,\n                this.pivotY,\n                this.scaleX,\n                this.scaleY,\n                this.rotation,\n                this.skewX,\n                this.skewY\n            );\n    \n            wt.a = JC.TEMP_MATRIX.a * pt.a + JC.TEMP_MATRIX.b * pt.c;\n            wt.b = JC.TEMP_MATRIX.a * pt.b + JC.TEMP_MATRIX.b * pt.d;\n            wt.c = JC.TEMP_MATRIX.c * pt.a + JC.TEMP_MATRIX.d * pt.c;\n            wt.d = JC.TEMP_MATRIX.c * pt.b + JC.TEMP_MATRIX.d * pt.d;\n            wt.tx = JC.TEMP_MATRIX.tx * pt.a + JC.TEMP_MATRIX.ty * pt.c + pt.tx;\n            wt.ty = JC.TEMP_MATRIX.tx * pt.b + JC.TEMP_MATRIX.ty * pt.d + pt.ty;\n        } else {\n            if (this.rotation % 360) {\n                if (this.rotation !== this.rotationCache) {\n                    this.rotationCache = this.rotation;\n                    this._sr = Math.sin(this.rotation * JC.DTR);\n                    this._cr = Math.cos(this.rotation * JC.DTR);\n                }\n    \n                a = this._cr * this.scaleX;\n                b = this._sr * this.scaleX;\n                c = -this._sr * this.scaleY;\n                d = this._cr * this.scaleY;\n                tx = this.x;\n                ty = this.y;\n    \n                if (this.pivotX || this.pivotY) {\n                    tx -= this.pivotX * a + this.pivotY * c;\n                    ty -= this.pivotX * b + this.pivotY * d;\n                }\n                wt.a = a * pt.a + b * pt.c;\n                wt.b = a * pt.b + b * pt.d;\n                wt.c = c * pt.a + d * pt.c;\n                wt.d = c * pt.b + d * pt.d;\n                wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n                wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n            } else {\n                a = this.scaleX;\n                d = this.scaleY;\n    \n                tx = this.x - this.pivotX * a;\n                ty = this.y - this.pivotY * d;\n    \n                wt.a = a * pt.a;\n                wt.b = a * pt.b;\n                wt.c = d * pt.c;\n                wt.d = d * pt.d;\n                wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n                wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n            }\n        }\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    };\n    \n    DisplayObject.prototype.upAnimation = function(snippet) {\n        this.Animator.update(snippet);\n    };\n    // DisplayObject.prototype.setTransform = function(ctx){\n    //     var matrix = this.worldTransform;\n    //     ctx.globalAlpha = this.worldAlpha;\n    //     ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);\n    // };\n    /**\n     * 获取物体相对于canvas世界坐标系的坐标位置\n     *\n     * @return {object}\n     */\n    DisplayObject.prototype.getGlobalPos = function() {\n        return { x: this.worldTransform.tx, y: this.worldTransform.ty };\n    };\n    /**\n     * 显示对象的事件绑定函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 回调函数\n     */\n    DisplayObject.prototype.on = function(type, fn) {\n        this.event.on(type, fn);\n    };\n    /**\n     * 显示对象的事件解绑函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 注册时回调函数的引用\n     */\n    DisplayObject.prototype.off = function(type, fn) {\n        this.event.off(type, fn);\n    };\n    /**\n     * 显示对象的一次性事件绑定函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 回调函数\n     */\n    DisplayObject.prototype.once = function(type, fn) {\n        var This = this,\n            cb = function(ev) {\n                fn && fn(ev);\n                This.event.off(type, cb);\n            };\n        this.event.on(type, cb);\n    };\n    /**\n     * 获取当前坐标系下的监测区域\n     *\n     * @method getBounds\n     * @private\n     */\n    DisplayObject.prototype.getBounds = function() {\n        var bounds = [],\n            l = this.bounds.length >> 1;\n    \n        for (var i = 0; i < l; i++) {\n            var p = this.worldTransform.apply({ x: this.bounds[i * 2], y: this.bounds[i * 2 + 1] });\n            bounds[i * 2] = p.x;\n            bounds[i * 2 + 1] = p.y;\n        }\n        return bounds;\n    };\n    /**\n     * 设置显示对象的监测区域\n     *\n     * @param points {Array} 区域的坐标点 [x0,y0 ..... xn,yn]\n     * @param needless {boolean} 当该值为true，当且仅当this.bounds为空时才会更新点击区域。默认为false，总是更新点击区域。\n     * @return {Array}\n     */\n    DisplayObject.prototype.setBounds = function(points, needless) {\n    };\n    DisplayObject.prototype.ContainsPoint = function(p, px, py) {\n        var n = p.length >> 1;\n        var ax, ay = p[2 * n - 3] - py,\n            bx = p[2 * n - 2] - px,\n            by = p[2 * n - 1] - py;\n    \n        //var lup = by > ay;\n        for (var i = 0; i < n; i++) {\n            ax = bx;\n            ay = by;\n            bx = p[2 * i] - px;\n            by = p[2 * i + 1] - py;\n            if (ay == by) continue;\n            lup = by > ay;\n        }\n    \n        var depth = 0;\n        for (i = 0; i < n; i++) {\n            ax = bx;\n            ay = by;\n            bx = p[2 * i] - px;\n            by = p[2 * i + 1] - py;\n            if (ay < 0 && by < 0) continue;\n            if (ay > 0 && by > 0) continue;\n            if (ax < 0 && bx < 0) continue;\n    \n            if (ay == by && Math.min(ax, bx) <= 0) return true;\n            if (ay == by) continue;\n    \n            var lx = ax + (bx - ax) * (-ay) / (by - ay);\n            if (lx === 0) return true;\n            if (lx > 0) depth++;\n            if (ay === 0 && lup && by > ay) depth--;\n            if (ay === 0 && !lup && by < ay) depth--;\n            lup = by > ay;\n        }\n        return (depth & 1) == 1;\n    };\n    \n    /**\n     * 显示对象容器，继承至DisplayObject\n     *\n     * ```js\n     * var container = new JC.Container();\n     * container.addChilds(sprite);\n     * ```\n     *\n     * @class\n     * @extends JC.DisplayObject\n     * @memberof JC\n     */\n    function Container() {\n        JC.DisplayObject.call(this);\n        this.cds = [];\n        this.timeScale = 1;\n        this.paused = false;\n    }\n    JC.Container = Container;\n    Container.prototype = Object.create(JC.DisplayObject.prototype);\n    Container.prototype.constructor = JC.Container;\n    \n    /**\n     * 向容器添加一个物体\n     * \n     * ```js\n     * container.addChilds(sprite,sprite2,text3,graphice);\n     * ```\n     *\n     * @param child {JC.Container}\n     * @return {JC.Container}\n     */\n    Container.prototype.addChilds = function(cd) {\n        if (cd === undefined) return cd;\n        var l = arguments.length;\n        if (l > 1) {\n            for (var i = 0; i < l; i++) { this.addChilds(arguments[i]); }\n            return arguments[l - 1];\n        }\n        if (cd.parent) { cd.parent.removeChilds(cd); }\n        cd.parent = this;\n        this.cds.push(cd);\n        return cd;\n    };\n    /**\n     * 从容器移除一个物体\n     * \n     * ```js\n     * container.removeChilds(sprite,sprite2,text3,graphice);\n     * ```\n     *\n     * @param child {JC.Container}\n     * @return {JC.Container}\n     */\n    Container.prototype.removeChilds = function() {\n        var l = arguments.length;\n        if (l > 1) {\n            for (var i = 0; i < l; i++) { this.removeChilds(arguments[i]); }\n        } else if (l === 1) {\n            for (var a = 0; a < this.cds.length; a++) {\n                if (this.cds[a] === arguments[0]) {\n                    this.cds.splice(a, 1);\n                    this.cds[a].parent = null;\n                    a--;\n                }\n            }\n        }\n    };\n    Container.prototype.updateTransform = function(snippet) {\n        if (!this._ready) return;\n        snippet = this.timeScale * snippet;\n        !this.paused && this.upAnimation(snippet);\n        this.updateMe();\n        this.cds.length > 0 && this.updateChilds(snippet);\n    };\n    Container.prototype.updateChilds = function(snippet) {\n        for (var i = 0, l = this.cds.length; i < l; i++) {\n            var cd = this.cds[i];\n            cd.updateTransform(snippet);\n        }\n    };\n    Container.prototype.render = function(session) {\n        this.renderMe(session);\n        this.cds.length > 0 && this.renderChilds(session);\n    };\n    Container.prototype.renderMe = function() {\n        return true;\n    };\n    Container.prototype.renderChilds = function(session) {\n        for (var i = 0, l = this.cds.length; i < l; i++) {\n            var cd = this.cds[i];\n            if (!cd.isVisible() || !cd._ready) continue;\n            cd.render(session);\n        }\n    };\n    Container.prototype.noticeEvent = function(ev) {\n        var i = this.cds.length - 1;\n        while (i >= 0) {\n            var child = this.cds[i];\n            if (child.visible) {\n                child.noticeEvent(ev);\n                if (ev.target) break;\n            }\n            i--;\n        }\n        this.upEvent(ev);\n    };\n    Container.prototype.upEvent = function(ev) {\n        if (!this._ready) return;\n        if (ev.target || (!this.passEvent && this.hitTest(ev))) {\n            if (!ev.cancleBubble || ev.target === this) {\n                if (!(this.event.listeners[ev.type] && this.event.listeners[ev.type].length > 0)) return;\n                this.event.emit(ev);\n            }\n        }\n    };\n    Container.prototype.hitTest = function(ev) {\n        if (ev.type === 'touchmove' || ev.type === 'touchend' || ev.type === 'mousemove' || ev.type === 'mouseup') {\n            var re = this.event.touchstarted;\n            if (re) ev.target = this;\n            if (ev.type === 'touchend' || ev.type === 'mouseup') this.event.touchstarted = false;\n            return re;\n        }\n        if (this.hitTestMe(ev)) {\n            ev.target = this;\n            if (ev.type === 'touchstart' || ev.type === 'mousedown') this.event.touchstarted = true;\n            return true;\n        }\n        return false;\n    };\n    Container.prototype.hitTestMe = function(ev) {\n        return this.ContainsPoint(this.getBound(), ev.global.x, ev.global.y);\n    };\n    Container.prototype.pause = function() {\n        this.paused = true;\n    };\n    Container.prototype.start = function() {\n        this.paused = false;\n    };\n    Container.prototype.cancle = function() {\n        this.Animator.animates.length = 0;\n    };\n    \n\n    function Sprite(texture) {\n        JC.Container.call(this);\n    \n        this.regX = 0;\n    \n        this.regY = 0;\n    \n        this._texture = null;\n    \n        this.tint = 0xFFFFFF;\n    \n        this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n    \n        this.shaderType = 'sprite';\n    \n        this.cachedTint = 0xFFFFFF;\n    \n        this.cachedAlpha = this.alpha;\n    \n        this.texture = texture;\n    \n        this.vertices = null;\n    \n        this.indices = new Uint16Array([0,1,2,0,2,3]);\n    \n        this.colors = null;\n    \n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n    \n        this.indexBuffer = null;\n    \n    }\n    \n    JC.Sprite = Sprite;\n    Sprite.prototype = Object.create(JC.Container.prototype);\n    Sprite.prototype.constructor = JC.Sprite;\n    \n    Object.defineProperties(Sprite.prototype, {\n        texture: {\n            get: function() {\n                return this._texture;\n            },\n            set: function(value) {\n                if (this._texture === value) {\n                    return;\n                }\n    \n                this._texture = value;\n                this.cachedTint = 0xFFFFFF;\n    \n                if (value) {\n                    // wait for the texture to load\n                    if (value.baseTexture.hasLoaded) {\n                        this.upTexture();\n                    } else {\n                        var This = this;\n                        value.on('load', function() {\n                            This.upTexture(opts);\n                            This._ready = true;\n                        });\n                    }\n                }\n            }\n        },\n        aColor: {\n            get: function() {\n                if (this.tint === this.cachedTint && this.cachedAlpha === this.alpha && this.colors) return this.colors;\n                this.cachedTint = this.tint;\n                this.cachedAlpha = this.alpha;\n                this.colors = new Float32Array(JC.UTILS.hex2rgb(this.tint).push(this.alpha));\n                return this.colors;\n            }\n        }\n    });\n    \n    Sprite.prototype.upTexture = function() {\n        this.width = this.texture.width;\n        this.height = this.texture.height;\n        this.regX = this.width >> 1;\n        this.regY = this.height >> 1;\n    \n        this.vertices = new Float32Array([-this.regX, this.regY, this.width - this.regX, this.regY, this.width - this.regX, this.regY - this.height, -this.regX, this.regY - this.height]);\n        this.setBounds(null, true);\n    };\n    \n    Sprite.prototype.setBounds = function(points, needless) {\n        var l = this.bounds.length;\n        if (l > 4 && needless) return;\n        points = points || this.vertices;\n        this.bounds = points;\n    };\n    \n    Sprite.prototype.render = function(session) {\n        session.blendModeManager.setBlendMode(this.blendMode);\n        session.shaderManager.setShader(this.shaderType);\n        var shader = session.shaderManager.currentShader;\n        shader.uniforms.projectionMatrix.value = this.worldTransform.toArray(true);\n        shader.uniforms.projectionVector.value = session.projection;\n        shader.uniforms.uSampler.value = this.texture;\n        var gl = session.gl;\n    \n        this.initBuffers(gl,shader);\n        this.uploadDynamic(gl,shader);\n        this.bindBuffers(gl,shader);\n    \n        gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n    \n    };\n    Sprite.prototype.initBuffers = function(gl, shader) {\n        var i;\n        var property;\n    \n        var dynamicOffset = 0;\n        this.dynamicStride = 0;\n    \n        for (i in shader.attributes) {\n            property = shader.attributes[i];\n    \n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n    \n        this.dynamicData = new Float32Array(this.dynamicStride * 4);\n        this.dynamicBuffer = gl.createBuffer();\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.dynamicData, gl.DYNAMIC_DRAW);\n    \n    \n    \n        this.indexBuffer = gl.createBuffer();\n    \n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n    };\n    \n    Sprite.prototype.bindBuffers = function(gl,shader) {\n        var i,property;\n            \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    \n        for (i in shader.attributes) {\n            property = shader.attributes[i];\n            gl.enableVertexAttribArray(property.attribute._location);\n            gl.vertexAttribPointer(property.attribute._location, property.size, gl.FLOAT, false, this.dynamicStride * 4, property.offset * 4);\n        }\n    \n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    };\n    Sprite.prototype.uploadDynamic = function() {\n    \n        var uvs = this.texture._uvs.get();\n        for(var i = 0;i<4;i++){\n            this.dynamicData[i*this.dynamicStride] = this.vertices[i*2];\n            this.dynamicData[i*this.dynamicStride+1] = this.vertices[i*2+1];\n    \n            this.dynamicData[i*this.dynamicStride+2] = this.uvs[i*2];\n            this.dynamicData[i*this.dynamicStride+3] = this.uvs[i*2+1];\n    \n    \n            this.dynamicData[i*this.dynamicStride+4] = this.aColor[0];\n            this.dynamicData[i*this.dynamicStride+5] = this.aColor[1];\n            this.dynamicData[i*this.dynamicStride+6] = this.aColor[2];\n            this.dynamicData[i*this.dynamicStride+7] = this.aColor[3];\n        }\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.dynamicData);\n    \n    };\n    \n    Sprite.prototype.getBounds = function() {\n    \n    };\n    \n    \n    Sprite.prototype.containsPoint = function(point) {\n        return true;\n    };\n    \n\n    function ParticleContainer(maxSize, properties, batchSize) {\n        JC.Container.call(this);\n    \n        batchSize = batchSize || 15000; //CONST.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n        maxSize = maxSize || 15000;\n    \n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        var maxBatchSize = 16384;\n        if (batchSize > maxBatchSize) {\n            batchSize = maxBatchSize;\n        }\n    \n        if (batchSize > maxSize) {\n            batchSize = maxSize;\n        }\n    \n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        this._properties = [false, true, false, false, false];\n    \n        /**\n         * @member {number}\n         * @private\n         */\n        this._maxSize = maxSize;\n    \n        /**\n         * @member {number}\n         * @private\n         */\n        this._batchSize = batchSize;\n    \n        /**\n         * @member {WebGLBuffer}\n         * @private\n         */\n        this._buffers = null;\n    \n        /**\n         * @member {number}\n         * @private\n         */\n        this._bufferToUpdate = 0;\n    \n        /**\n         * @member {boolean}\n         *\n         */\n        this.interactiveChildren = false;\n    \n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n    \n        this.setProperties(properties);\n    }\n    \n    JC.ParticleContainer = ParticleContainer;\n    ParticleContainer.prototype = Object.create(JC.Container.prototype);\n    ParticleContainer.prototype.constructor = JC.ParticleContainer;\n    \n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param properties {object} The properties to be uploaded\n     */\n    ParticleContainer.prototype.setProperties = function(properties) {\n        if (properties) {\n            this._properties[0] = 'scale' in properties ? !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'alpha' in properties ? !!properties.alpha : this._properties[4];\n        }\n    };\n    \n    ParticleContainer.prototype.updateTransform = function() {\n    \n        this.displayObjectUpdateTransform();\n    };\n    \n    ParticleContainer.prototype.render = function(session) {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n            return;\n        }\n    \n        renderer.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    };\n    \n\n    \n\n    function Renderer(view, options) {\n        options = options || {};\n    \n        if (options) {\n            for (var i in JC.CONST.DEFAULT_RENDER_OPTIONS) {\n                if (typeof options[i] === 'undefined') {\n                    options[i] = JC.CONST.DEFAULT_RENDER_OPTIONS[i];\n                }\n            }\n        } else {\n            options = JC.CONST.DEFAULT_RENDER_OPTIONS;\n        }\n    \n        this.view = typeof view !== 'string' ? view : document.getElementById(view);\n    \n        this.width = this.view.width;\n        this.height = this.view.height;\n    \n        this.projection = new Float32Array([this.width >> 1, this.width >> 1]);\n    \n        this.resolution = options.resolution;\n    \n        this.transparent = options.transparent;\n    \n        this.autoResize = options.autoResize || false;\n    \n        this.blendModes = null;\n    \n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n    \n        this.autoClear = options.autoClear;\n    \n        this._backgroundColor = 0x000000;\n    \n        this._backgroundColorRgb = [0, 0, 0];\n    \n        this._backgroundColorString = '#000000';\n    \n        this.backgroundColor = options.backgroundColor || this._backgroundColor;\n    \n    \n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    \n        this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n        this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    \n        this._contextOptions = {\n            alpha: this.transparent,\n            antialias: options.antialias,\n            premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n            stencil: true,\n            preserveDrawingBuffer: options.preserveDrawingBuffer\n        };\n    \n        // this.drawCount = 0;\n    \n        this.shaderManager = new JC.ShaderManager(this);\n    \n        this.blendModeManager = new JC.BlendModeManager(this);\n    \n        this._createContext();\n        this._initContext();\n    \n        this._mapGlModes();\n    \n    \n        this.renderSession = {};\n        this.renderSession.gl = this.gl;\n        this.renderSession.drawCount = 0;\n        this.renderSession.shaderManager = this.shaderManager;\n        this.renderSession.blendModeManager = this.blendModeManager;\n        this.renderSession.renderer = this;\n        this.renderSession.resolution = this.resolution;\n        this.renderSession.projection = this.projection;\n    \n    }\n    \n    // constructor\n    JC.Renderer = Renderer;\n    Renderer.prototype = Object.create(SystemRenderer.prototype);\n    Renderer.prototype.constructor = Renderer;\n    \n    Renderer.prototype._createContext = function() {\n        var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n        this.gl = gl;\n    \n        if (!gl) {\n            throw new Error('This browser does not support webGL. Try using the canvas renderer');\n        }\n    \n        gl.renderer = this;\n    };\n    \n    Renderer.prototype._initContext = function() {\n        var gl = this.gl;\n    \n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.enable(gl.BLEND);\n    \n        this.emit('context', gl);\n    \n        this.resize(this.width, this.height);\n    \n    };\n    \n    Renderer.prototype.render = function(object) {\n    \n        this.emit('prerender');\n    \n        if (this.gl.isContextLost()) {\n            return;\n        }\n    \n        // this.drawCount = 0;\n    \n        object.updateTransform();\n    \n        var gl = this.gl;\n    \n    \n        if (this.clearBeforeRender) {\n            if (this.transparent) {\n                gl.clearColor(0, 0, 0, 0);\n            } else {\n                gl.clearColor(this._backgroundColorRgb[0], this._backgroundColorRgb[1], this._backgroundColorRgb[2], 1);\n            }\n    \n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    \n        this.renderDisplayObject(object);\n    \n        this.emit('postrender');\n    };\n    \n    Renderer.prototype.renderDisplayObject = function(displayObject) {\n        displayObject.render(this.renderSession);\n    };\n    \n    Renderer.prototype.handleContextLost = function(event) {\n        event.preventDefault();\n    };\n    \n    Renderer.prototype.handleContextRestored = function() {\n        this._initContext();\n    };\n    \n    Renderer.prototype._mapGlModes = function() {\n        var gl = this.gl;\n    \n        if (!this.blendModes) {\n            this.blendModes = {};\n    \n            this.blendModes[JC.CONST.BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n            this.blendModes[JC.CONST.BLEND_MODES.ADD] = [gl.ONE, gl.DST_ALPHA];\n            this.blendModes[JC.CONST.BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n            this.blendModes[JC.CONST.BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR];\n        }\n    \n        if (!this.drawModes) {\n            this.drawModes = {};\n    \n            this.drawModes[JC.CONST.DRAW_MODES.POINTS] = gl.POINTS;\n            this.drawModes[JC.CONST.DRAW_MODES.LINES] = gl.LINES;\n            this.drawModes[JC.CONST.DRAW_MODES.LINE_LOOP] = gl.LINE_LOOP;\n            this.drawModes[JC.CONST.DRAW_MODES.LINE_STRIP] = gl.LINE_STRIP;\n            this.drawModes[JC.CONST.DRAW_MODES.TRIANGLES] = gl.TRIANGLES;\n            this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;\n            this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_FAN] = gl.TRIANGLE_FAN;\n        }\n    };\n    \n    Object.defineProperties(Renderer.prototype, {\n        backgroundColor: {\n            get: function() {\n                return this._backgroundColor;\n            },\n            set: function(val) {\n                this._backgroundColor = val;\n                this._backgroundColorString = utils.hex2string(val);\n                utils.hex2rgb(val, this._backgroundColorRgb);\n            }\n        }\n    });\n    \n    Renderer.prototype.resize = function(width, height) {\n        this.width = width * this.resolution;\n        this.height = height * this.resolution;\n    \n        this.view.width = this.width;\n        this.view.height = this.height;\n    \n        this.projection = new Float32Array([this.width >> 1, this.width >> 1]);\n    \n        if (this.autoResize) {\n            this.view.style.width = this.width / this.resolution + 'px';\n            this.view.style.height = this.height / this.resolution + 'px';\n        }\n    };\n    \n    function ShaderManager(renderer) {\n    \n        this.renderer = renderer;\n    \n        this.shaderType = '';\n    \n        this.currentShader = null;\n    \n        this.init();\n    }\n    JC.ShaderManager = ShaderManager;\n    ShaderManager.prototype.constructor = JC.ShaderManager;\n    \n    ShaderManager.prototype.init = function() {\n    \n        var gl = this.renderer.gl;\n    \n        this.maxAttibs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    \n        this.shaderPool = {\n            particle: new ParticleShader(gl),\n            sprite: new SpriteShader(gl),\n            graphics: new GraphicsShader(gl),\n            text: new TextShader(gl)\n        };\n    };\n    \n    ShaderManager.prototype.setShader = function(shaderType) {\n        if (this.shaderType === shaderType) {\n            return false;\n        }\n    \n        this.currentShader = this.shaderPool[shaderType];\n    \n        this.renderer.gl.useProgram(this.currentShader.program);\n    \n        this.shaderType = shaderType;\n    \n        return true;\n    };\n    \n    function Shader(gl, vertexSrc, fragmentSrc, uniforms, attributes) {\n        if (!vertexSrc || !fragmentSrc) {\n            throw new Error('jcw2d.js Error. Shader requires vertexSrc and fragmentSrc');\n        }\n    \n        this.type = '';\n    \n        this.gl = gl;\n    \n        this.program = null;\n    \n        this.uniforms = uniforms || {};\n    \n        this.attributes = attributes || {};\n    \n        this.textureCount = 1;\n    \n        this.MAX_TEXTURE_UNITS = gl.getParameter(MAX_TEXTURE_IMAGE_UNITS);\n    \n        this.vertexSrc = vertexSrc;\n    \n        this.fragmentSrc = fragmentSrc;\n    \n        this.init();\n    }\n    \n    Shader.prototype.constructor = Shader;\n    \n    Shader.prototype.init = function() {\n        this.compile();\n    \n        this.gl.useProgram(this.program);\n    \n        this.cacheUniformLocations(Object.keys(this.uniforms));\n        this.cacheAttributeLocations(Object.keys(this.attributes));\n    };\n    \n    Shader.prototype.cacheUniformLocations = function(keys) {\n        for (var i = 0; i < keys.length; ++i) {\n            this.uniforms[keys[i]]._location = this.gl.getUniformLocation(this.program, keys[i]);\n        }\n    };\n    \n    Shader.prototype.cacheAttributeLocations = function(keys) {\n        for (var i = 0; i < keys.length; ++i) {\n            this.attributes[keys[i]]._location = this.gl.getAttribLocation(this.program, keys[i]);\n        }\n    };\n    \n    Shader.prototype.compile = function() {\n        var gl = this.gl;\n    \n        var glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexSrc);\n        var glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentSrc);\n    \n        var program = gl.createProgram();\n    \n        gl.attachShader(program, glVertShader);\n        gl.attachShader(program, glFragShader);\n        gl.linkProgram(program);\n    \n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            console.error('jcw2d.js Error: Could not initialize shader.');\n            console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n            console.error('gl.getError()', gl.getError());\n    \n            if (gl.getProgramInfoLog(program) !== '') {\n                console.warn('jcw2d.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n            }\n    \n            gl.deleteProgram(program);\n            program = null;\n        }\n    \n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    \n        return (this.program = program);\n    };\n    \n    Shader.prototype.syncUniform = function(uniform) {\n        var location = uniform._location,\n            value = uniform.value,\n            gl = this.gl,\n            i, il;\n    \n        switch (uniform.type) {\n            case 'b':\n            case 'bool':\n            case 'boolean':\n                gl.uniform1i(location, value ? 1 : 0);\n                break;\n    \n                // single int value\n            case 'i':\n            case '1i':\n                gl.uniform1i(location, value);\n                break;\n    \n                // single float value\n            case 'f':\n            case '1f':\n                gl.uniform1f(location, value);\n                break;\n    \n                // Float32Array(2) or JS Arrray\n            case '2f':\n                gl.uniform2f(location, value[0], value[1]);\n                break;\n    \n                // Float32Array(3) or JS Arrray\n            case '3f':\n                gl.uniform3f(location, value[0], value[1], value[2]);\n                break;\n    \n                // Float32Array(4) or JS Arrray\n            case '4f':\n                gl.uniform4f(location, value[0], value[1], value[2], value[3]);\n                break;\n    \n                // a 2D Point object\n            case 'v2':\n                gl.uniform2f(location, value.x, value.y);\n                break;\n    \n                // a 3D Point object\n            case 'v3':\n                gl.uniform3f(location, value.x, value.y, value.z);\n                break;\n    \n                // a 4D Point object\n            case 'v4':\n                gl.uniform4f(location, value.x, value.y, value.z, value.w);\n                break;\n    \n                // Int32Array or JS Array\n            case '1iv':\n                gl.uniform1iv(location, value);\n                break;\n    \n                // Int32Array or JS Array\n            case '2iv':\n                gl.uniform2iv(location, value);\n                break;\n    \n                // Int32Array or JS Array\n            case '3iv':\n                gl.uniform3iv(location, value);\n                break;\n    \n                // Int32Array or JS Array\n            case '4iv':\n                gl.uniform4iv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '1fv':\n                gl.uniform1fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '2fv':\n                gl.uniform2fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '3fv':\n                gl.uniform3fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '4fv':\n                gl.uniform4fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case 'm2':\n            case 'mat2':\n            case 'Matrix2fv':\n                gl.uniformMatrix2fv(location, uniform.transpose||false, value);\n                break;\n    \n                // Float32Array or JS Array\n            case 'm3':\n            case 'mat3':\n            case 'Matrix3fv':\n    \n                gl.uniformMatrix3fv(location, uniform.transpose||false, value);\n                break;\n    \n                // Float32Array or JS Array\n            case 'm4':\n            case 'mat4':\n            case 'Matrix4fv':\n                gl.uniformMatrix4fv(location, uniform.transpose||false, value);\n                break;\n    \n                // a Color Value\n            case 'c':\n                if (typeof value === 'number') {\n                    value = utils.hex2rgb(value);\n                }\n    \n                gl.uniform3f(location, value[0], value[1], value[2]);\n                break;\n    \n                // flat array of integers (JS or typed array)\n            case 'iv1':\n                gl.uniform1iv(location, value);\n                break;\n    \n                // flat array of integers with 3 x N size (JS or typed array)\n            case 'iv':\n                gl.uniform3iv(location, value);\n                break;\n    \n                // flat array of floats (JS or typed array)\n            case 'fv1':\n                gl.uniform1fv(location, value);\n                break;\n    \n                // flat array of floats with 3 x N size (JS or typed array)\n            case 'fv':\n                gl.uniform3fv(location, value);\n                break;\n    \n                // array of 2D Point objects\n            case 'v2v':\n                if (!uniform._array) {\n                    uniform._array = new Float32Array(2 * value.length);\n                }\n    \n                for (i = 0, il = value.length; i < il; ++i) {\n                    uniform._array[i * 2] = value[i].x;\n                    uniform._array[i * 2 + 1] = value[i].y;\n                }\n    \n                gl.uniform2fv(location, uniform._array);\n                break;\n    \n                // array of 3D Point objects\n            case 'v3v':\n                if (!uniform._array) {\n                    uniform._array = new Float32Array(3 * value.length);\n                }\n    \n                for (i = 0, il = value.length; i < il; ++i) {\n                    uniform._array[i * 3] = value[i].x;\n                    uniform._array[i * 3 + 1] = value[i].y;\n                    uniform._array[i * 3 + 2] = value[i].z;\n    \n                }\n    \n                gl.uniform3fv(location, uniform._array);\n                break;\n    \n                // array of 4D Point objects\n            case 'v4v':\n                if (!uniform._array) {\n                    uniform._array = new Float32Array(4 * value.length);\n                }\n    \n                for (i = 0, il = value.length; i < il; ++i) {\n                    uniform._array[i * 4] = value[i].x;\n                    uniform._array[i * 4 + 1] = value[i].y;\n                    uniform._array[i * 4 + 2] = value[i].z;\n                    uniform._array[i * 4 + 3] = value[i].w;\n    \n                }\n    \n                gl.uniform4fv(location, uniform._array);\n                break;\n    \n                // PIXI.Texture\n            case 't':\n            case 'sampler2D':\n    \n                if (!uniform.value || !uniform.value.baseTexture.hasLoaded) {\n                    break;\n                }\n    \n                // activate this texture\n                gl.activeTexture(gl['TEXTURE' + this.textureCount]);\n    \n                var texture = uniform.value.baseTexture.texture;\n    \n                if (!texture) {\n                    this.initSampler2D(uniform);\n    \n                    // set the textur to the newly created one..\n                    texture = uniform.value.baseTexture.texture;\n                }\n    \n                // bind the texture\n                gl.bindTexture(gl.TEXTURE_2D, texture);\n    \n                // set uniform to texture index\n                gl.uniform1i(uniform._location, this.textureCount);\n    \n                // increment next texture id\n                this.textureCount++;\n    \n                break;\n    \n            default:\n                console.warn('jcw2d.js Shader Warning: Unknown uniform type: ' + uniform.type);\n        }\n    };\n    \n    Shader.prototype.syncUniforms = function() {\n        this.textureCount = 1;\n    \n        for (var key in this.uniforms) {\n            this.syncUniform(this.uniforms[key]);\n        }\n    };\n    \n    Shader.prototype.initSampler2D = function(uniform) {\n        var gl = this.gl;\n    \n        var texture = uniform.value.baseTexture;\n    \n        if (!texture.hasLoaded) {\n            return;\n        }\n    \n        this.updateTexture(texture);\n    };\n    \n    Shader.prototype.updateTexture = function(texture) {\n        texture = texture.baseTexture || texture;\n    \n        if (!texture.hasLoaded) {\n            return;\n        }\n    \n        var gl = this.gl;\n    \n        if (!texture.texture) {\n            texture.texture = gl.createTexture();\n            texture.on('update', this.updateTexture, this);\n        }\n    \n    \n        gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n    \n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n    \n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    \n    \n        if (texture.mipmap && texture.isPowerOfTwo) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n            gl.generateMipmap(gl.TEXTURE_2D);\n        } else {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n        }\n    \n        if (!texture.isPowerOfTwo) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        } else {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        }\n    \n        return texture.texture;\n    };\n    \n    Shader.prototype._glCompile = function(type, src) {\n        var shader = this.gl.createShader(type);\n    \n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n    \n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.log(this.gl.getShaderInfoLog(shader));\n            return null;\n        }\n    \n        return shader;\n    };\n    \n    function SpriteShader(gl) {\n        var uniforms = {\n            uSampler: { type: 'sampler2D', value: 0 },\n            projectionMatrix: {\n                type: 'mat3',\n                value: new Float32Array([1, 0, 0,\n                    0, 1, 0,\n                    0, 0, 1\n                ])\n            },\n            projectionVector: {\n                type: '2fv',\n                value: new Float32Array([1, 1])\n            }\n        };\n    \n        var attributes = {\n            aVertexPosition: {\n                size: 2,\n            },\n            aTextureCoord: {\n                size: 2,\n            },\n            aColor: {\n                size: 4,\n            }\n        };\n    \n        var vertexSrc = [\n            'precision lowp float;',\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute vec4 aColor;',\n    \n            'uniform mat3 projectionMatrix;',\n            'uniform vec2 projectionVector;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying vec4 vColor;',\n    \n            'void main(void){',\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n            '   vTextureCoord = aTextureCoord;',\n            '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\n            '}'\n        ].join('\\n');\n    \n        var fragmentSrc = [\n            'precision lowp float;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying vec4 vColor;',\n    \n            'uniform sampler2D uSampler;',\n    \n            'void main(void){',\n            '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;',\n            '}'\n        ].join('\\n');\n    \n    \n        Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n    }\n    \n    // constructor\n    SpriteShader.prototype = Object.create(Shader.prototype);\n    SpriteShader.prototype.constructor = SpriteShader;\n    \n    function ParticleShader(shaderManager) {\n        var uniforms = {\n            uAlpha: { type: '1f', value: 1 },\n            uSampler: { type: 'sampler2D', value: 0 },\n            projectionMatrix: {\n                type: 'mat3',\n                value: new Float32Array([1, 0, 0,\n                    0, 1, 0,\n                    0, 0, 1\n                ])\n            },\n            projectionVector: {\n                type: '2fv',\n                value: new Float32Array([1, 1])\n            }\n        };\n    \n        if (customUniforms) {\n            for (var u in customUniforms) {\n                uniforms[u] = customUniforms[u];\n            }\n        }\n    \n    \n        var attributes = {\n            aVertexPosition: 0,\n            aTextureCoord: 0,\n            aAlpha: 0,\n            aPositionCoord: 0,\n            aRotation: 0\n        };\n    \n        if (customAttributes) {\n            for (var a in customAttributes) {\n                attributes[a] = customAttributes[a];\n            }\n        }\n    \n        var vertexSrc = [\n            'precision lowp float;',\n    \n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute float aAlpha;',\n    \n            'attribute vec2 aPositionCoord;',\n            'attribute float aRotation;',\n    \n            'uniform mat3 projectionMatrix;',\n            'uniform vec2 projectionVector;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying float vAlpha;',\n    \n            'void main(void){',\n            '   vec2 v = aVertexPosition;',\n    \n            '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);',\n            '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);',\n            '   v = v + aPositionCoord;',\n    \n            '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy / projectionVector, 0.0, 1.0);',\n    \n            '   vTextureCoord = aTextureCoord;',\n            '   vAlpha = aAlpha;',\n            '}'\n        ].join('\\n');\n    \n        var fragmentSrc = [\n            'precision lowp float;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying float vAlpha;',\n    \n            'uniform sampler2D uSampler;',\n            'uniform float uAlpha;',\n    \n            'void main(void){',\n            '  vec4 color = texture2D(uSampler, vTextureCoord) * vAlpha * uAlpha;',\n            '  if (color.a == 0.0) discard;',\n            '  gl_FragColor = color;',\n            '}'\n        ].join('\\n');\n    \n    \n        Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n    \n    }\n    \n    ParticleShader.prototype = Object.create(TextureShader.prototype);\n    ParticleShader.prototype.constructor = ParticleShader;\n    \n    module.exports = ParticleShader;\n    \n    function GraphicsShader(shaderManager) {\n        Shader.call(this,\n            shaderManager,\n            // vertex shader\n            [\n                'attribute vec2 aVertexPosition;',\n                'attribute vec4 aColor;',\n    \n                'uniform mat3 projectionMatrix;',\n                'uniform vec2 projectionVector;',\n    \n                'uniform float alpha;',\n                'uniform vec3 tint;',\n    \n                'varying vec4 vColor;',\n    \n                'void main(void){',\n                '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n                '   vColor = aColor * vec4(tint * alpha, alpha);',\n                '}'\n            ].join('\\n'),\n            // fragment shader\n            [\n                'precision mediump float;',\n    \n                'varying vec4 vColor;',\n    \n                'void main(void){',\n                '   gl_FragColor = vColor;',\n                '}'\n            ].join('\\n'),\n            // custom uniforms\n            {\n                tint: { type: '3f', value: [0, 0, 0] },\n                alpha: { type: '1f', value: 0 },\n                projectionMatrix: { type: 'mat3', value: new Float32Array(9) },\n                projectionVector: {\n                    type: '2fv',\n                    value: new Float32Array([1, 1])\n                }\n            },\n            // custom attributes\n            {\n                aVertexPosition: 0,\n                aColor: 0\n            }\n        );\n    }\n    \n    GraphicsShader.prototype = Object.create(Shader.prototype);\n    GraphicsShader.prototype.constructor = GraphicsShader;\n    \n\n    return JC;\n\n}));","/**\n * 简单拷贝json对象\n *\n * @name copyJSON\n * @memberof JC\n * @property {JC.copyJSON}\n */\n\n// JC.copyJSON = ;\n\n/**\n * 将角度转化成弧度\n *\n * @name DTR\n * @memberof JC\n * @property {JC.DTR}\n */\n\n// JC.DTR = Math.PI/180;\n\n\n/**\n * 是否为数组\n *\n * @name isArray\n * @memberof JC\n * @property {JC.isArray}\n */\n// JC.isArray = ;\n\n/**\n * 是否为对象\n *\n * @name isObject\n * @memberof JC\n * @property {JC.isObject}\n */\n// JC.isObject = (function(){\n//     var ks = _rt({});\n//     return function(object){\n//         return Object.prototype.toString.call(object) === ks;\n//     };\n// })();\n\n/**\n * 是否为数字\n *\n * @name isNumber\n * @memberof JC\n * @property {JC.isNumber}\n */\n// JC.isNumber = (function(){\n//     var ks = _rt(1);\n//     return function(object){\n//         return Object.prototype.toString.call(object) === ks;\n//     };\n// })();\n\n/**\n * 是否为函数\n *\n * @name isFunction\n * @memberof JC\n * @property {JC.isFunction}\n */\n// JC.isFunction = (function(){\n//     var ks = _rt(function(){});\n//     return function(object){\n//         return Object.prototype.toString.call(object) === ks;\n//     };\n// })();\n\n/**\n * 强化的随机数\n *\n * @name random\n * @memberof JC\n * @property {JC.random}\n */\n\n// JC.random = function(min, max){\n//     if (JC.isArray(min))\n//         return min[~~(Math.random() * min.length)];\n//     if (!JC.isNumber(max))\n//         max = min || 1, min = 0;\n//     return min + Math.random() * (max - min);\n// };\n\n\n/**\n * 阿基米德求模\n *\n * @name euclideanModulo\n * @memberof JC\n * @property {JC.euclideanModulo}\n */\n\n// JC.euclideanModulo = function(n, m){\n//     return ((n % m) + m) % m;\n// };\n\nfunction _rt(val) {\n    return Object.prototype.toString.call(val);\n}\n\nJC.UTILS = {\n\n    hex2rgb: function(hex, out) {\n        out = out || [];\n\n        out[0] = (hex >> 16 & 0xFF) / 255;\n        out[1] = (hex >> 8 & 0xFF) / 255;\n        out[2] = (hex & 0xFF) / 255;\n\n        return out;\n    },\n\n    hex2string: function(hex) {\n        hex = hex.toString(16);\n        hex = '000000'.substr(0, 6 - hex.length) + hex;\n\n        return '#' + hex;\n    },\n\n    rgb2hex: function(rgb) {\n        return ((rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255);\n    },\n\n    getNextPowerOfTwo: function(number) {\n        // see: http://en.wikipedia.org/wiki/Power_of_two#Fast_algorithm_to_check_if_a_positive_number_is_a_power_of_two\n        if (number > 0 && (number & (number - 1)) === 0) {\n            return number;\n        } else {\n            var result = 1;\n\n            while (result < number) {\n                result <<= 1;\n            }\n\n            return result;\n        }\n    },\n\n    isPowerOfTwo: function(width, height) {\n        return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n    },\n\n    sayHi: function(type) {\n        if (this._saidHi) {\n            return;\n        }\n\n        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n            var args = [\n                '\\n %c %c %c jcw2d.js ' + JC.CONST.VERSION + ' - ✰ ' + type + ' ✰  %c ' + ' %c ' + ' http://www.jason82.com/  %c %c ♥%c♥%c♥ \\n\\n',\n                'background: #ff66a5; padding:5px 0;',\n                'background: #ff66a5; padding:5px 0;',\n                'color: #ff66a5; background: #030307; padding:5px 0;',\n                'background: #ff66a5; padding:5px 0;',\n                'background: #ffc3dc; padding:5px 0;',\n                'background: #ff66a5; padding:5px 0;',\n                'color: #ff2424; background: #fff; padding:5px 0;',\n                'color: #ff2424; background: #fff; padding:5px 0;',\n                'color: #ff2424; background: #fff; padding:5px 0;'\n            ];\n\n            window.console.log.apply(console, args); //jshint ignore:line\n        } else if (window.console) {\n            window.console.log('jcw2d.js ' + JC.CONST.VERSION + ' - ' + type + ' - http://www.jason82.com/'); //jshint ignore:line\n        }\n\n        this._saidHi = true;\n    },\n\n    isWebGLSupported: function() {\n        var contextOptions = { stencil: true };\n        try {\n            if (!window.WebGLRenderingContext) {\n                return false;\n            }\n\n            var canvas = document.createElement('canvas'),\n                gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);\n\n            return !!(gl && gl.getContextAttributes().stencil);\n        } catch (e) {\n            return false;\n        }\n    },\n\n    sign: function(n) {\n        return n ? (n < 0 ? -1 : 1) : 0;\n    },\n\n    removeItems: function(arr, startIdx, removeCount) {\n        var length = arr.length;\n\n        if (startIdx >= length || removeCount === 0) {\n            return;\n        }\n\n        removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);\n        for (var i = startIdx, len = length - removeCount; i < len; ++i) {\n            arr[i] = arr[i + removeCount];\n        }\n\n        arr.length = len;\n    },\n\n    copyJSON: function(json) {\n        return JSON.parse(JSON.stringify(json));\n    },\n\n    isArray: (function() {\n        var ks = _rt('s');\n        return function(object) {\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    isObject: (function() {\n        var ks = _rt({});\n        return function(object) {\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    isNumber: (function() {\n        var ks = _rt(1);\n        return function(object) {\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    /**\n     * 是否为函数\n     *\n     * @name isFunction\n     * @memberof JC\n     * @property {JC.isFunction}\n     */\n    isFunction: (function() {\n        var ks = _rt(function() {});\n        return function(object) {\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    /**\n     * 强化的随机数\n     *\n     * @name random\n     * @memberof JC\n     * @property {JC.random}\n     */\n    random: function(min, max) {\n        if (this.isArray(min))\n            return min[~~(Math.random() * min.length)];\n        if (!this.isNumber(max))\n            max = min || 1, min = 0;\n        return min + Math.random() * (max - min);\n    },\n\n    /**\n     * 阿基米德求模\n     *\n     * @name euclideanModulo\n     * @memberof JC\n     * @property {JC.euclideanModulo}\n     */\n    euclideanModulo: function(n, m) {\n        return ((n % m) + m) % m;\n    },\n\n    clamp: function(x, a, b) {\n        return (x < a) ? a : ((x > b) ? b : x);\n    },\n\n    TextureCache: {},\n\n    BaseTextureCache: {}\n\n};\n","/**\n * jcw2d的事件消息对象的类\n *\n * @class JC.InteractionData\n * @constructor\n */\nfunction InteractionData() {\n    /**\n     * 转换到canvas坐标系统的事件触发点\n     *\n     * @property global\n     * @type Object\n     */\n    this.global = { x: -100000, y: -100000 };\n\n    /**\n     * 事件源\n     *\n     * @property target\n     * @type JC.Container\n     */\n    this.target = null;\n\n    /**\n     * 浏览器的原始事件对象\n     *\n     * @property originalEvent\n     * @type Event\n     */\n    this.originalEvent = null;\n\n    /**\n     * 在canvas内阻止事件冒泡\n     *\n     * @property cancleBubble\n     * @type Boolean\n     */\n    this.cancleBubble = false;\n\n    /**\n     * canvas视窗和页面坐标的兑换比例\n     *\n     * @property ratio\n     * @type Number\n     */\n    this.ratio = 1;\n\n    /**\n     * 事件类型\n     *\n     * @property type\n     * @type String\n     */\n    this.type = '';\n}\nJC.InteractionData = InteractionData;\n\n\n\n/**\n * jcw2d的事件对象的类\n *\n * @class JC.Eventer\n * @constructor Eventer\n * @memberof JC\n */\nfunction Eventer() {\n    this.touchstarted = false;\n    this.mouseDowned = false;\n    this.listeners = {};\n}\n/**\n * 事件对象的事件绑定函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 回调函数\n * @private\n */\nEventer.prototype.on = function(type, fn) {\n    this.listeners[type] = this.listeners[type] || [];\n    this.listeners[type].push(fn);\n};\n/**\n * 事件对象的事件解绑函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 注册时回调函数的引用\n * @private\n */\nEventer.prototype.off = function(type, fn) {\n    if (this.listeners[type]) {\n        var i = this.listeners[type].length;\n        if (fn) {\n            while (i--) {\n                if (cbs[type][i] === fn) {\n                    cbs[type].splice(i, 1);\n                }\n            }\n        } else {\n            cbs[type].length = 0;\n        }\n    }\n};\n/**\n * 事件对象的触发事件函数\n *\n * @param ev {JC.InteractionData} 事件类型\n * @private\n */\nEventer.prototype.emit = function(ev) {\n    if (this.listeners === undefined) return;\n    var ears = this.listeners;\n    var cbs = ears[ev.type];\n    if (cbs !== undefined) {\n        var length = cbs.length;\n        var i;\n        for (i = 0; i < length; i++) {\n            cbs[i].call(this, ev);\n        }\n    }\n};\nJC.Eventer = Eventer;\n","/**\n * 动画对象的基本类型\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画配置信息\n */\n\nfunction Animate(opts) {\n    this.element = opts.element || {};\n    this.duration = opts.duration || 300;\n    this.living = true;\n\n    this.onCompelete = opts.onCompelete || null;\n    this.onUpdate = opts.onUpdate || null;\n\n    this.infinity = opts.infinity || false;\n    this.alternate = opts.alternate || false;\n    this.ease = opts.ease || 'easeBoth';\n    this.repeats = opts.repeats || 0;\n    this.delay = opts.delay || 0;\n    this.progress = 0 - this.delay;\n\n    this.timeScale = opts.timeScale || 1;\n\n    this.paused = false;\n}\nJC.Animate = Animate;\nAnimate.prototype.nextPose = function() {\n    var cache = {};\n    for (var i in this.ATRE) {\n        cache[i] = JC.TWEEN[this.ease](this.progress, this.ATRS[i], this.ATRE[i] - this.ATRS[i], this.duration);\n        if (this.element[i] !== undefined) this.element[i] = cache[i];\n    }\n    return cache; //this.onUpdate\n};\nAnimate.prototype.pause = function() {\n    this.paused = true;\n};\nAnimate.prototype.start = function() {\n    this.paused = false;\n};\nAnimate.prototype.stop = function() {\n    this.progress = this.duration;\n};\nAnimate.prototype.cancle = function() {\n    this.living = false;\n};\n\n\n/**\n * Transition类型动画对象\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画所具备的特性\n */\n\nfunction Transition(opts) {\n    JC.Animate.call(this, opts);\n\n    this.ATRS = opts.from;\n    this.ATRE = opts.to;\n}\nJC.Transition = Transition;\nTransition.prototype = Object.create(JC.Animate.prototype);\nTransition.prototype.constructor = JC.Transition;\nTransition.prototype.update = function(snippet) {\n    if (this.paused || !this.living) return;\n    this.progress += this.timeScale * snippet;\n\n    if (this.progress < this.duration) {\n        if (this.progress < 0) return;\n        var pose = this.nextPose();\n        this.onUpdate && this.onUpdate(pose, this.progress / this.duration);\n    } else {\n        this.element.setVal(this.ATRE);\n        this.onUpdate && this.onUpdate(this.ATRE, 1);\n        if (this.repeats > 0 || this.infinity) {\n            this.repeats > 0 && --this.repeats;\n            this.progress = 0;\n            if (this.alternate) {\n                var sc = JC.copyJSON(this.ATRS);\n                this.ATRS = JC.copyJSON(this.ATRE);\n                this.ATRE = sc;\n            } else {\n                this.element.setVal(this.ATRS);\n            }\n        } else {\n            this.living = false;\n            this.onCompelete && this.onCompelete();\n        }\n    }\n};\n\n\n/**\n * Animation类型动画对象\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画配置信息\n */\nfunction Animation(opts) {\n    JC.Animate.call(this, opts);\n\n    this._keyframes = opts.keys;\n    this._keyIndex = 0;\n    this._direction = 1;\n    this._keyConfig = opts.keyConfig;\n\n    this.configKey();\n}\nJC.Animation = Animation;\nAnimation.prototype = Object.create(JC.Animate.prototype);\nAnimation.prototype.constructor = JC.Animation;\nAnimation.prototype.configKey = function() {\n    this.ATRS = this._keyframes[this._keyIndex];\n    this._keyIndex += this._direction;\n    this.ATRE = this._keyframes[this._keyIndex];\n    var config = this._keyConfig[Math.min(this._keyIndex, this._keyIndex - this._direction)] || {};\n    this.ease = config.ease || this.ease;\n    this.duration = config.duration || this.duration;\n    this.progress = 0;\n};\nAnimation.prototype.update = function(snippet) {\n    if (this.paused || !this.living) return;\n    this.progress += this.timeScale * snippet;\n\n    if (this.progress < this.duration) {\n        if (this.progress < 0) return;\n        var pose = this.nextPose();\n        this.onUpdate && this.onUpdate(pose, this.progress / this.duration, this._keyIndex);\n    } else {\n        this.element.setVal(this.ATRE);\n        this.onUpdate && this.onUpdate(this.ATRE, 1, this._keyIndex);\n        if (this._keyIndex < this._keyframes.length - 1 && this._keyIndex > 0) {\n            this.configKey();\n        } else {\n            if (this.repeats > 0 || this.infinity) {\n                this.repeats > 0 && --this.repeats;\n                if (this.alternate) {\n                    this._direction *= -1;\n                } else {\n                    this._keyIndex = 0;\n                }\n                this.configKey();\n            } else {\n                this.living = false;\n                this.onCompelete && this.onCompelete();\n            }\n        }\n    }\n};\n\n\n/**\n * MovieClip类型动画对象\n *\n * @class\n * @memberof JC\n * @param [element] {object} 动画对象 内部传入\n * @param [opts] {object} 动画配置信息 内部传入\n */\nfunction MovieClip(element, opts) {\n    this.element = element;\n    this.living = false;\n\n    this.onCompelete = null;\n    // this.onUpdate = null;\n\n    this.infinity = false;\n    this.alternate = false;\n    this.repeats = 0;\n\n    this.animations = opts.animations || {};\n\n    this.index = 0;\n    this.direction = 1;\n    this.frames = [];\n    this.sy = opts.sy || 0;\n    this.sx = opts.sx || 0;\n    this.fillMode = 0;\n    this.fps = 16;\n\n    this.paused = false;\n\n    this.pt = 0;\n    this.nt = 0;\n}\nJC.MovieClip = MovieClip;\nMovieClip.prototype.update = function(snippet) {\n    if (this.paused || !this.living) return;\n    this.nt += snippet;\n    if (this.nt - this.pt < this.interval) return;\n    this.pt = this.nt;\n    var i = this.index + this.direction;\n    if (i < this.frames.length && i >= 0) {\n        this.index = i;\n        // Do you need this handler???\n        // this.onUpdate&&this.onUpdate(this.index);\n    } else {\n        if (this.repeats > 0 || this.infinity) {\n            this.repeats > 0 && --this.repeats;\n            if (this.alternate) {\n                this.direction *= -1;\n                this.index += this.direction;\n            } else {\n                this.direction = 1;\n                this.index = 0;\n            }\n            // Do you need this handler???\n            // this.onUpdate&&this.onUpdate(this.index);\n        } else {\n            this.living = false;\n            this.index = this.fillMode;\n            this.onCompelete && this.onCompelete();\n            this.next && this.next();\n        }\n    }\n};\nMovieClip.prototype.getFramePos = function() {\n    var pos = {\n        x: this.sx,\n        y: this.sy\n    };\n    var cf = this.frames[this.index];\n    if (cf > 0) {\n        var row = this.element._textureW / this.element.width >> 0;\n        var lintRow = this.sx / this.element.width >> 0;\n        var lintCol = this.sy / this.element.height >> 0;\n        var mCol = lintCol + (lintRow + cf) / row >> 0;\n        var mRow = (lintRow + cf) % row;\n        pos.x = mRow * this.element.width;\n        pos.y = mCol * this.element.height;\n    }\n    return pos;\n};\nMovieClip.prototype.playMovie = function(opts) {\n    this.next = null;\n    var movie = this.format(opts.movie);\n    if (!JC.isArray(movie)) return;\n    this.frames = movie;\n    this.index = 0;\n    this.direction = 1;\n    this.fillMode = opts.fillMode || 0;\n    this.fps = opts.fps || this.fps;\n    this.infinity = opts.infinity || false;\n    this.alternate = opts.alternate || false;\n    this.repeats = opts.repeats || 0;\n    this.living = true;\n    this.onCompelete = opts.onCompelete || null;\n};\nMovieClip.prototype.format = function(movie) {\n    if (JC.isString(movie)) {\n        var config = this.animations[movie];\n        if (config) {\n            return this.format(config);\n        } else {\n            console.warn(\n                '%c JC.MovieClip warn %c: you didn\\`t config %c' + movie + '%c in animations ',\n                'color: #f98165; background: #80a89e',\n                'color: #80a89e; background: #cad9d5;',\n                'color: #f98165; background: #cad9d5',\n                'color: #80a89e; background: #cad9d5'\n            );\n            return false;\n        }\n    } else if (JC.isArray(movie)) {\n        return movie;\n    } else if (JC.isObject(movie)) {\n        var arr = [];\n        for (var i = movie.start; i <= movie.end; i++) {\n            arr.push(i);\n        }\n        if (movie.next && this.animations[movie.next]) {\n            var This = this;\n            this.next = function() {\n                This.playMovie({\n                    movie: this.animations[movie.next],\n                    infinity: true\n                });\n            };\n        }\n        return arr;\n    }\n};\nMovieClip.prototype.pause = function() {\n    this.paused = true;\n};\nMovieClip.prototype.start = function() {\n    this.paused = false;\n};\nMovieClip.prototype.cancle = function() {\n    this.living = false;\n};\nObject.defineProperty(MovieClip.prototype, 'interval', {\n    get: function() {\n        return this.fps > 0 ? 1000 / this.fps >> 0 : 16;\n    }\n});\n\n\n/**\n * Transition类型动画对象\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画所具备的特性\n * @param [opts] {object} 动画配置信息\n */\n\nfunction PathMotion(opts) {\n    JC.Animate.call(this, opts);\n\n    this.points = opts.points;\n    this.attachNormal = opts.attachNormal || false;\n    this.sDeg = false;\n    this.tDeg = 0;\n    this.pDeg = 0;\n}\nJC.PathMotion = PathMotion;\nPathMotion.prototype = Object.create(JC.Animate.prototype);\nPathMotion.prototype.constructor = JC.PathMotion;\nPathMotion.prototype.update = function(snippet) {\n    if (this.paused || !this.living) return;\n    this.progress += this.timeScale * snippet;\n\n    if (this.progress < this.duration) {\n        if (this.progress < 0) return;\n        var pose = this.nextPose();\n        this.onUpdate && this.onUpdate(pose, this.progress / this.duration);\n    } else {\n        this.element.setVal(this.ATRE);\n        this.onUpdate && this.onUpdate(this.ATRE, 1);\n        if (this.repeats > 0 || this.infinity) {\n            this.repeats > 0 && --this.repeats;\n            this.progress = 0;\n            if (this.alternate) {\n                var sc = JC.copyJSON(this.ATRS);\n                this.ATRS = JC.copyJSON(this.ATRE);\n                this.ATRE = sc;\n            } else {\n                this.element.setVal(this.ATRS);\n            }\n        } else {\n            this.living = false;\n            this.onCompelete && this.onCompelete();\n        }\n    }\n};\nPathMotion.prototype.nextPose = function() {\n    var cache = {};\n    // for(var i in this.ATRE){\n    //     cache[i] = JC.TWEEN[this.ease]( this.progress , this.ATRS[i] , this.ATRE[i] - this.ATRS[i] , this.duration );\n    //     if(this.element[i]!==undefined)this.element[i] = cache[i];\n    // }\n    var t = JC.TWEEN[this.ease](this.progress, 0, 1, this.duration);\n    var pos = this.getPoint(t, this.points);\n    cache.x = pos.x;\n    cache.y = pos.y;\n    // cache.y = pos.y;\n    if (this.attachNormal) {\n        cache.rotate = this.decomposeRotate(t);\n    }\n    return cache; //this.onUpdate\n};\nPathMotion.prototype.getPoint = function(t, points) {\n    var a = points,\n        len = a.length,\n        rT = 1 - t,\n        l = a.slice(0, len - 1),\n        r = a.slice(1),\n        oP = {};\n    if (len > 3) {\n        var oL = this.getPoint(t, l),\n            oR = this.getPoint(t, r);\n        oP.x = rT * oL.x + t * oR.x;\n        oP.y = rT * oL.y + t * oR.y;\n        // oP.z = rT * oL.z + t * oR.z;\n        return oP;\n    } else {\n        oP.x = rT * rT * points[0].x + 2 * t * rT * points[1].x + t * t * points[2].x;\n        oP.y = rT * rT * points[0].y + 2 * t * rT * points[1].y + t * t * points[2].y;\n        // oP.z = rT * rT * points[0].z + 2 * t * rT * points[1].z + t * t * points[2].z;\n        return oP;\n    }\n};\nPathMotion.prototype.decomposeRotate = function(t) {\n    var p1 = this.getPoint(t, this.points);\n    var p2 = this.getPoint(t + 0.01, this.points);\n    var deg = p1.xxxxx + p2.x;\n};\n\n/**\n * Animator类型动画对象\n *\n * @class\n * @memberof JC\n */\nfunction Animator() {\n    this.start = false;\n    this.animates = [];\n}\nJC.Animator = Animator;\nAnimator.prototype.update = function(snippet) {\n    for (var i = 0; i < this.animates.length; i++) {\n        if (!this.animates[i].living) this.animates.splice(i, 1);\n        this.animates[i] && this.animates[i].update(snippet);\n    }\n};\nAnimator.prototype.fromTo = function(opts) {\n    var animate = new JC.Transition(opts);\n    this.animates.push(animate);\n    return animate;\n};\nAnimator.prototype.keyFrames = function(opts) {\n    var animate = new JC.Animation(opts);\n    this.animates.push(animate);\n    return animate;\n};\n","/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n * @param [x=0] {number} position of the point on the x axis\n * @param [y=0] {number} position of the point on the y axis\n */\nfunction Point(x, y) {\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y || 0;\n}\n\nJC.Point = Point;\nPoint.prototype.constructor = JC.Point;\n\n/**\n * Creates a clone of this point\n *\n * @return {PIXI.Point} a copy of the point\n */\nPoint.prototype.clone = function() {\n    return new Point(this.x, this.y);\n};\n\n/**\n * Copies x and y from the given point\n *\n * @param p {PIXI.Point}\n */\nPoint.prototype.copy = function(p) {\n    this.set(p.x, p.y);\n};\n\n/**\n * Returns true if the given point is equal to this point\n *\n * @param p {PIXI.Point}\n * @returns {boolean}\n */\nPoint.prototype.equals = function(p) {\n    return (p.x === this.x) && (p.y === this.y);\n};\n\n/**\n * Sets the point to a new x and y position.\n * If y is omitted, both x and y will be set to x.\n *\n * @param [x=0] {number} position of the point on the x axis\n * @param [y=0] {number} position of the point on the y axis\n */\nPoint.prototype.set = function(x, y) {\n    this.x = x || 0;\n    this.y = y || ((y !== 0) ? this.x : 0);\n};\n","/**\n * 矩阵对象，用来描述和记录对象的tansform 状态信息\n *\n * @class\n * @memberof JC\n */\nfunction Matrix() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n}\nJC.Matrix = Matrix;\nMatrix.prototype.constructor = JC.Matrix;\n\n/**\n * 从数组设置一个矩阵\n *\n * @param array {number[]}\n */\nMatrix.prototype.fromArray = function(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n};\n\n/**\n * 将对象的数据以数组的形式导出\n *\n * @param transpose {boolean} 是否对矩阵进行转置\n * @return {number[]} 返回数组\n */\nMatrix.prototype.toArray = function(transpose) {\n    if (!this.array) this.array = new JC.Float32Array(9);\n    var array = this.array;\n\n    if (transpose) {\n        array[0] = this.a;\n        array[1] = this.b;\n        array[2] = 0;\n        array[3] = this.c;\n        array[4] = this.d;\n        array[5] = 0;\n        array[6] = this.tx;\n        array[7] = this.ty;\n        array[8] = 1;\n    } else {\n        array[0] = this.a;\n        array[1] = this.c;\n        array[2] = this.tx;\n        array[3] = this.b;\n        array[4] = this.d;\n        array[5] = this.ty;\n        array[6] = 0;\n        array[7] = 0;\n        array[8] = 1;\n    }\n    return array;\n};\n\n/**\n * 将坐标点与矩阵左乘\n *\n * @param pos {object} 原始点\n * @param newPos {object} 变换之后的点\n * @return {object} 返回数组\n */\nMatrix.prototype.apply = function(pos, newPos) {\n    newPos = newPos || {};\n    newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n    newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n    return newPos;\n};\n/**\n * 将坐标点与转置矩阵左乘\n *\n * @param pos {object} 原始点\n * @param newPos {object} 变换之后的点\n * @return {object} 变换之后的点\n */\nMatrix.prototype.applyInverse = function(pos, newPos) {\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n    newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n};\n/**\n * 位移操作\n *\n * @return {this} \n */\nMatrix.prototype.translate = function(x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n};\n/**\n * 缩放操作\n *\n * @return {this} \n */\nMatrix.prototype.scale = function(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n};\n/**\n * 旋转操作\n *\n * @return {this} \n */\nMatrix.prototype.rotate = function(angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n};\n/**\n * 矩阵相乘\n *\n * @return {this} \n */\nMatrix.prototype.append = function(matrix) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n};\n/**\n * 单位矩阵\n *\n * @return {this} \n */\nMatrix.prototype.identity = function() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n};\n/**\n * 快速设置矩阵各个分量\n *\n * @return {this} \n */\nMatrix.prototype.setTransform = function(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    var a, b, c, d, sr, cr, cy, sy, nsx, cx;\n\n    sr = Math.sin(rotation);\n    cr = Math.cos(rotation);\n    cy = Math.cos(skewY);\n    sy = Math.sin(skewY);\n    nsx = -Math.sin(skewX);\n    cx = Math.cos(skewX);\n\n    a = cr * scaleX;\n    b = sr * scaleX;\n    c = -sr * scaleY;\n    d = cr * scaleY;\n\n    this.a = cy * a + sy * c;\n    this.b = cy * b + sy * d;\n    this.c = nsx * a + cx * c;\n    this.d = nsx * b + cx * d;\n\n    this.tx = x + (pivotX * a + pivotY * c);\n    this.ty = y + (pivotX * b + pivotY * d);\n\n    return this;\n};\nJC.IDENTITY = new Matrix();\nJC.TEMP_MATRIX = new Matrix();\n","function BaseTexture(source, scaleMode) {\n    JC.Eventer.call(this);\n\n    this.width = 100;\n\n    this.height = 100;\n\n    this.realWidth = 100;\n\n    this.realHeight = 100;\n\n    this.scaleMode = scaleMode || JC.CONST.SCALE_MODES.DEFAULT;\n\n    this.hasLoaded = false;\n\n    this.isLoading = false;\n\n    this.source = null; // set in loadSource, if at all\n\n    this.resolution = 1;\n\n    this.premultipliedAlpha = true;\n\n    this.imageUrl = null;\n\n    this.isPowerOfTwo = false;\n\n    this.mipmap = false;\n\n    // this._glTextures = {};\n\n    // if no source passed don't try to load\n    if (source) {\n        this.loadSource(source);\n    }\n\n}\n\nBaseTexture.prototype = Object.create(JC.Eventer.prototype);\nBaseTexture.prototype.constructor = BaseTexture;\n\nBaseTexture.prototype.update = function() {\n    this.realWidth = this.source.naturalWidth || this.source.width;\n    this.realHeight = this.source.naturalHeight || this.source.height;\n\n    this.width = this.realWidth / this.resolution;\n    this.height = this.realHeight / this.resolution;\n\n    this.isPowerOfTwo = utils.isPowerOfTwo(this.realWidth, this.realHeight);\n\n    this.emit({ type: 'update' });\n};\n\nBaseTexture.prototype.loadSource = function(source) {\n    var wasLoading = this.isLoading;\n    this.hasLoaded = false;\n    this.isLoading = false;\n\n    this.source = source;\n\n    if ((this.source.complete || this.source.getContext) && this.source.width && this.source.height) {\n        this._sourceLoaded();\n    } else if (!source.getContext) {\n        this.isLoading = true;\n\n        var This = this;\n\n        source.onload = function() {\n            source.onload = null;\n            source.onerror = null;\n\n            This.isLoading = false;\n            This._sourceLoaded();\n            This.emit({ type: 'loaded' });\n        };\n\n        source.onerror = function() {\n            source.onload = null;\n            source.onerror = null;\n\n            This.isLoading = false;\n            This.emit({ type: 'error' });\n        };\n\n        if (source.complete && source.src) {\n            this.isLoading = false;\n\n            source.onload = null;\n            source.onerror = null;\n\n            if (source.width && source.height) {\n                this._sourceLoaded();\n\n                // If any previous subscribers possible\n                if (wasLoading) {\n                    this.emit({ type: 'loaded' });\n                }\n            } else {\n                // If any previous subscribers possible\n                if (wasLoading) {\n                    this.emit({ type: 'error' });\n                }\n            }\n        }\n    }\n};\n\nBaseTexture.prototype._sourceLoaded = function() {\n    this.hasLoaded = true;\n    this.update();\n};\nBaseTexture.fromImage = function(imageUrl, crossorigin, scaleMode) {\n    var baseTexture = JC.UTILS.BaseTextureCache[imageUrl];\n\n    if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0) {\n        crossorigin = true;\n    }\n\n    if (!baseTexture) {\n        var image = new Image();\n        if (crossorigin) {\n            image.crossOrigin = '';\n        }\n\n        baseTexture = new BaseTexture(image, scaleMode);\n        baseTexture.imageUrl = imageUrl;\n\n        image.src = imageUrl;\n\n        JC.UTILS.BaseTextureCache[imageUrl] = baseTexture;\n\n    }\n\n    return baseTexture;\n};\n","function Texture(baseTexture, frame) {\n    JC.Eventer.call(this);\n\n    this.noFrame = false;\n\n    if (!frame) {\n        this.noFrame = true;\n        frame = new math.Rectangle(0, 0, 1, 1);\n    }\n\n    if (baseTexture instanceof Texture) {\n        baseTexture = baseTexture.baseTexture;\n    }\n\n    this.baseTexture = baseTexture;\n\n    this._frame = frame;\n\n    this.valid = false;\n\n    this.requiresUpdate = false;\n\n    this._uvs = null;\n\n    this.width = 0;\n\n    this.height = 0;\n\n    if (baseTexture.hasLoaded) {\n        if (this.noFrame) {\n            frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n\n            // if there is no frame we should monitor for any base texture changes..\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n        this.frame = frame;\n    } else {\n        baseTexture.once('loaded', this.onBaseTextureLoaded, this);\n    }\n\n}\n\nTexture.prototype = Object.create(JC.Eventer.prototype);\nTexture.prototype.constructor = Texture;\n\nObject.defineProperties(Texture.prototype, {\n    frame: {\n        get: function() {\n            return this._frame;\n        },\n        set: function(frame) {\n            this._frame = frame;\n\n            this.noFrame = false;\n\n            this.width = frame.width;\n            this.height = frame.height;\n\n            this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;\n\n            if (this.valid) {\n                this._updateUvs();\n            }\n        }\n    }\n});\n\nTexture.prototype.update = function() {\n    this.baseTexture.update();\n};\n\nTexture.prototype.onBaseTextureLoaded = function(baseTexture) {\n    // TODO this code looks confusing.. boo to abusing getters and setterss!\n    if (this.noFrame) {\n        this.frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n    } else {\n        this.frame = this._frame;\n    }\n\n    this.emit('update', this);\n};\n\nTexture.prototype.onBaseTextureUpdated = function(baseTexture) {\n    this._frame.width = baseTexture.width;\n    this._frame.height = baseTexture.height;\n\n    this.emit('update', this);\n};\n\nTexture.prototype._updateUvs = function() {\n    if (!this._uvs) {\n        this._uvs = new TextureUvs();\n    }\n    this._uvs.set(this.frame, this.baseTexture);\n};\n\nTexture.fromImage = function(imageUrl, crossorigin, scaleMode) {\n    var texture = JC.UTILS.TextureCache[imageUrl];\n\n    if (!texture) {\n        texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin, scaleMode));\n        JC.UTILS.TextureCache[imageUrl] = texture;\n    }\n\n    return texture;\n};\n\nTexture.fromCanvas = function(canvas, scaleMode) {\n    return new Texture(BaseTexture.fromCanvas(canvas, scaleMode));\n};\n","function TextureUvs() {\n    this.x0 = 0;\n    this.y0 = 0;\n\n    this.x1 = 1;\n    this.y1 = 0;\n\n    this.x2 = 1;\n    this.y2 = 1;\n\n    this.x3 = 0;\n    this.y3 = 1;\n}\n\nTextureUvs.prototype.set = function(frame, baseFrame) {\n    var tw = baseFrame.width;\n    var th = baseFrame.height;\n\n    this.x0 = frame.x / tw;\n    this.y0 = frame.y / th;\n\n    this.x1 = (frame.x + frame.width) / tw;\n    this.y1 = frame.y / th;\n\n    this.x2 = (frame.x + frame.width) / tw;\n    this.y2 = (frame.y + frame.height) / th;\n\n    this.x3 = frame.x / tw;\n    this.y3 = (frame.y + frame.height) / th;\n};\nTextureUvs.prototype.get = function() {\n    return new Float32Array([\n        this.x0, this.y0, this.x1, this.y1,\n        this.x2, this.y2, this.x3, this.y3\n    ]);\n};\n","/**\n * 显示对象的基类\n *\n * @class\n * @memberof JC\n */\nfunction DisplayObject() {\n    this._ready = true;\n\n    this.visible = true;\n    this.worldAlpha = 1;\n    this.alpha = 1;\n\n    this.scaleX = 1;\n    this.scaleY = 1;\n\n    this.skewX = 0;\n    this.skewY = 0;\n\n    this.rotation = 0;\n    this.rotationCache = 0;\n    this._sr = 0;\n    this._cr = 1;\n\n    this.x = 0;\n    this.y = 0;\n\n    this.pivotX = 0;\n    this.pivotY = 0;\n\n    this.mask = null;\n\n    this.parent = null;\n    this.worldTransform = new JC.Matrix();\n\n    this.event = new JC.Eventer();\n    this.passEvent = false;\n    this.bounds = [];\n\n    this.Animator = new JC.Animator();\n}\nJC.DisplayObject = DisplayObject;\nDisplayObject.prototype.constructor = JC.DisplayObject;\n\nObject.defineProperty(DisplayObject.prototype, 'scale', {\n    get: function() {\n        return this.scaleX;\n    },\n    set: function(scale) {\n        this.scaleX = this.scaleY = scale;\n    }\n});\n\n/**\n * fromTo动画，指定动画的启始位置和结束位置\n *\n * ```js\n * // 扩展缓动函数，缓动函数库详见目录下的util/tween.js\n * JC.TWEEN.extend({    \n *    bounceOut: function(t, b, c, d){\n *        if ((t/=d) < (1/2.75)) {\n *            return c*(7.5625*t*t) + b;\n *        } else if (t < (2/2.75)) {\n *            return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;\n *        } else if (t < (2.5/2.75)) {\n *            return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;\n *        }\n *        return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;\n *    }\n * });\n * var dispayObj = new JC.Text('Hello JC','bold 36px Arial','#c32361');\n * dispayObj.fromTo({\n *   from: {x: 100},\n *   to: {x: 200},\n *   ease: 'bounceOut', // 执行动画使用的缓动函数 默认值为 easeBoth\n *   repeats: 10, // 动画运动完后再重复10次\n *   infinity: true, // 无限循环动画\n *   alternate: true, // 偶数次的时候动画回放\n *   duration: 1000, // 动画时长 ms单位 默认 300ms\n *   onUpdate: function(state,rate){},\n *   onCompelete: function(){ console.log('end'); } // 动画执行结束回调\n * });\n * ```\n *\n * @param opts {object} 配置\n * @param clear {boolean} 是否去掉之前的动画\n */\nDisplayObject.prototype.fromTo = function(opts, clear) {\n    opts.element = this;\n    this.setVal(opts.from);\n    if (clear) this.Animator.animates.length = 0;\n    return this.Animator.fromTo(opts);\n};\n\n/**\n * to动画，物体当前位置为动画的启始位置，只需制定动画的结束位置\n *\n * @param opts {object} 配置\n * @param clear {boolean} 是否去掉之前的动画\n */\nDisplayObject.prototype.to = function(opts, clear) {\n    opts.element = this;\n    opts.from = {};\n    for (var i in opts.to) {\n        opts.from[i] = this[i];\n    }\n    if (clear) this.Animator.animates.length = 0;\n    return this.Animator.fromTo(opts);\n};\n\n/**\n * keyFrames动画，设置物体动画的keyframe，可以为相邻的两个keyFrames之前配置差值时间及时间函数\n *\n * @param opts {object} 配置\n * @param clear {boolean} 是否去掉之前的动画\n */\nDisplayObject.prototype.keyFrames = function(opts, clear) {\n    opts.element = this;\n    if (clear) this.Animator.animates.length = 0;\n    return this.Animator.keyFrames(opts);\n};\n\n/**\n * 检测是否可见\n *\n * @method isVisible\n * @private\n */\nDisplayObject.prototype.isVisible = function() {\n    return !!(this.visible && this.alpha > 0 && this.scaleX * this.scaleY > 0);\n};\n\nDisplayObject.prototype.setVal = function(vals) {\n    if (vals === undefined) return;\n    for (var key in vals) {\n        if (this[key] === undefined) {\n            continue;\n        } else {\n            this[key] = vals[key];\n        }\n    }\n};\nDisplayObject.prototype.updateMe = function() {\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n\n    var a, b, c, d, tx, ty;\n\n    if (this.skewX || this.skewY) {\n\n        JC.TEMP_MATRIX.setTransform(\n            this.x,\n            this.y,\n            this.pivotX,\n            this.pivotY,\n            this.scaleX,\n            this.scaleY,\n            this.rotation,\n            this.skewX,\n            this.skewY\n        );\n\n        wt.a = JC.TEMP_MATRIX.a * pt.a + JC.TEMP_MATRIX.b * pt.c;\n        wt.b = JC.TEMP_MATRIX.a * pt.b + JC.TEMP_MATRIX.b * pt.d;\n        wt.c = JC.TEMP_MATRIX.c * pt.a + JC.TEMP_MATRIX.d * pt.c;\n        wt.d = JC.TEMP_MATRIX.c * pt.b + JC.TEMP_MATRIX.d * pt.d;\n        wt.tx = JC.TEMP_MATRIX.tx * pt.a + JC.TEMP_MATRIX.ty * pt.c + pt.tx;\n        wt.ty = JC.TEMP_MATRIX.tx * pt.b + JC.TEMP_MATRIX.ty * pt.d + pt.ty;\n    } else {\n        if (this.rotation % 360) {\n            if (this.rotation !== this.rotationCache) {\n                this.rotationCache = this.rotation;\n                this._sr = Math.sin(this.rotation * JC.DTR);\n                this._cr = Math.cos(this.rotation * JC.DTR);\n            }\n\n            a = this._cr * this.scaleX;\n            b = this._sr * this.scaleX;\n            c = -this._sr * this.scaleY;\n            d = this._cr * this.scaleY;\n            tx = this.x;\n            ty = this.y;\n\n            if (this.pivotX || this.pivotY) {\n                tx -= this.pivotX * a + this.pivotY * c;\n                ty -= this.pivotX * b + this.pivotY * d;\n            }\n            wt.a = a * pt.a + b * pt.c;\n            wt.b = a * pt.b + b * pt.d;\n            wt.c = c * pt.a + d * pt.c;\n            wt.d = c * pt.b + d * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n        } else {\n            a = this.scaleX;\n            d = this.scaleY;\n\n            tx = this.x - this.pivotX * a;\n            ty = this.y - this.pivotY * d;\n\n            wt.a = a * pt.a;\n            wt.b = a * pt.b;\n            wt.c = d * pt.c;\n            wt.d = d * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n        }\n    }\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n};\n\nDisplayObject.prototype.upAnimation = function(snippet) {\n    this.Animator.update(snippet);\n};\n// DisplayObject.prototype.setTransform = function(ctx){\n//     var matrix = this.worldTransform;\n//     ctx.globalAlpha = this.worldAlpha;\n//     ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);\n// };\n/**\n * 获取物体相对于canvas世界坐标系的坐标位置\n *\n * @return {object}\n */\nDisplayObject.prototype.getGlobalPos = function() {\n    return { x: this.worldTransform.tx, y: this.worldTransform.ty };\n};\n/**\n * 显示对象的事件绑定函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 回调函数\n */\nDisplayObject.prototype.on = function(type, fn) {\n    this.event.on(type, fn);\n};\n/**\n * 显示对象的事件解绑函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 注册时回调函数的引用\n */\nDisplayObject.prototype.off = function(type, fn) {\n    this.event.off(type, fn);\n};\n/**\n * 显示对象的一次性事件绑定函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 回调函数\n */\nDisplayObject.prototype.once = function(type, fn) {\n    var This = this,\n        cb = function(ev) {\n            fn && fn(ev);\n            This.event.off(type, cb);\n        };\n    this.event.on(type, cb);\n};\n/**\n * 获取当前坐标系下的监测区域\n *\n * @method getBounds\n * @private\n */\nDisplayObject.prototype.getBounds = function() {\n    var bounds = [],\n        l = this.bounds.length >> 1;\n\n    for (var i = 0; i < l; i++) {\n        var p = this.worldTransform.apply({ x: this.bounds[i * 2], y: this.bounds[i * 2 + 1] });\n        bounds[i * 2] = p.x;\n        bounds[i * 2 + 1] = p.y;\n    }\n    return bounds;\n};\n/**\n * 设置显示对象的监测区域\n *\n * @param points {Array} 区域的坐标点 [x0,y0 ..... xn,yn]\n * @param needless {boolean} 当该值为true，当且仅当this.bounds为空时才会更新点击区域。默认为false，总是更新点击区域。\n * @return {Array}\n */\nDisplayObject.prototype.setBounds = function(points, needless) {\n};\nDisplayObject.prototype.ContainsPoint = function(p, px, py) {\n    var n = p.length >> 1;\n    var ax, ay = p[2 * n - 3] - py,\n        bx = p[2 * n - 2] - px,\n        by = p[2 * n - 1] - py;\n\n    //var lup = by > ay;\n    for (var i = 0; i < n; i++) {\n        ax = bx;\n        ay = by;\n        bx = p[2 * i] - px;\n        by = p[2 * i + 1] - py;\n        if (ay == by) continue;\n        lup = by > ay;\n    }\n\n    var depth = 0;\n    for (i = 0; i < n; i++) {\n        ax = bx;\n        ay = by;\n        bx = p[2 * i] - px;\n        by = p[2 * i + 1] - py;\n        if (ay < 0 && by < 0) continue;\n        if (ay > 0 && by > 0) continue;\n        if (ax < 0 && bx < 0) continue;\n\n        if (ay == by && Math.min(ax, bx) <= 0) return true;\n        if (ay == by) continue;\n\n        var lx = ax + (bx - ax) * (-ay) / (by - ay);\n        if (lx === 0) return true;\n        if (lx > 0) depth++;\n        if (ay === 0 && lup && by > ay) depth--;\n        if (ay === 0 && !lup && by < ay) depth--;\n        lup = by > ay;\n    }\n    return (depth & 1) == 1;\n};\n","/**\n * 显示对象容器，继承至DisplayObject\n *\n * ```js\n * var container = new JC.Container();\n * container.addChilds(sprite);\n * ```\n *\n * @class\n * @extends JC.DisplayObject\n * @memberof JC\n */\nfunction Container() {\n    JC.DisplayObject.call(this);\n    this.cds = [];\n    this.timeScale = 1;\n    this.paused = false;\n}\nJC.Container = Container;\nContainer.prototype = Object.create(JC.DisplayObject.prototype);\nContainer.prototype.constructor = JC.Container;\n\n/**\n * 向容器添加一个物体\n * \n * ```js\n * container.addChilds(sprite,sprite2,text3,graphice);\n * ```\n *\n * @param child {JC.Container}\n * @return {JC.Container}\n */\nContainer.prototype.addChilds = function(cd) {\n    if (cd === undefined) return cd;\n    var l = arguments.length;\n    if (l > 1) {\n        for (var i = 0; i < l; i++) { this.addChilds(arguments[i]); }\n        return arguments[l - 1];\n    }\n    if (cd.parent) { cd.parent.removeChilds(cd); }\n    cd.parent = this;\n    this.cds.push(cd);\n    return cd;\n};\n/**\n * 从容器移除一个物体\n * \n * ```js\n * container.removeChilds(sprite,sprite2,text3,graphice);\n * ```\n *\n * @param child {JC.Container}\n * @return {JC.Container}\n */\nContainer.prototype.removeChilds = function() {\n    var l = arguments.length;\n    if (l > 1) {\n        for (var i = 0; i < l; i++) { this.removeChilds(arguments[i]); }\n    } else if (l === 1) {\n        for (var a = 0; a < this.cds.length; a++) {\n            if (this.cds[a] === arguments[0]) {\n                this.cds.splice(a, 1);\n                this.cds[a].parent = null;\n                a--;\n            }\n        }\n    }\n};\nContainer.prototype.updateTransform = function(snippet) {\n    if (!this._ready) return;\n    snippet = this.timeScale * snippet;\n    !this.paused && this.upAnimation(snippet);\n    this.updateMe();\n    this.cds.length > 0 && this.updateChilds(snippet);\n};\nContainer.prototype.updateChilds = function(snippet) {\n    for (var i = 0, l = this.cds.length; i < l; i++) {\n        var cd = this.cds[i];\n        cd.updateTransform(snippet);\n    }\n};\nContainer.prototype.render = function(session) {\n    this.renderMe(session);\n    this.cds.length > 0 && this.renderChilds(session);\n};\nContainer.prototype.renderMe = function() {\n    return true;\n};\nContainer.prototype.renderChilds = function(session) {\n    for (var i = 0, l = this.cds.length; i < l; i++) {\n        var cd = this.cds[i];\n        if (!cd.isVisible() || !cd._ready) continue;\n        cd.render(session);\n    }\n};\nContainer.prototype.noticeEvent = function(ev) {\n    var i = this.cds.length - 1;\n    while (i >= 0) {\n        var child = this.cds[i];\n        if (child.visible) {\n            child.noticeEvent(ev);\n            if (ev.target) break;\n        }\n        i--;\n    }\n    this.upEvent(ev);\n};\nContainer.prototype.upEvent = function(ev) {\n    if (!this._ready) return;\n    if (ev.target || (!this.passEvent && this.hitTest(ev))) {\n        if (!ev.cancleBubble || ev.target === this) {\n            if (!(this.event.listeners[ev.type] && this.event.listeners[ev.type].length > 0)) return;\n            this.event.emit(ev);\n        }\n    }\n};\nContainer.prototype.hitTest = function(ev) {\n    if (ev.type === 'touchmove' || ev.type === 'touchend' || ev.type === 'mousemove' || ev.type === 'mouseup') {\n        var re = this.event.touchstarted;\n        if (re) ev.target = this;\n        if (ev.type === 'touchend' || ev.type === 'mouseup') this.event.touchstarted = false;\n        return re;\n    }\n    if (this.hitTestMe(ev)) {\n        ev.target = this;\n        if (ev.type === 'touchstart' || ev.type === 'mousedown') this.event.touchstarted = true;\n        return true;\n    }\n    return false;\n};\nContainer.prototype.hitTestMe = function(ev) {\n    return this.ContainsPoint(this.getBound(), ev.global.x, ev.global.y);\n};\nContainer.prototype.pause = function() {\n    this.paused = true;\n};\nContainer.prototype.start = function() {\n    this.paused = false;\n};\nContainer.prototype.cancle = function() {\n    this.Animator.animates.length = 0;\n};\n","function Sprite(texture) {\n    JC.Container.call(this);\n\n    this.regX = 0;\n\n    this.regY = 0;\n\n    this._texture = null;\n\n    this.tint = 0xFFFFFF;\n\n    this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n\n    this.shaderType = 'sprite';\n\n    this.cachedTint = 0xFFFFFF;\n\n    this.cachedAlpha = this.alpha;\n\n    this.texture = texture;\n\n    this.vertices = null;\n\n    this.indices = new Uint16Array([0,1,2,0,2,3]);\n\n    this.colors = null;\n\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n\n    this.indexBuffer = null;\n\n}\n\nJC.Sprite = Sprite;\nSprite.prototype = Object.create(JC.Container.prototype);\nSprite.prototype.constructor = JC.Sprite;\n\nObject.defineProperties(Sprite.prototype, {\n    texture: {\n        get: function() {\n            return this._texture;\n        },\n        set: function(value) {\n            if (this._texture === value) {\n                return;\n            }\n\n            this._texture = value;\n            this.cachedTint = 0xFFFFFF;\n\n            if (value) {\n                // wait for the texture to load\n                if (value.baseTexture.hasLoaded) {\n                    this.upTexture();\n                } else {\n                    var This = this;\n                    value.on('load', function() {\n                        This.upTexture(opts);\n                        This._ready = true;\n                    });\n                }\n            }\n        }\n    },\n    aColor: {\n        get: function() {\n            if (this.tint === this.cachedTint && this.cachedAlpha === this.alpha && this.colors) return this.colors;\n            this.cachedTint = this.tint;\n            this.cachedAlpha = this.alpha;\n            this.colors = new Float32Array(JC.UTILS.hex2rgb(this.tint).push(this.alpha));\n            return this.colors;\n        }\n    }\n});\n\nSprite.prototype.upTexture = function() {\n    this.width = this.texture.width;\n    this.height = this.texture.height;\n    this.regX = this.width >> 1;\n    this.regY = this.height >> 1;\n\n    this.vertices = new Float32Array([-this.regX, this.regY, this.width - this.regX, this.regY, this.width - this.regX, this.regY - this.height, -this.regX, this.regY - this.height]);\n    this.setBounds(null, true);\n};\n\nSprite.prototype.setBounds = function(points, needless) {\n    var l = this.bounds.length;\n    if (l > 4 && needless) return;\n    points = points || this.vertices;\n    this.bounds = points;\n};\n\nSprite.prototype.render = function(session) {\n    session.blendModeManager.setBlendMode(this.blendMode);\n    session.shaderManager.setShader(this.shaderType);\n    var shader = session.shaderManager.currentShader;\n    shader.uniforms.projectionMatrix.value = this.worldTransform.toArray(true);\n    shader.uniforms.projectionVector.value = session.projection;\n    shader.uniforms.uSampler.value = this.texture;\n    var gl = session.gl;\n\n    this.initBuffers(gl,shader);\n    this.uploadDynamic(gl,shader);\n    this.bindBuffers(gl,shader);\n\n    gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n\n};\nSprite.prototype.initBuffers = function(gl, shader) {\n    var i;\n    var property;\n\n    var dynamicOffset = 0;\n    this.dynamicStride = 0;\n\n    for (i in shader.attributes) {\n        property = shader.attributes[i];\n\n        property.offset = dynamicOffset;\n        dynamicOffset += property.size;\n        this.dynamicStride += property.size;\n    }\n\n    this.dynamicData = new Float32Array(this.dynamicStride * 4);\n    this.dynamicBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.dynamicData, gl.DYNAMIC_DRAW);\n\n\n\n    this.indexBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n};\n\nSprite.prototype.bindBuffers = function(gl,shader) {\n    var i,property;\n        \n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n\n    for (i in shader.attributes) {\n        property = shader.attributes[i];\n        gl.enableVertexAttribArray(property.attribute._location);\n        gl.vertexAttribPointer(property.attribute._location, property.size, gl.FLOAT, false, this.dynamicStride * 4, property.offset * 4);\n    }\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n};\nSprite.prototype.uploadDynamic = function() {\n\n    var uvs = this.texture._uvs.get();\n    for(var i = 0;i<4;i++){\n        this.dynamicData[i*this.dynamicStride] = this.vertices[i*2];\n        this.dynamicData[i*this.dynamicStride+1] = this.vertices[i*2+1];\n\n        this.dynamicData[i*this.dynamicStride+2] = this.uvs[i*2];\n        this.dynamicData[i*this.dynamicStride+3] = this.uvs[i*2+1];\n\n\n        this.dynamicData[i*this.dynamicStride+4] = this.aColor[0];\n        this.dynamicData[i*this.dynamicStride+5] = this.aColor[1];\n        this.dynamicData[i*this.dynamicStride+6] = this.aColor[2];\n        this.dynamicData[i*this.dynamicStride+7] = this.aColor[3];\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.dynamicData);\n\n};\n\nSprite.prototype.getBounds = function() {\n\n};\n\n\nSprite.prototype.containsPoint = function(point) {\n    return true;\n};\n","function ParticleContainer(maxSize, properties, batchSize) {\n    JC.Container.call(this);\n\n    batchSize = batchSize || 15000; //CONST.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n    maxSize = maxSize || 15000;\n\n    // Making sure the batch size is valid\n    // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n    var maxBatchSize = 16384;\n    if (batchSize > maxBatchSize) {\n        batchSize = maxBatchSize;\n    }\n\n    if (batchSize > maxSize) {\n        batchSize = maxSize;\n    }\n\n    /**\n     * Set properties to be dynamic (true) / static (false)\n     *\n     * @member {boolean[]}\n     * @private\n     */\n    this._properties = [false, true, false, false, false];\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._maxSize = maxSize;\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._batchSize = batchSize;\n\n    /**\n     * @member {WebGLBuffer}\n     * @private\n     */\n    this._buffers = null;\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._bufferToUpdate = 0;\n\n    /**\n     * @member {boolean}\n     *\n     */\n    this.interactiveChildren = false;\n\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n\n    this.setProperties(properties);\n}\n\nJC.ParticleContainer = ParticleContainer;\nParticleContainer.prototype = Object.create(JC.Container.prototype);\nParticleContainer.prototype.constructor = JC.ParticleContainer;\n\n/**\n * Sets the private properties array to dynamic / static based on the passed properties object\n *\n * @param properties {object} The properties to be uploaded\n */\nParticleContainer.prototype.setProperties = function(properties) {\n    if (properties) {\n        this._properties[0] = 'scale' in properties ? !!properties.scale : this._properties[0];\n        this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n        this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n        this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n        this._properties[4] = 'alpha' in properties ? !!properties.alpha : this._properties[4];\n    }\n};\n\nParticleContainer.prototype.updateTransform = function() {\n\n    this.displayObjectUpdateTransform();\n};\n\nParticleContainer.prototype.render = function(session) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n        return;\n    }\n\n    renderer.setObjectRenderer(renderer.plugins.particle);\n    renderer.plugins.particle.render(this);\n};\n","function Renderer(view, options) {\n    options = options || {};\n\n    if (options) {\n        for (var i in JC.CONST.DEFAULT_RENDER_OPTIONS) {\n            if (typeof options[i] === 'undefined') {\n                options[i] = JC.CONST.DEFAULT_RENDER_OPTIONS[i];\n            }\n        }\n    } else {\n        options = JC.CONST.DEFAULT_RENDER_OPTIONS;\n    }\n\n    this.view = typeof view !== 'string' ? view : document.getElementById(view);\n\n    this.width = this.view.width;\n    this.height = this.view.height;\n\n    this.projection = new Float32Array([this.width >> 1, this.width >> 1]);\n\n    this.resolution = options.resolution;\n\n    this.transparent = options.transparent;\n\n    this.autoResize = options.autoResize || false;\n\n    this.blendModes = null;\n\n    this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n    this.autoClear = options.autoClear;\n\n    this._backgroundColor = 0x000000;\n\n    this._backgroundColorRgb = [0, 0, 0];\n\n    this._backgroundColorString = '#000000';\n\n    this.backgroundColor = options.backgroundColor || this._backgroundColor;\n\n\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n\n    this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n    this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n\n    this._contextOptions = {\n        alpha: this.transparent,\n        antialias: options.antialias,\n        premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer\n    };\n\n    // this.drawCount = 0;\n\n    this.shaderManager = new JC.ShaderManager(this);\n\n    this.blendModeManager = new JC.BlendModeManager(this);\n\n    this._createContext();\n    this._initContext();\n\n    this._mapGlModes();\n\n\n    this.renderSession = {};\n    this.renderSession.gl = this.gl;\n    this.renderSession.drawCount = 0;\n    this.renderSession.shaderManager = this.shaderManager;\n    this.renderSession.blendModeManager = this.blendModeManager;\n    this.renderSession.renderer = this;\n    this.renderSession.resolution = this.resolution;\n    this.renderSession.projection = this.projection;\n\n}\n\n// constructor\nJC.Renderer = Renderer;\nRenderer.prototype = Object.create(SystemRenderer.prototype);\nRenderer.prototype.constructor = Renderer;\n\nRenderer.prototype._createContext = function() {\n    var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n    this.gl = gl;\n\n    if (!gl) {\n        throw new Error('This browser does not support webGL. Try using the canvas renderer');\n    }\n\n    gl.renderer = this;\n};\n\nRenderer.prototype._initContext = function() {\n    var gl = this.gl;\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n    gl.enable(gl.BLEND);\n\n    this.emit('context', gl);\n\n    this.resize(this.width, this.height);\n\n};\n\nRenderer.prototype.render = function(object) {\n\n    this.emit('prerender');\n\n    if (this.gl.isContextLost()) {\n        return;\n    }\n\n    // this.drawCount = 0;\n\n    object.updateTransform();\n\n    var gl = this.gl;\n\n\n    if (this.clearBeforeRender) {\n        if (this.transparent) {\n            gl.clearColor(0, 0, 0, 0);\n        } else {\n            gl.clearColor(this._backgroundColorRgb[0], this._backgroundColorRgb[1], this._backgroundColorRgb[2], 1);\n        }\n\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    this.renderDisplayObject(object);\n\n    this.emit('postrender');\n};\n\nRenderer.prototype.renderDisplayObject = function(displayObject) {\n    displayObject.render(this.renderSession);\n};\n\nRenderer.prototype.handleContextLost = function(event) {\n    event.preventDefault();\n};\n\nRenderer.prototype.handleContextRestored = function() {\n    this._initContext();\n};\n\nRenderer.prototype._mapGlModes = function() {\n    var gl = this.gl;\n\n    if (!this.blendModes) {\n        this.blendModes = {};\n\n        this.blendModes[JC.CONST.BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[JC.CONST.BLEND_MODES.ADD] = [gl.ONE, gl.DST_ALPHA];\n        this.blendModes[JC.CONST.BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[JC.CONST.BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR];\n    }\n\n    if (!this.drawModes) {\n        this.drawModes = {};\n\n        this.drawModes[JC.CONST.DRAW_MODES.POINTS] = gl.POINTS;\n        this.drawModes[JC.CONST.DRAW_MODES.LINES] = gl.LINES;\n        this.drawModes[JC.CONST.DRAW_MODES.LINE_LOOP] = gl.LINE_LOOP;\n        this.drawModes[JC.CONST.DRAW_MODES.LINE_STRIP] = gl.LINE_STRIP;\n        this.drawModes[JC.CONST.DRAW_MODES.TRIANGLES] = gl.TRIANGLES;\n        this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;\n        this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_FAN] = gl.TRIANGLE_FAN;\n    }\n};\n\nObject.defineProperties(Renderer.prototype, {\n    backgroundColor: {\n        get: function() {\n            return this._backgroundColor;\n        },\n        set: function(val) {\n            this._backgroundColor = val;\n            this._backgroundColorString = utils.hex2string(val);\n            utils.hex2rgb(val, this._backgroundColorRgb);\n        }\n    }\n});\n\nRenderer.prototype.resize = function(width, height) {\n    this.width = width * this.resolution;\n    this.height = height * this.resolution;\n\n    this.view.width = this.width;\n    this.view.height = this.height;\n\n    this.projection = new Float32Array([this.width >> 1, this.width >> 1]);\n\n    if (this.autoResize) {\n        this.view.style.width = this.width / this.resolution + 'px';\n        this.view.style.height = this.height / this.resolution + 'px';\n    }\n};\n","function ShaderManager(renderer) {\n\n    this.renderer = renderer;\n\n    this.shaderType = '';\n\n    this.currentShader = null;\n\n    this.init();\n}\nJC.ShaderManager = ShaderManager;\nShaderManager.prototype.constructor = JC.ShaderManager;\n\nShaderManager.prototype.init = function() {\n\n    var gl = this.renderer.gl;\n\n    this.maxAttibs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n    this.shaderPool = {\n        particle: new ParticleShader(gl),\n        sprite: new SpriteShader(gl),\n        graphics: new GraphicsShader(gl),\n        text: new TextShader(gl)\n    };\n};\n\nShaderManager.prototype.setShader = function(shaderType) {\n    if (this.shaderType === shaderType) {\n        return false;\n    }\n\n    this.currentShader = this.shaderPool[shaderType];\n\n    this.renderer.gl.useProgram(this.currentShader.program);\n\n    this.shaderType = shaderType;\n\n    return true;\n};\n","function Shader(gl, vertexSrc, fragmentSrc, uniforms, attributes) {\n    if (!vertexSrc || !fragmentSrc) {\n        throw new Error('jcw2d.js Error. Shader requires vertexSrc and fragmentSrc');\n    }\n\n    this.type = '';\n\n    this.gl = gl;\n\n    this.program = null;\n\n    this.uniforms = uniforms || {};\n\n    this.attributes = attributes || {};\n\n    this.textureCount = 1;\n\n    this.MAX_TEXTURE_UNITS = gl.getParameter(MAX_TEXTURE_IMAGE_UNITS);\n\n    this.vertexSrc = vertexSrc;\n\n    this.fragmentSrc = fragmentSrc;\n\n    this.init();\n}\n\nShader.prototype.constructor = Shader;\n\nShader.prototype.init = function() {\n    this.compile();\n\n    this.gl.useProgram(this.program);\n\n    this.cacheUniformLocations(Object.keys(this.uniforms));\n    this.cacheAttributeLocations(Object.keys(this.attributes));\n};\n\nShader.prototype.cacheUniformLocations = function(keys) {\n    for (var i = 0; i < keys.length; ++i) {\n        this.uniforms[keys[i]]._location = this.gl.getUniformLocation(this.program, keys[i]);\n    }\n};\n\nShader.prototype.cacheAttributeLocations = function(keys) {\n    for (var i = 0; i < keys.length; ++i) {\n        this.attributes[keys[i]]._location = this.gl.getAttribLocation(this.program, keys[i]);\n    }\n};\n\nShader.prototype.compile = function() {\n    var gl = this.gl;\n\n    var glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexSrc);\n    var glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentSrc);\n\n    var program = gl.createProgram();\n\n    gl.attachShader(program, glVertShader);\n    gl.attachShader(program, glFragShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error('jcw2d.js Error: Could not initialize shader.');\n        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        console.error('gl.getError()', gl.getError());\n\n        if (gl.getProgramInfoLog(program) !== '') {\n            console.warn('jcw2d.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n\n        gl.deleteProgram(program);\n        program = null;\n    }\n\n    // clean up some shaders\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    return (this.program = program);\n};\n\nShader.prototype.syncUniform = function(uniform) {\n    var location = uniform._location,\n        value = uniform.value,\n        gl = this.gl,\n        i, il;\n\n    switch (uniform.type) {\n        case 'b':\n        case 'bool':\n        case 'boolean':\n            gl.uniform1i(location, value ? 1 : 0);\n            break;\n\n            // single int value\n        case 'i':\n        case '1i':\n            gl.uniform1i(location, value);\n            break;\n\n            // single float value\n        case 'f':\n        case '1f':\n            gl.uniform1f(location, value);\n            break;\n\n            // Float32Array(2) or JS Arrray\n        case '2f':\n            gl.uniform2f(location, value[0], value[1]);\n            break;\n\n            // Float32Array(3) or JS Arrray\n        case '3f':\n            gl.uniform3f(location, value[0], value[1], value[2]);\n            break;\n\n            // Float32Array(4) or JS Arrray\n        case '4f':\n            gl.uniform4f(location, value[0], value[1], value[2], value[3]);\n            break;\n\n            // a 2D Point object\n        case 'v2':\n            gl.uniform2f(location, value.x, value.y);\n            break;\n\n            // a 3D Point object\n        case 'v3':\n            gl.uniform3f(location, value.x, value.y, value.z);\n            break;\n\n            // a 4D Point object\n        case 'v4':\n            gl.uniform4f(location, value.x, value.y, value.z, value.w);\n            break;\n\n            // Int32Array or JS Array\n        case '1iv':\n            gl.uniform1iv(location, value);\n            break;\n\n            // Int32Array or JS Array\n        case '2iv':\n            gl.uniform2iv(location, value);\n            break;\n\n            // Int32Array or JS Array\n        case '3iv':\n            gl.uniform3iv(location, value);\n            break;\n\n            // Int32Array or JS Array\n        case '4iv':\n            gl.uniform4iv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '1fv':\n            gl.uniform1fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '2fv':\n            gl.uniform2fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '3fv':\n            gl.uniform3fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '4fv':\n            gl.uniform4fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case 'm2':\n        case 'mat2':\n        case 'Matrix2fv':\n            gl.uniformMatrix2fv(location, uniform.transpose||false, value);\n            break;\n\n            // Float32Array or JS Array\n        case 'm3':\n        case 'mat3':\n        case 'Matrix3fv':\n\n            gl.uniformMatrix3fv(location, uniform.transpose||false, value);\n            break;\n\n            // Float32Array or JS Array\n        case 'm4':\n        case 'mat4':\n        case 'Matrix4fv':\n            gl.uniformMatrix4fv(location, uniform.transpose||false, value);\n            break;\n\n            // a Color Value\n        case 'c':\n            if (typeof value === 'number') {\n                value = utils.hex2rgb(value);\n            }\n\n            gl.uniform3f(location, value[0], value[1], value[2]);\n            break;\n\n            // flat array of integers (JS or typed array)\n        case 'iv1':\n            gl.uniform1iv(location, value);\n            break;\n\n            // flat array of integers with 3 x N size (JS or typed array)\n        case 'iv':\n            gl.uniform3iv(location, value);\n            break;\n\n            // flat array of floats (JS or typed array)\n        case 'fv1':\n            gl.uniform1fv(location, value);\n            break;\n\n            // flat array of floats with 3 x N size (JS or typed array)\n        case 'fv':\n            gl.uniform3fv(location, value);\n            break;\n\n            // array of 2D Point objects\n        case 'v2v':\n            if (!uniform._array) {\n                uniform._array = new Float32Array(2 * value.length);\n            }\n\n            for (i = 0, il = value.length; i < il; ++i) {\n                uniform._array[i * 2] = value[i].x;\n                uniform._array[i * 2 + 1] = value[i].y;\n            }\n\n            gl.uniform2fv(location, uniform._array);\n            break;\n\n            // array of 3D Point objects\n        case 'v3v':\n            if (!uniform._array) {\n                uniform._array = new Float32Array(3 * value.length);\n            }\n\n            for (i = 0, il = value.length; i < il; ++i) {\n                uniform._array[i * 3] = value[i].x;\n                uniform._array[i * 3 + 1] = value[i].y;\n                uniform._array[i * 3 + 2] = value[i].z;\n\n            }\n\n            gl.uniform3fv(location, uniform._array);\n            break;\n\n            // array of 4D Point objects\n        case 'v4v':\n            if (!uniform._array) {\n                uniform._array = new Float32Array(4 * value.length);\n            }\n\n            for (i = 0, il = value.length; i < il; ++i) {\n                uniform._array[i * 4] = value[i].x;\n                uniform._array[i * 4 + 1] = value[i].y;\n                uniform._array[i * 4 + 2] = value[i].z;\n                uniform._array[i * 4 + 3] = value[i].w;\n\n            }\n\n            gl.uniform4fv(location, uniform._array);\n            break;\n\n            // PIXI.Texture\n        case 't':\n        case 'sampler2D':\n\n            if (!uniform.value || !uniform.value.baseTexture.hasLoaded) {\n                break;\n            }\n\n            // activate this texture\n            gl.activeTexture(gl['TEXTURE' + this.textureCount]);\n\n            var texture = uniform.value.baseTexture.texture;\n\n            if (!texture) {\n                this.initSampler2D(uniform);\n\n                // set the textur to the newly created one..\n                texture = uniform.value.baseTexture.texture;\n            }\n\n            // bind the texture\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n\n            // set uniform to texture index\n            gl.uniform1i(uniform._location, this.textureCount);\n\n            // increment next texture id\n            this.textureCount++;\n\n            break;\n\n        default:\n            console.warn('jcw2d.js Shader Warning: Unknown uniform type: ' + uniform.type);\n    }\n};\n\nShader.prototype.syncUniforms = function() {\n    this.textureCount = 1;\n\n    for (var key in this.uniforms) {\n        this.syncUniform(this.uniforms[key]);\n    }\n};\n\nShader.prototype.initSampler2D = function(uniform) {\n    var gl = this.gl;\n\n    var texture = uniform.value.baseTexture;\n\n    if (!texture.hasLoaded) {\n        return;\n    }\n\n    this.updateTexture(texture);\n};\n\nShader.prototype.updateTexture = function(texture) {\n    texture = texture.baseTexture || texture;\n\n    if (!texture.hasLoaded) {\n        return;\n    }\n\n    var gl = this.gl;\n\n    if (!texture.texture) {\n        texture.texture = gl.createTexture();\n        texture.on('update', this.updateTexture, this);\n    }\n\n\n    gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n\n\n    if (texture.mipmap && texture.isPowerOfTwo) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n        gl.generateMipmap(gl.TEXTURE_2D);\n    } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    }\n\n    if (!texture.isPowerOfTwo) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    }\n\n    return texture.texture;\n};\n\nShader.prototype._glCompile = function(type, src) {\n    var shader = this.gl.createShader(type);\n\n    this.gl.shaderSource(shader, src);\n    this.gl.compileShader(shader);\n\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n        console.log(this.gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n};\n","function SpriteShader(gl) {\n    var uniforms = {\n        uSampler: { type: 'sampler2D', value: 0 },\n        projectionMatrix: {\n            type: 'mat3',\n            value: new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1\n            ])\n        },\n        projectionVector: {\n            type: '2fv',\n            value: new Float32Array([1, 1])\n        }\n    };\n\n    var attributes = {\n        aVertexPosition: {\n            size: 2,\n        },\n        aTextureCoord: {\n            size: 2,\n        },\n        aColor: {\n            size: 4,\n        }\n    };\n\n    var vertexSrc = [\n        'precision lowp float;',\n        'attribute vec2 aVertexPosition;',\n        'attribute vec2 aTextureCoord;',\n        'attribute vec4 aColor;',\n\n        'uniform mat3 projectionMatrix;',\n        'uniform vec2 projectionVector;',\n\n        'varying vec2 vTextureCoord;',\n        'varying vec4 vColor;',\n\n        'void main(void){',\n        '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n        '   vTextureCoord = aTextureCoord;',\n        '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\n        '}'\n    ].join('\\n');\n\n    var fragmentSrc = [\n        'precision lowp float;',\n\n        'varying vec2 vTextureCoord;',\n        'varying vec4 vColor;',\n\n        'uniform sampler2D uSampler;',\n\n        'void main(void){',\n        '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;',\n        '}'\n    ].join('\\n');\n\n\n    Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n}\n\n// constructor\nSpriteShader.prototype = Object.create(Shader.prototype);\nSpriteShader.prototype.constructor = SpriteShader;\n","function ParticleShader(shaderManager) {\n    var uniforms = {\n        uAlpha: { type: '1f', value: 1 },\n        uSampler: { type: 'sampler2D', value: 0 },\n        projectionMatrix: {\n            type: 'mat3',\n            value: new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1\n            ])\n        },\n        projectionVector: {\n            type: '2fv',\n            value: new Float32Array([1, 1])\n        }\n    };\n\n    if (customUniforms) {\n        for (var u in customUniforms) {\n            uniforms[u] = customUniforms[u];\n        }\n    }\n\n\n    var attributes = {\n        aVertexPosition: 0,\n        aTextureCoord: 0,\n        aAlpha: 0,\n        aPositionCoord: 0,\n        aRotation: 0\n    };\n\n    if (customAttributes) {\n        for (var a in customAttributes) {\n            attributes[a] = customAttributes[a];\n        }\n    }\n\n    var vertexSrc = [\n        'precision lowp float;',\n\n        'attribute vec2 aVertexPosition;',\n        'attribute vec2 aTextureCoord;',\n        'attribute float aAlpha;',\n\n        'attribute vec2 aPositionCoord;',\n        'attribute float aRotation;',\n\n        'uniform mat3 projectionMatrix;',\n        'uniform vec2 projectionVector;',\n\n        'varying vec2 vTextureCoord;',\n        'varying float vAlpha;',\n\n        'void main(void){',\n        '   vec2 v = aVertexPosition;',\n\n        '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);',\n        '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);',\n        '   v = v + aPositionCoord;',\n\n        '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy / projectionVector, 0.0, 1.0);',\n\n        '   vTextureCoord = aTextureCoord;',\n        '   vAlpha = aAlpha;',\n        '}'\n    ].join('\\n');\n\n    var fragmentSrc = [\n        'precision lowp float;',\n\n        'varying vec2 vTextureCoord;',\n        'varying float vAlpha;',\n\n        'uniform sampler2D uSampler;',\n        'uniform float uAlpha;',\n\n        'void main(void){',\n        '  vec4 color = texture2D(uSampler, vTextureCoord) * vAlpha * uAlpha;',\n        '  if (color.a == 0.0) discard;',\n        '  gl_FragColor = color;',\n        '}'\n    ].join('\\n');\n\n\n    Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n\n}\n\nParticleShader.prototype = Object.create(TextureShader.prototype);\nParticleShader.prototype.constructor = ParticleShader;\n\nmodule.exports = ParticleShader;\n","function GraphicsShader(shaderManager) {\n    Shader.call(this,\n        shaderManager,\n        // vertex shader\n        [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec4 aColor;',\n\n            'uniform mat3 projectionMatrix;',\n            'uniform vec2 projectionVector;',\n\n            'uniform float alpha;',\n            'uniform vec3 tint;',\n\n            'varying vec4 vColor;',\n\n            'void main(void){',\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n            '   vColor = aColor * vec4(tint * alpha, alpha);',\n            '}'\n        ].join('\\n'),\n        // fragment shader\n        [\n            'precision mediump float;',\n\n            'varying vec4 vColor;',\n\n            'void main(void){',\n            '   gl_FragColor = vColor;',\n            '}'\n        ].join('\\n'),\n        // custom uniforms\n        {\n            tint: { type: '3f', value: [0, 0, 0] },\n            alpha: { type: '1f', value: 0 },\n            projectionMatrix: { type: 'mat3', value: new Float32Array(9) },\n            projectionVector: {\n                type: '2fv',\n                value: new Float32Array([1, 1])\n            }\n        },\n        // custom attributes\n        {\n            aVertexPosition: 0,\n            aColor: 0\n        }\n    );\n}\n\nGraphicsShader.prototype = Object.create(Shader.prototype);\nGraphicsShader.prototype.constructor = GraphicsShader;\n","(function() {\n    var lastTime = 0;\n    var androidUC = /(?=.*?uc)(?=.*?android)/i.test(window.navigator.userAgent);\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame || androidUC) {\n        window.requestAnimationFrame = function(callback) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 20 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n\n    window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n})();\n","\nJC.CONST = {\n    VERSION: '0.0.1',\n\n    PI_2: Math.PI * 2,\n\n    RTD: 180 / Math.PI,\n\n    DTR: Math.PI / 180,\n\n\n    /**\n     *\n     * @static\n     * @constant\n     * @property {object} BLEND_MODES\n     * @property {number} BLEND_MODES.NORMAL\n     * @property {number} BLEND_MODES.ADD\n     * @property {number} BLEND_MODES.MULTIPLY\n     * @property {number} BLEND_MODES.SCREEN\n     */\n    BLEND_MODES: {\n        NORMAL:         0,\n        ADD:            1,\n        MULTIPLY:       2,\n        SCREEN:         3\n    },\n\n    /**\n     *\n     * @static\n     * @constant\n     * @property {object} DRAW_MODES\n     * @property {number} DRAW_MODES.POINTS\n     * @property {number} DRAW_MODES.LINES\n     * @property {number} DRAW_MODES.LINE_LOOP\n     * @property {number} DRAW_MODES.LINE_STRIP\n     * @property {number} DRAW_MODES.TRIANGLES\n     * @property {number} DRAW_MODES.TRIANGLE_STRIP\n     * @property {number} DRAW_MODES.TRIANGLE_FAN\n     */\n    DRAW_MODES: {\n        POINTS:         0,\n        LINES:          1,\n        LINE_LOOP:      2,\n        LINE_STRIP:     3,\n        TRIANGLES:      4,\n        TRIANGLE_STRIP: 5,\n        TRIANGLE_FAN:   6\n    },\n\n    /**\n     *\n     * @static\n     * @constant\n     * @property {object} SCALE_MODES\n     * @property {number} SCALE_MODES.DEFAULT=LINEAR\n     * @property {number} SCALE_MODES.LINEAR Smooth scaling\n     * @property {number} SCALE_MODES.NEAREST Pixelating scaling\n     */\n    SCALE_MODES: {\n        DEFAULT:    0,\n        LINEAR:     0,\n        NEAREST:    1\n    },\n\n    DEFAULT_RENDER_OPTIONS: {\n        view: null,\n        resolution: 1,\n        antialias: false,\n        autoResize: false,\n        transparent: false,\n        backgroundColor: 0x000000,\n        clearBeforeRender: true,\n        preserveDrawingBuffer: false\n    },\n\n    SPRITE_BATCH_SIZE: 2000 //nice balance between mobile and desktop machines\n};","JC.TWEEN = {\n    easeBoth: function(t, b, c, d) { //加速减速曲线\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t + b;\n        }\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n    extend: function(opts) {\n        if (!opts) return;\n        for (var key in opts) {\n            if (key !== 'extend' && opts[key]) this[key] = opts[key];\n        }\n    }\n};\n"]}