{"version":3,"sources":["jcw2d.js","modules/RAF.js","modules/tween.js","modules/math.js","modules/texture.js","modules/jcw2d.js"],"names":["window","JC","lastTime","vendors","x","length","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","RAF","requestAnimFrame","TWEEN","easeBoth","t","b","c","d","extend","opts","key","this","clamp","a","randIn","low","high","random","Texture","img","width","height","isPowerOfTwo","TextureUvs","x0","y0","x1","y1","x2","y2","x3","y3","TextureCache","ImageLoader","sources","crossorigin","receiveNum","failNum","requestNum","imgs","loading","prototype","constructor","ears","source","onload","This","onLoaded","onFailed","onerror","Image","crossOrigin","src","getTexture","noop","Animate","MST","MAT","fx","complete","moving","infinity","alternate","repeats","root","VERSION","blendModes","NORMAL","ALPHA","ADD","MULTIPLY","SCREEN","scaleModes","DEFAULT","LINEAR","NEAREST","Float32Array","Uint16Array","Uint32Array","ArrayBuffer","Array","console","log","PI_2","PI","RTD","DTR","dontSpeek","defaultRenderOptions","view","transparent","antialias","preserveDrawingBuffer","resolution","clearBeforeRender","autoResize","sayHello","type","navigator","userAgent","toLowerCase","indexOf","args","apply","Point","y","clone","set","Matrix","tx","ty","fromArray","array","toArray","transpose","pos","newPos","applyInverse","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","identity","identityMatrix","moveTween","now","MATR","attr","time","MATRC","i","manager","nextPose","setVal","DisplayObject","call","visible","worldAlpha","alpha","scaleX","scaleY","skewX","skewY","rotation","rotationCache","_sr","_cr","pivotX","pivotY","_mask","parent","worldTransform","renderable","_cacheAsBitmap","_cacheIsDirty","Object","create","defineProperty","get","value","isMask","_generateCachedSprite","_destroyCachedSprite","vals","undefined","upDate","renderSession","texturesManager","setTexture","texture","shaderManager","setShader","shaderType","blendModeManager","setBlendMode","blendMode","dirty","createBuffer","gl","syncAttribute","syncUniforms","updateTransform","pt","wt","displayObjectUpdateTransform","render","DisplayObjectContainer","children","addChilds","l","arguments","addChildAt","child","index","removeChild","splice","Error","swapChildren","child2","index1","getChildIndex","index2","setChildIndex","currentIndex","getChildAt","removeChildAt","stage","removeStageReference","removeChildren","beginIndex","endIndex","begin","end","range","removed","j","displayObjectContainerUpdateTransform","_renderCachedSprite","maskManager","pushMask","mask","popMask","Sprite","sH","sW","tint","shader","repeatX","repeatY","buildMesh","w","h","vertices","indices","rX","rY","uvs","cachedTint","hex2rgb","vertexBuffer","uvsBuffer","indicesBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","projection","uniform1i","uSampler","uniform1f","uAlpha","uniform2f","projectionVector","uniformMatrix3fv","uMatrix","uniform3fv","uTint","enableVertexAttribArray","aVertexPosition","vertexAttribPointer","FLOAT","aTextureCoord","drawElements","TRIANGLES","UNSIGNED_SHORT","fromFrame","frameId","fromImage","imageId","scaleMode","radius","color","alive","wander","theta","drag","vx","vy","move","revive","force","Particles","points","sizes","point_colors","ct","sizesBuffer","colorsBuffer","aPointSize","aPointColors","Stage","backgroundColor","setBackgroundColor","bgc","hex","rgb2hex","rgb","Function","bind","thisArg","bound","boundArgs","concat","target","TypeError","F","proto","getNextPowerOfTwo","number","result","CompileVertexShader","shaderSrc","_CompileShader","VERTEX_SHADER","CompileFragmentShader","FRAGMENT_SHADER","join","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","compileProgram","vertexSrc","fragmentSrc","fragmentShader","vertexShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","SpriteShader","program","textureCount","init","useProgram","getUniformLocation","getAttribLocation","destroy","deleteProgram","PointShader","Renderer","options","devicePixelRatio","document","createElement","contextLostBound","handleContextLost","contextRestoredBound","handleContextRestored","addEventListener","_contextOptions","premultipliedAlpha","stencil","offset","ShaderManager","TexturesManager","WebGLMaskManager","WebGLBlendModeManager","renderer","initContext","mapBlendModes","getContext","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","setContext","resize","contextLost","clearColor","clear","COLOR_BUFFER_BIT","renderDisplayObject","displayObject","buffer","style","viewport","event","preventDefault","blendModesWebGL","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","DST_ALPHA","DST_COLOR","textures","currentId","setPara","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","currentBlendMode","blendModeWebGL","blendEquation","FUNC_ADD","blendFunc","shaders","_curShaderType","maskData","STENCIL_TEST","depthMask","colorMask","stencilFunc","ALWAYS","stencilOp","KEEP","REPLACE","EQUAL","exports","module","define","amd"],"mappings":"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","file":"../src/jcw2d.js","sourcesContent":["(function() {\n    window.JC = window.JC||{};\n\n    (function() {\n        var lastTime = 0;\n        var vendors = ['ms', 'moz', 'webkit', 'o'];\n        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n                window[vendors[x] + 'CancelRequestAnimationFrame'];\n        }\n    \n        if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = function(callback) {\n                var currTime = new Date().getTime();\n                var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                  timeToCall);\n                lastTime = currTime + timeToCall;\n                return id;\n            };\n        }\n    \n        if (!window.cancelAnimationFrame) {\n            window.cancelAnimationFrame = function(id) {\n                clearTimeout(id);\n            };\n        }\n    \n        window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n    })();\n\n    (function() {\n    \n    \twindow.JC = window.JC||{};\n    \n    \tJC.TWEEN = {\n    \t\teaseBoth: function(t, b, c, d){  //加速减速曲线\n    \t\t\tif ((t/=d/2) < 1) {\n    \t\t\t\treturn c/2*t*t + b;\n    \t\t\t}\n    \t\t\treturn -c/2 * ((--t)*(t-2) - 1) + b;\n    \t\t},\n    \t\textend: function(opts){\n    \t\t\tif(!opts)return;\n    \t\t\tfor(var key in opts){\n    \t\t\t\tif(key!=='extend'&&opts[key])this[key]=opts[key];\n    \t\t\t}\n    \t\t}\n    \t};\n    \n    })();\n\n    (function() {\n    \n    \twindow.JC = window.JC||{};\n    \n    \tJC.Math = {\n            clamp: function ( x, a, b ) {\n    \n                return ( x < a ) ? a : ( ( x > b ) ? b : x );\n    \n            },\n            randIn: function ( low, high ) {\n    \n    \t\t\treturn low + Math.random() * ( high - low );\n    \n    \t\t}\n    \t};\n    \n    })();\n\n    (function(){\n        window.JC = window.JC||{};\n        JC.Texture = function(id, img)\n        {\n            this.id = id;\n            this.img = img;\n            this.width = img.width;\n            this.height = img.height;\n            this.isPowerOfTwo = JC.isPowerOfTwo(this.width,this.height);\n        };\n    \n    \n        JC.TextureUvs = function()\n        {\n            this.x0 = 0;\n            this.y0 = 0;\n    \n            this.x1 = 0;\n            this.y1 = 0;\n    \n            this.x2 = 0;\n            this.y2 = 0;\n    \n            this.x3 = 0;\n            this.y3 = 0;\n        };\n    \n    \n    \n        JC.TextureCache = {};\n    \n    \n        JC.ImageLoader = function(sources, crossorigin){\n            this.receiveNum = 0;\n            this.failNum = 0;\n            this.requestNum = 0;\n            this.crossorigin = crossorigin;\n            this.sources = sources||{};\n            this.imgs = {};\n    \n            this.loading();\n        };\n        JC.ImageLoader.prototype.constructor = JC.ImageLoader;\n        JC.ImageLoader.prototype.loading = function(){\n            var This = this;\n    \n            function ears(source,img){\n                img.onload = function(){\n                    This.receiveNum++;\n                    JC.TextureCache[source] = new JC.Texture(source,img);\n                    if((This.receiveNum+This.failNum)>=This.requestNum){\n                        This.onLoaded();\n                        This.failNum>0&&This.onFailed();\n                    }\n                };\n                img.onerror = function (){\n                    This.failNum++;\n                };\n            }\n    \n            for(var source in this.sources){\n                this.imgs[source] = new Image();\n    \n                ears(source,this.imgs[source]);\n    \n                if(this.crossorigin){\n                    this.imgs[source].crossOrigin = '';\n                }\n                this.imgs[source].src = this.sources[source];\n                this.requestNum++;\n            }\n        };\n        JC.ImageLoader.prototype.getTexture = function(id){\n            return JC.TextureCache[id];\n        };\n        JC.ImageLoader.prototype.onLoaded = function(){};\n        JC.ImageLoader.prototype.onFailed = function(){};\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    })();\n\n    (function() {\n    \n        var root = this;\n    \n        var JC = JC || {};\n    \n        JC.VERSION = \"v0.0.3\";\n    \n        JC.blendModes = {\n            NORMAL: 0,\n            ALPHA: 1,\n            ADD: 2,\n            MULTIPLY: 3,\n            SCREEN: 4\n        };\n    \n        JC.scaleModes = {\n            DEFAULT: 0,\n            LINEAR: 0,\n            NEAREST: 1\n        };\n    \n        if (typeof(Float32Array) != 'undefined') {\n            JC.Float32Array = Float32Array;\n            JC.Uint16Array = Uint16Array;\n    \n            JC.Uint32Array = Uint32Array;\n            JC.ArrayBuffer = ArrayBuffer;\n        } else {\n            JC.Float32Array = Array;\n            JC.Uint16Array = Array;\n    \n            JC.Uint32Array = Array;\n            JC.ArrayBuffer = Array;\n            console.log('%c not type array ', 'color: #fff;background: #f00;');\n        }\n    \n        JC.PI_2 = Math.PI * 2;\n    \n        JC.RTD = 180 / Math.PI;\n    \n        JC.DTR = Math.PI / 180;\n    \n        JC.dontSpeek = false;\n    \n        JC.defaultRenderOptions = {\n            view: null,\n            transparent: false,\n            antialias: false,\n            preserveDrawingBuffer: false,\n            resolution: 1,\n            clearBeforeRender: true,\n            autoResize: false\n        };\n    \n        function noop(){}\n    \n        JC.sayHello = function(type) {\n            if (JC.dontSpeek) return;\n    \n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n                var args = [\n                    '%c  %c jcw2d.js ' + JC.VERSION + '  %c ' + ' %c ' + ' http://www.jason82.com/ %c  ',\n                    'background: #80a89e',\n                    'color: #f98165; background: #cad9d5;',\n                    'background: #80a89e',\n                    'background: #cad9d5',\n                    'background: #80a89e'\n                ];\n    \n                console.log.apply(console, args);\n            }else{\n                console.log(' jcw2d.js ' + JC.VERSION + '  http://www.jason82.com/  ');\n            }\n    \n            JC.dontSpeek = true;\n        };\n    \n    \n        JC.Point = function(x, y) {\n            this.x = x || 0;\n    \n            this.y = y || 0;\n        };\n        JC.Point.prototype.clone = function() {\n            return new JC.Point(this.x, this.y);\n        };\n        JC.Point.prototype.set = function(x, y) {\n            this.x = x || 0;\n            this.y = y || ((y !== 0) ? this.x : 0);\n        };\n        JC.Point.prototype.constructor = JC.Point;\n    \n    \n        JC.Matrix = function() {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.tx = 0;\n            this.ty = 0;\n        };\n        JC.Matrix.prototype.fromArray = function(array) {\n            this.a = array[0];\n            this.b = array[1];\n            this.c = array[3];\n            this.d = array[4];\n            this.tx = array[2];\n            this.ty = array[5];\n        };\n        JC.Matrix.prototype.toArray = function(transpose) {\n            if (!this.array) this.array = new JC.Float32Array(9);\n            var array = this.array;\n    \n            if (transpose) {\n                array[0] = this.a;\n                array[1] = this.b;\n                array[2] = 0;\n                array[3] = this.c;\n                array[4] = this.d;\n                array[5] = 0;\n                array[6] = this.tx;\n                array[7] = this.ty;\n                array[8] = 1;\n            } else {\n                array[0] = this.a;\n                array[1] = this.c;\n                array[2] = this.tx;\n                array[3] = this.b;\n                array[4] = this.d;\n                array[5] = this.ty;\n                array[6] = 0;\n                array[7] = 0;\n                array[8] = 1;\n            }\n    \n            return array;\n        };\n        JC.Matrix.prototype.apply = function(pos, newPos) {\n            newPos = newPos || new JC.Point();\n    \n            newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n            newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n    \n            return newPos;\n        };\n        JC.Matrix.prototype.applyInverse = function(pos, newPos) {\n            newPos = newPos || new JC.Point();\n    \n            var id = 1 / (this.a * this.d + this.c * -this.b);\n    \n            newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n            newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n    \n            return newPos;\n        };\n        JC.Matrix.prototype.translate = function(x, y) {\n            this.tx += x;\n            this.ty += y;\n    \n            return this;\n        };\n        JC.Matrix.prototype.scale = function(x, y) {\n            this.a *= x;\n            this.d *= y;\n            this.c *= x;\n            this.b *= y;\n            this.tx *= x;\n            this.ty *= y;\n    \n            return this;\n        };\n        JC.Matrix.prototype.rotate = function(angle) {\n            var cos = Math.cos(angle);\n            var sin = Math.sin(angle);\n    \n            var a1 = this.a;\n            var c1 = this.c;\n            var tx1 = this.tx;\n    \n            this.a = a1 * cos - this.b * sin;\n            this.b = a1 * sin + this.b * cos;\n            this.c = c1 * cos - this.d * sin;\n            this.d = c1 * sin + this.d * cos;\n            this.tx = tx1 * cos - this.ty * sin;\n            this.ty = tx1 * sin + this.ty * cos;\n    \n            return this;\n        };\n        JC.Matrix.prototype.append = function(matrix) {\n            var a1 = this.a;\n            var b1 = this.b;\n            var c1 = this.c;\n            var d1 = this.d;\n    \n            this.a = matrix.a * a1 + matrix.b * c1;\n            this.b = matrix.a * b1 + matrix.b * d1;\n            this.c = matrix.c * a1 + matrix.d * c1;\n            this.d = matrix.c * b1 + matrix.d * d1;\n    \n            this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n            this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    \n            return this;\n        };\n        JC.Matrix.prototype.identity = function() {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.tx = 0;\n            this.ty = 0;\n    \n            return this;\n        };\n    \n        JC.identityMatrix = new JC.Matrix();\n    \n    \n        function Animate(){\n            this.MST = 0;\n            this.MAT = 300;\n            this.fx = 'easeBoth';\n            this.complete = noop;\n            this.moving = false;\n            this.infinity = false;\n            this.alternate = false;\n            this.repeats = 0;\n        }\n        Animate.prototype.moveTween = function(opts){\n            this.MST = Date.now();\n            this.MATR = opts.attr||this.MATR;\n            this.MAT = opts.time||this.MAT;\n            this.fx = opts.fx||this.fx;\n            this.complete = opts.complete||this.complete;\n            this.infinity = opts.infinity||this.infinity;\n            this.alternate = opts.alternate||this.alternate;\n            this.repeats = opts.repeats||this.repeats;\n            this.moving = true;\n            this.MATRC = {};\n            for(var i in this.MATR){\n                this.MATRC[i] = this[i];\n            }\n        };\n        Animate.prototype.manager = function(){\n            if(!this.moving)return;\n            var now = Date.now();\n            if(now < this.MST+this.MAT){\n                this.nextPose();\n            }else{\n                this.setVal(this.MATR);\n                if(this.repeats>0||this.infinity){\n                    this.repeats>0&&--this.repeats;\n                    if(this.alternate){\n                        this.moveTween({attr: this.MATRC});\n                    }else{\n                        this.setVal(this.MATRC);\n                        this.moveTween({attr: this.MATR});\n                    }\n                }else{\n                    this.moving = false;\n                    this.complete();\n                    if(now>this.MST)this.complete = noop;\n                }\n            }\n        };\n        Animate.prototype.nextPose = function(){\n            var now=Date.now()-this.MST;\n            for(var i in this.MATR){\n                this[i] = JC.TWEEN[this.fx]( now , this.MATRC[i] , this.MATR[i] - this.MATRC[i] , this.MAT );\n            }\n        };\n    \n        JC.DisplayObject = function() {\n            Animate.call( this );\n            this.visible = true;\n            this.worldAlpha = 1;\n            this.alpha = 1;\n    \n            this.scaleX = 1;\n            this.scaleY = 1;\n    \n            this.skewX = 0;\n            this.skewY = 0;\n    \n            this.rotation = 0;\n            this.rotationCache = 0;\n            this._sr = 0;\n            this._cr = 1;\n            \n            this.x = 0;\n            this.y = 0;\n            \n            this.pivotX = 0;\n            this.pivotY = 0;\n    \n            this._mask = null;\n    \n            this.parent = null;\n            this.worldTransform = new JC.Matrix();\n    \n            this.renderable = false;\n    \n            this._cacheAsBitmap = false;\n    \n            this._cacheIsDirty = false;\n        };\n    \n        JC.DisplayObject.prototype = Object.create( Animate.prototype );\n        JC.DisplayObject.prototype.constructor = JC.DisplayObject;\n    \n        Object.defineProperty(JC.DisplayObject.prototype, 'mask', {\n            get: function() {\n                return this._mask;\n            },\n            set: function(value) {\n    \n                if (this._mask) this._mask.isMask = false;\n                this._mask = value;\n                if (this._mask) this._mask.isMask = true;\n            }\n        });\n    \n        Object.defineProperty(JC.DisplayObject.prototype, 'cacheAsBitmap', {\n    \n            get: function() {\n                return this._cacheAsBitmap;\n            },\n    \n            set: function(value) {\n    \n                if (this._cacheAsBitmap === value) return;\n    \n                if (value) {\n                    this._generateCachedSprite();\n                } else {\n                    this._destroyCachedSprite();\n                }\n    \n                this._cacheAsBitmap = value;\n            }\n        });\n    \n        JC.DisplayObject.prototype.setVal = function(vals){\n            if(vals===undefined)return;\n            for(var key in vals){\n                if(this[key]===undefined){\n                    continue;\n                }else{\n                    this[key] = vals[key];\n                }\n            }\n        };\n    \n        JC.DisplayObject.prototype.upDate = function(renderSession) {\n            renderSession.texturesManager.setTexture(this.texture);\n            renderSession.shaderManager.setShader(this.shaderType);\n            renderSession.blendModeManager.setBlendMode(this.blendMode);\n            this.dirty&&this.createBuffer(renderSession.gl);\n            this.syncAttribute(renderSession);\n            this.syncUniforms(renderSession);\n        };\n    \n        JC.DisplayObject.prototype.updateTransform = function() {\n            var pt = this.parent.worldTransform;\n            var wt = this.worldTransform;\n    \n            var a, b, c, d, tx, ty;\n    \n            if (this.rotation % JC.PI_2) {\n                if (this.rotation !== this.rotationCache) {\n                    this.rotationCache = this.rotation;\n                    this._sr = Math.sin(this.rotation);\n                    this._cr = Math.cos(this.rotation);\n                }\n    \n                a = this._cr * this.scaleX;\n                b = this._sr * this.scaleX;\n                c = -this._sr * this.scaleY;\n                d = this._cr * this.scaleY;\n                tx = this.x;\n                ty = this.y;\n    \n                if (this.pivotX || this.pivotY) {\n                    tx -= this.pivotX * a + this.pivotY * c;\n                    ty -= this.pivotX * b + this.pivotY * d;\n                }\n    \n                wt.a = a * pt.a + b * pt.c;\n                wt.b = a * pt.b + b * pt.d;\n                wt.c = c * pt.a + d * pt.c;\n                wt.d = c * pt.b + d * pt.d;\n                wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n                wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n    \n    \n            } else {\n                a = this.scaleX;\n                d = this.scaleY;\n    \n                tx = this.x - this.pivotX * a;\n                ty = this.y - this.pivotY * d;\n    \n                wt.a = a * pt.a;\n                wt.b = a * pt.b;\n                wt.c = d * pt.c;\n                wt.d = d * pt.d;\n                wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n                wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n            }\n    \n            this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    \n            this.manager();\n        };\n    \n        JC.DisplayObject.prototype.displayObjectUpdateTransform = JC.DisplayObject.prototype.updateTransform;\n    \n        JC.DisplayObject.prototype.render = function(renderSession) {\n            // OVERWRITE;\n            // this line is just here to pass jshinting :)\n            renderSession = renderSession;\n        };\n    \n    \n    \n        JC.DisplayObjectContainer = function() {\n            JC.DisplayObject.call(this);\n    \n            this.children = [];\n        };\n    \n        JC.DisplayObjectContainer.prototype = Object.create(JC.DisplayObject.prototype);\n        JC.DisplayObjectContainer.prototype.constructor = JC.DisplayObjectContainer;\n    \n        JC.DisplayObjectContainer.prototype.addChilds = function() {\n            var l = arguments.length;\n            if(l>0){\n                for(var i=0;i<l;i++){\n                    this.addChildAt(arguments[i], this.children.length);\n                }\n                return arguments[l-1];\n            }\n        };\n    \n        JC.DisplayObjectContainer.prototype.addChildAt = function(child, index) {\n            if (index >= 0 && index <= this.children.length) {\n                if (child.parent) {\n                    child.parent.removeChild(child);\n                }\n    \n                child.parent = this;\n    \n                this.children.splice(index, 0, child);\n    \n                return child;\n            } else {\n                throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);\n            }\n        };\n    \n        JC.DisplayObjectContainer.prototype.swapChildren = function(child, child2) {\n            if (child === child2) {\n                return;\n            }\n    \n            var index1 = this.getChildIndex(child);\n            var index2 = this.getChildIndex(child2);\n    \n            if (index1 < 0 || index2 < 0) {\n                throw new Error('swapChildren: Both the supplied DisplayObjects must be a child of the caller.');\n            }\n    \n            this.children[index1] = child2;\n            this.children[index2] = child;\n    \n        };\n    \n        JC.DisplayObjectContainer.prototype.getChildIndex = function(child) {\n            var index = this.children.indexOf(child);\n            if (index === -1) {\n                throw new Error('The supplied DisplayObject must be a child of the caller');\n            }\n            return index;\n        };\n    \n        JC.DisplayObjectContainer.prototype.setChildIndex = function(child, index) {\n            if (index < 0 || index >= this.children.length) {\n                throw new Error('The supplied index is out of bounds');\n            }\n            var currentIndex = this.getChildIndex(child);\n            this.children.splice(currentIndex, 1); //remove from old position\n            this.children.splice(index, 0, child); //add at new position\n        };\n    \n        JC.DisplayObjectContainer.prototype.getChildAt = function(index) {\n            if (index < 0 || index >= this.children.length) {\n                throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject must be a child of the caller');\n            }\n            return this.children[index];\n    \n        };\n    \n        JC.DisplayObjectContainer.prototype.removeChild = function(child) {\n            var index = this.children.indexOf(child);\n            if (index === -1) return;\n    \n            return this.removeChildAt(index);\n        };\n    \n        JC.DisplayObjectContainer.prototype.removeChildAt = function(index) {\n            var child = this.getChildAt(index);\n            if (this.stage)\n                child.removeStageReference();\n    \n            child.parent = undefined;\n            this.children.splice(index, 1);\n            return child;\n        };\n    \n        JC.DisplayObjectContainer.prototype.removeChildren = function(beginIndex, endIndex) {\n            var begin = beginIndex || 0;\n            var end = typeof endIndex === 'number' ? endIndex : this.children.length;\n            var range = end - begin;\n    \n            if (range > 0 && range <= end) {\n                var removed = this.children.splice(begin, range);\n                for (var i = 0; i < removed.length; i++) {\n                    var child = removed[i];\n                    if (this.stage)\n                        child.removeStageReference();\n                    child.parent = undefined;\n                }\n                return removed;\n            } else if (range === 0 && this.children.length === 0) {\n                return [];\n            } else {\n                throw new Error('removeChildren: Range Error, numeric values are outside the acceptable range');\n            }\n        };\n    \n        JC.DisplayObjectContainer.prototype.updateTransform = function() {\n            if (!this.visible) return;\n    \n            this.displayObjectUpdateTransform();\n    \n            for (var i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].updateTransform();\n            }\n        };\n    \n        JC.DisplayObjectContainer.prototype.displayObjectContainerUpdateTransform = JC.DisplayObjectContainer.prototype.updateTransform;\n    \n        JC.DisplayObjectContainer.prototype.render = function(renderSession) {\n            if (!this.visible || this.alpha <= 0) return;\n    \n            if (this._cacheAsBitmap) {\n                this._renderCachedSprite(renderSession);\n                return;\n            }\n    \n            var i, j;\n    \n            if (this._mask) {\n    \n                if (this._mask) {\n                    renderSession.maskManager.pushMask(this.mask, renderSession);\n                }\n    \n                // simple render children!\n                for (i = 0, j = this.children.length; i < j; i++) {\n                    this.children[i].render(renderSession);\n                }\n    \n                if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n    \n            } else {\n                // simple render children!\n                for (i = 0, j = this.children.length; i < j; i++) {\n                    this.children[i].render(renderSession);\n                }\n            }\n        };\n    \n    \n    \n    \n        JC.Sprite = function(opts) {\n            JC.DisplayObjectContainer.call(this);\n    \n            this.texture = opts.texture;\n    \n            this.width = opts.width||this.texture.width;\n    \n            this.height = opts.height||this.texture.height;\n    \n            this.sH = opts.sH||0;\n    \n            this.sW = opts.sW||0;\n    \n            this.tint = opts.tint||0xFFFFFF;\n    \n            this.blendMode = opts.blendModes||JC.blendModes.ALPHA;\n    \n            this.shader = null;\n            this.shaderType = 'sprite';\n    \n            this.repeatX = opts.repeatX||false;\n            this.repeatY = opts.repeatY||false;\n    \n            this.renderable = true;\n    \n            this.buildMesh();\n    \n        };\n    \n        JC.Sprite.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n        JC.Sprite.prototype.constructor = JC.Sprite;\n    \n    \n        JC.Sprite.prototype.buildMesh = function() {\n            var w = this.texture.width,\n                h = this.texture.height;\n            this.vertices = new JC.Float32Array([\n                    -this.width/2,this.height/2,\n                    -this.width/2,-this.height/2,\n                    this.width/2,-this.height/2,\n                    this.width/2,this.height/2\n                ]);\n            this.indices = new JC.Uint16Array([\n                    0,1,2,\n                    0,2,3\n                ]);\n            if(this.repeatX || this.repeatY){\n                var rX = this.repeatX?2:1,\n                    rY = this.repeatY?2:1;\n                this.uvs = new JC.Float32Array([\n                    0*rX, 0*rY,\n                    0*rX, 1*rY,\n                    1*rX, 1*rY,\n                    1*rX, 0*rY\n                ]);\n            }else{\n                this.uvs = new JC.Float32Array([\n                    this.sW/w, this.sH/h,\n                    this.sW/w, (this.sH+this.height)/h,\n                    (this.sW+this.width)/w, (this.sH+this.height)/h,\n                    (this.sW+this.width)/w, this.sH/h\n                ]);\n            }\n            this.cachedTint = JC.hex2rgb(this.tint);\n            this.dirty = true;\n        };\n        \n        JC.Sprite.prototype.createBuffer = function(gl){\n            this.vertexBuffer = gl.createBuffer();\n            this.uvsBuffer = gl.createBuffer();\n            this.indicesBuffer = gl.createBuffer();\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.DYNAMIC_DRAW);\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    \n            this.dirty = false;\n        };\n    \n        JC.Sprite.prototype.syncUniforms = function(renderSession){\n            var gl = renderSession.gl,\n                shader = renderSession.shaderManager.shader,\n                projection = renderSession.projection;\n    \n            gl.uniform1i(shader.uSampler, 0);\n            gl.uniform1f(shader.uAlpha, this.worldAlpha);\n            gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n            gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n            gl.uniform3fv(shader.uTint, this.cachedTint);\n    \n        };\n    \n        JC.Sprite.prototype.syncAttribute = function(renderSession){\n            var gl = renderSession.gl,\n                shader = renderSession.shaderManager.shader;\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n            gl.enableVertexAttribArray(shader.aVertexPosition);\n            gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n            gl.enableVertexAttribArray(shader.aTextureCoord);\n            gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n    \n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n        };\n    \n        JC.Sprite.prototype.render = function(renderSession) {\n            if (!this.visible || this.alpha <= 0) return;\n            this.upDate(renderSession);\n            var i, j, gl = renderSession.gl;\n    \n            // do a quick check to see if this element has a mask or a filter.\n            if (this._mask) {\n    \n                if (this._mask) {\n                    renderSession.maskManager.pushMask(this.mask, renderSession);\n                }\n    \n                // add this sprite to the batch\n                gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n    \n                // now loop through the children and make sure they get rendered\n                for (i = 0, j = this.children.length; i < j; i++) {\n                    this.children[i].render(renderSession);\n                }\n    \n                // time to stop the sprite batch as either a mask element or a filter draw will happen next\n    \n                if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n            } else {\n    \n                gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n    \n                // simple render children!\n                for (i = 0, j = this.children.length; i < j; i++) {\n                    this.children[i].render(renderSession);\n                }\n    \n            }\n        };\n    \n        JC.Sprite.fromFrame = function(frameId) {\n            var texture = JC.TextureCache[frameId];\n            if (!texture) throw new Error('The frameId \"' + frameId + '\" does not exist in the texture cache' + this);\n            return new JC.Sprite(texture);\n        };\n    \n        JC.Sprite.fromImage = function(imageId, crossorigin, scaleMode) {\n            var texture = JC.Texture.fromImage(imageId, crossorigin, scaleMode);\n            return new JC.Sprite(texture);\n        };\n    \n    \n    \n    \n        JC.Point = function(opts) {\n            this.x = opts.x;\n            this.y = opts.y;\n    \n            this.radius = opts.radius || 10;\n            this.color = opts.color;\n            this.alpha = opts.alpha;\n    \n            this.alive = true;\n    \n            this.wander = JC.Math.randIn( 0.5, 2.0 );\n            this.theta = JC.Math.randIn( 0, Math.PI*2 );\n            this.drag = 0.92;\n    \n            this.vx = 0.0;\n            this.vy = 0.0;\n        };\n        JC.Point.prototype.move = function() {\n            this.x += this.vx;\n            this.y += this.vy;\n    \n            this.vx *= this.drag;\n            this.vy *= this.drag;\n    \n            this.theta += JC.Math.randIn( -0.5, 0.5 ) * this.wander;\n            this.vx += Math.sin( this.theta ) * 0.1;\n            this.vy += Math.cos( this.theta ) * 0.1;\n    \n            this.radius *= 0.96;\n            this.alive = this.radius > 0.5;\n        };\n        JC.Point.prototype.revive = function() {\n            var theta = JC.Math.randIn( 0, Math.PI*2 ),\n                force = JC.Math.randIn( 2, 8 );\n            this.x = JC.Math.randIn( -20, 20 );\n            this.y = JC.Math.randIn( -20, 20 );\n    \n            this.vx = Math.sin( theta ) * force;\n            this.vy = Math.cos( theta ) * force;\n    \n            this.drag = JC.Math.randIn( 0.9, 0.99 );\n            this.wander = JC.Math.randIn( 0.5, 2.0 );\n    \n    \n            this.radius = JC.Math.randIn(4,20);\n        };\n    \n    \n    \n        JC.Particles = function(opts) {\n            JC.DisplayObjectContainer.call(this);\n    \n            this.points = [];\n    \n            this.texture = opts.texture;\n    \n            this.tint = opts.tint||0xFFFFFF;\n    \n            this.blendMode = opts.blendModes||JC.blendModes.ALPHA;\n    \n            this.shader = null;\n    \n            this.renderable = true;\n    \n            this.buildMesh();\n    \n        };\n    \n        JC.Particles.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n        JC.Particles.prototype.constructor = JC.Particles;\n        JC.Particles.prototype.buildMesh = function() {\n            this.vertices = new JC.Float32Array(this.points.length*2);\n            this.sizes = new JC.Uint16Array(this.points.length);\n            this.point_colors = new JC.Float32Array(this.points.length*4);\n            var ct;\n            for(var i=0;i<this.points.length;i++){\n                this.vertices[2*i] = this.points[i].x;\n                this.vertices[2*i+1] = this.points[i].y;\n                this.sizes[i] = this.points[i].radius;\n                ct = JC.hex2rgb(this.points[i].color);\n                this.point_colors[4*i] = ct[0];\n                this.point_colors[4*i+1] = ct[1];\n                this.point_colors[4*i+2] = ct[2];\n                this.point_colors[4*i+3] = this.points[i].alpha;\n            }\n        };\n        JC.Particles.prototype.createBuffer = function(gl){\n            this.vertexBuffer = gl.createBuffer();\n            this.sizesBuffer = gl.createBuffer();\n            this.colorsBuffer = gl.createBuffer();\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.sizes, gl.DYNAMIC_DRAW);\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.point_colors, gl.DYNAMIC_DRAW);\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n            this.dirty = false;\n        };\n        JC.Particles.prototype.syncUniforms = function(renderSession){\n            var gl = renderSession.gl,\n                shader = renderSession.shaderManager.shader,\n                projection = renderSession.projection;\n    \n            gl.uniform1i(shader.uSampler, 0);\n            gl.uniform1f(shader.uAlpha, this.worldAlpha);\n            gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n            gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n            gl.uniform3fv(shader.uTint, this.cachedTint);\n    \n        };\n    \n        JC.Particles.prototype.syncAttribute = function(renderSession){\n            var gl = renderSession.gl,\n                shader = renderSession.shaderManager.shader;\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n            gl.enableVertexAttribArray(shader.aVertexPosition);\n            gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n            gl.enableVertexAttribArray(shader.aPointSize);\n            gl.vertexAttribPointer(shader.aPointSize, 2, gl.FLOAT, false, 0, 0);\n    \n            gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n            gl.enableVertexAttribArray(shader.aPointColors);\n            gl.vertexAttribPointer(shader.aPointColors, 4, gl.FLOAT, false, 0, 0);\n    \n        };\n    \n    \n    \n    \n        JC.Stage = function(backgroundColor) {\n            JC.DisplayObjectContainer.call(this);\n    \n            this.worldTransform = new JC.Matrix();\n    \n            this.stage = this;\n    \n            this.setBackgroundColor(backgroundColor);\n        };\n    \n        JC.Stage.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n        JC.Stage.prototype.constructor = JC.Stage;\n    \n        JC.Stage.prototype.updateTransform = function() {\n            this.worldAlpha = 1;\n    \n            for (var i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].updateTransform();\n            }\n        };\n    \n        JC.Stage.prototype.setBackgroundColor = function(bgc) {\n            if (typeof bgc === 'number') return;\n            this.backgroundColor = JC.hex2rgb(bgc);\n        };\n    \n    \n    \n        JC.hex2rgb = function(hex) {\n            return [(hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255];\n        };\n    \n        JC.rgb2hex = function(rgb) {\n            return ((rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255);\n        };\n    \n        /**\n         * A polyfill for Function.prototype.bind\n         *\n         * @method bind\n         */\n        if (typeof Function.prototype.bind !== 'function') {\n            Function.prototype.bind = (function() {\n                return function(thisArg) {\n                    var target = this,\n                        i = arguments.length - 1,\n                        boundArgs = [];\n                    if (i > 0) {\n                        boundArgs.length = i;\n                        while (i--) boundArgs[i] = arguments[i + 1];\n                    }\n    \n                    if (typeof target !== 'function') throw new TypeError();\n    \n                    function bound() {\n                        var i = arguments.length,\n                            args = new Array(i);\n                        while (i--) args[i] = arguments[i];\n                        args = boundArgs.concat(args);\n                        return target.apply(this instanceof bound ? this : thisArg, args);\n                    }\n    \n                    bound.prototype = (function F(proto) {\n                        if (proto) F.prototype = proto;\n                        if (!(this instanceof F)) return new F();\n                    })(target.prototype);\n    \n                    return bound;\n                };\n            })();\n        }\n    \n        JC.getNextPowerOfTwo = function(number) {\n            if (number > 0 && (number & (number - 1)) === 0) // see: http://goo.gl/D9kPj\n                return number;\n            else {\n                var result = 1;\n                while (result < number) result <<= 1;\n                return result;\n            }\n        };\n    \n        JC.isPowerOfTwo = function(width, height) {\n            return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n    \n        };\n    \n    \n    \n        JC.CompileVertexShader = function(gl, shaderSrc) {\n            return JC._CompileShader(gl, shaderSrc, gl.VERTEX_SHADER);\n        };\n    \n        JC.CompileFragmentShader = function(gl, shaderSrc) {\n            return JC._CompileShader(gl, shaderSrc, gl.FRAGMENT_SHADER);\n        };\n    \n        JC._CompileShader = function(gl, shaderSrc, shaderType) {\n            var src = shaderSrc.join(\"\\n\");\n            var shader = gl.createShader(shaderType);\n            gl.shaderSource(shader, src);\n            gl.compileShader(shader);\n    \n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n                window.console.log(gl.getShaderInfoLog(shader));\n                return null;\n            }\n    \n            return shader;\n        };\n    \n        JC.compileProgram = function(gl, vertexSrc, fragmentSrc) {\n            var fragmentShader = JC.CompileFragmentShader(gl, fragmentSrc);\n            var vertexShader = JC.CompileVertexShader(gl, vertexSrc);\n    \n            var shaderProgram = gl.createProgram();\n    \n            gl.attachShader(shaderProgram, vertexShader);\n            gl.attachShader(shaderProgram, fragmentShader);\n            gl.linkProgram(shaderProgram);\n    \n            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n                window.console.log(\"Could not initialise shaders\");\n            }\n    \n            return shaderProgram;\n        };\n    \n    \n    \n        JC.SpriteShader = function(gl) {\n            this.gl = gl;\n    \n            this.program = null;\n    \n            this.fragmentSrc = [\n                'precision lowp float;',\n                'varying vec2 vTextureCoord;',\n    \n                'uniform sampler2D uSampler;',\n                'uniform vec3 uTint;',\n                'uniform float uAlpha;',\n    \n                'void main(void) {',\n                '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n                '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n                '}'\n            ];\n    \n            this.vertexSrc = [\n                'attribute vec2 aVertexPosition;',\n                'attribute vec2 aTextureCoord;',\n    \n                'uniform vec2 projectionVector;',\n                'uniform mat3 uMatrix;',\n    \n                'varying vec2 vTextureCoord;',\n    \n                'void main(void) {',\n                '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n                '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n                '   vTextureCoord = aTextureCoord;',\n                '}'\n            ];\n    \n            this.textureCount = 0;\n    \n            this.init();\n        };\n    \n        JC.SpriteShader.prototype.constructor = JC.SpriteShader;\n    \n        JC.SpriteShader.prototype.init = function() {\n            var gl = this.gl;\n    \n            var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n    \n            gl.useProgram(program);\n    \n            this.uSampler = gl.getUniformLocation(program, 'uSampler');\n            this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n            this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n            this.uTint = gl.getUniformLocation(program, 'uTint');\n            this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n    \n            this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n            this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n    \n            this.program = program;\n        };\n    \n        JC.SpriteShader.prototype.destroy = function() {\n            this.gl.deleteProgram(this.program);\n            this.gl = null;\n        };\n    \n    \n    \n    \n        JC.PointShader = function(gl) {\n            this.gl = gl;\n    \n            this.program = null;\n    \n            this.fragmentSrc = [\n                'precision lowp float;',\n                'varying vec2 vTextureCoord;',\n    \n                'uniform sampler2D uSampler;',\n                'uniform vec3 uTint;',\n                'uniform float uAlpha;',\n    \n                'varying vec4 vPointColor;',\n    \n                'void main(void) {',\n                '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n                '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n                '}'\n            ];\n    \n            this.vertexSrc = [\n                'attribute vec2 aVertexPosition;',\n                'attribute vec2 aTextureCoord;',\n                'attribute float aPointColor;',\n    \n                'uniform vec2 projectionVector;',\n                'uniform mat3 uMatrix;',\n    \n                'varying vec4 vPointColor;',\n    \n                'void main(void) {',\n                '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n                '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n                '   vPointColor = aPointColor;',\n                '}'\n            ];\n    \n            this.textureCount = 0;\n    \n            this.init();\n        };\n    \n        JC.PointShader.prototype.constructor = JC.PointShader;\n    \n        JC.PointShader.prototype.init = function() {\n            var gl = this.gl;\n    \n            var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n    \n            gl.useProgram(program);\n    \n            this.uSampler = gl.getUniformLocation(program, 'uSampler');\n            this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n            this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n            this.uTint = gl.getUniformLocation(program, 'uTint');\n            this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n    \n            this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n            this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n    \n            this.program = program;\n        };\n    \n        JC.PointShader.prototype.destroy = function() {\n            this.gl.deleteProgram(this.program);\n            this.gl = null;\n        };\n    \n    \n    \n        JC.Renderer = function(width, height, options) {\n            if (options) {\n                for (var i in JC.defaultRenderOptions) {\n                    if (typeof options[i] === 'undefined') options[i] = JC.defaultRenderOptions[i];\n                }\n            } else {\n                options = JC.defaultRenderOptions;\n            }\n    \n            JC.sayHello();\n    \n            this.resolution = options.resolution || window.devicePixelRatio;\n    \n            this.transparent = options.transparent;\n    \n            this.autoResize = options.autoResize || false;\n    \n            this.clearBeforeRender = options.clearBeforeRender || true;\n    \n            this.width = width || 800;\n    \n            this.height = height || 600;\n    \n            this.view = options.view || document.createElement('canvas');\n    \n            this.contextLostBound = this.handleContextLost.bind(this);\n    \n            this.contextRestoredBound = this.handleContextRestored.bind(this);\n    \n            this.view.addEventListener('webglcontextlost', this.contextLostBound, false);\n            this.view.addEventListener('webglcontextrestored', this.contextRestoredBound, false);\n    \n            this._contextOptions = {\n                alpha: this.transparent,\n                antialias: options.antialias, // SPEED UP??\n                premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer\n            };\n    \n            this.projection = new JC.Point();\n    \n            this.offset = new JC.Point(0, 0);\n    \n            this.shaderManager = new JC.ShaderManager();\n    \n            this.texturesManager = new JC.TexturesManager();\n    \n            this.maskManager = new JC.WebGLMaskManager();\n    \n            this.blendModeManager = new JC.WebGLBlendModeManager();\n    \n            this.renderSession = {};\n            this.renderSession.gl = this.gl;\n            this.renderSession.shaderManager = this.shaderManager;\n            this.renderSession.texturesManager = this.texturesManager;\n            this.renderSession.maskManager = this.maskManager;\n            this.renderSession.blendModeManager = this.blendModeManager;\n            this.renderSession.renderer = this;\n            this.renderSession.resolution = this.resolution;\n    \n            // time init the context..\n            this.initContext();\n    \n            // map some webGL blend modes..\n            this.mapBlendModes();\n        };\n    \n        JC.Renderer.prototype.constructor = JC.Renderer;\n    \n        JC.Renderer.prototype.initContext = function() {\n            var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n            this.gl = gl;\n    \n            if (!gl) {\n                throw new Error('This browser does not support webGL. Try using the canvas renderer');\n            }\n    \n            // set up the default JC settings..\n            gl.disable(gl.DEPTH_TEST);\n            gl.disable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n    \n            // need to set the context for all the managers...\n            this.shaderManager.setContext(gl);\n            this.texturesManager.setContext(gl);\n            this.maskManager.setContext(gl);\n            this.blendModeManager.setContext(gl);\n    \n            this.renderSession.gl = this.gl;\n    \n            // now resize and we are good to go!\n            this.resize(this.width, this.height);\n    \n        };\n    \n        JC.Renderer.prototype.render = function(stage) {\n            // no point rendering if our context has been blown up!\n            if (this.contextLost) return;\n    \n            // update the scene graph\n            stage.updateTransform();\n    \n            var gl = this.gl;\n    \n            // make sure we are bound to the main frame buffer\n            // gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n            if (this.clearBeforeRender) {\n                if (this.transparent) {\n                    gl.clearColor(0, 0, 0, 0);\n                } else {\n                    gl.clearColor(stage.backgroundColor[0], stage.backgroundColor[1], stage.backgroundColor[2], 1);\n                }\n    \n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n    \n            this.renderDisplayObject(stage, this.projection);\n        };\n    \n        JC.Renderer.prototype.renderDisplayObject = function(displayObject, projection, buffer) {\n            this.renderSession.blendModeManager.setBlendMode(JC.blendModes.ALPHA);\n    \n            // set the default projection\n            this.renderSession.projection = projection;\n    \n            //set the default offset\n            this.renderSession.offset = this.offset;\n    \n            // render the scene!\n            displayObject.render(this.renderSession);\n    \n        };\n    \n        JC.Renderer.prototype.resize = function(width, height) {\n            this.width = width * this.resolution;\n            this.height = height * this.resolution;\n    \n            this.view.width = this.width;\n            this.view.height = this.height;\n    \n            if (this.autoResize) {\n                this.view.style.width = this.width / this.resolution + 'px';\n                this.view.style.height = this.height / this.resolution + 'px';\n            }\n    \n            this.gl.viewport(0, 0, this.width, this.height);\n    \n            this.projection.x = this.width / 2 / this.resolution;\n            this.projection.y = this.height / 2 / this.resolution;\n        };\n    \n        JC.Renderer.prototype.handleContextLost = function(event) {\n            event.preventDefault();\n            this.contextLost = true;\n        };\n    \n        JC.Renderer.prototype.handleContextRestored = function() {\n            this.initContext();\n    \n            this.contextLost = false;\n        };\n    \n        JC.Renderer.prototype.mapBlendModes = function() {\n            var gl = this.gl;\n    \n            if (!JC.blendModesWebGL) {\n                JC.blendModesWebGL = [];\n    \n                JC.blendModesWebGL[JC.blendModes.NORMAL]      = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n                JC.blendModesWebGL[JC.blendModes.ALPHA]       = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n                JC.blendModesWebGL[JC.blendModes.ADD]         = [gl.SRC_ALPHA, gl.DST_ALPHA];\n                JC.blendModesWebGL[JC.blendModes.MULTIPLY]    = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n                JC.blendModesWebGL[JC.blendModes.SCREEN]      = [gl.SRC_ALPHA, gl.ONE];\n            }\n        };\n    \n    \n    \n    \n    \n        JC.TexturesManager = function() {\n            this.textures = {};\n        };\n    \n        JC.TexturesManager.prototype.constructor = JC.TexturesManager;\n    \n        JC.TexturesManager.prototype.setContext = function(gl) {\n            this.gl = gl;\n        };\n    \n        JC.TexturesManager.prototype.setTexture = function(texture) {\n            var gl = this.gl;\n            if (this.currentId === texture.id) return false;\n    \n            if(this.textures[texture.id]===undefined){\n                this.setPara(texture);\n            }\n    \n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, this.textures[texture.id].texture);\n            \n            this.currentId = texture.id;\n    \n            return true;\n        };\n    \n        JC.TexturesManager.prototype.setPara = function(texture) {\n            var gl = this.gl;\n    \n            texture.texture = gl.createTexture();\n    \n            // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n            \n            gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n            \n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.img);\n            \n            if(texture.isPowerOfTwo)gl.generateMipmap(gl.TEXTURE_2D);\n    \n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    \n            this.textures[texture.id] = texture;\n    \n            gl.bindTexture(gl.TEXTURE_2D, null);\n        };\n    \n        JC.TexturesManager.prototype.destroy = function() {\n            this.gl = null;\n        };\n    \n    \n    \n    \n        JC.WebGLBlendModeManager = function() {\n            this.currentBlendMode = 99999;\n        };\n    \n        JC.WebGLBlendModeManager.prototype.constructor = JC.WebGLBlendModeManager;\n    \n        JC.WebGLBlendModeManager.prototype.setContext = function(gl) {\n            this.gl = gl;\n        };\n    \n        JC.WebGLBlendModeManager.prototype.setBlendMode = function(blendMode) {\n            if (this.currentBlendMode === blendMode) return false;\n    \n            this.currentBlendMode = blendMode;\n    \n            var blendModeWebGL = JC.blendModesWebGL[this.currentBlendMode];\n            \n            this.gl.blendEquation( this.gl.FUNC_ADD );\n            this.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);\n    \n            return true;\n        };\n    \n        JC.WebGLBlendModeManager.prototype.destroy = function() {\n            this.gl = null;\n        };\n    \n    \n        JC.ShaderManager = function()\n        {\n    \n            this.shaders = {};\n    \n        };\n    \n        JC.ShaderManager.prototype.constructor = JC.ShaderManager;\n    \n        JC.ShaderManager.prototype.setContext = function(gl)\n        {\n            this.gl = gl;\n    \n            // this shader is used for the default sprite rendering\n            this.shaders['sprite'] = new JC.SpriteShader(gl);\n    \n            // this shader is used for the particle rendering\n            this.shaders['particle'] = new JC.PointShader(gl);\n    \n            this.setShader('sprite');\n        };\n    \n    \n        JC.ShaderManager.prototype.setShader = function(type)\n        {\n            if(this._curShaderType === type)return false;\n            \n            this._curShaderType = type;\n    \n            this.shader = this.shaders[type];\n    \n            this.gl.useProgram(this.shader.program);\n    \n            return true;\n        };\n    \n        JC.ShaderManager.prototype.destroy = function()\n        {\n            this.gl = null;\n        };\n    \n    \n    \n    \n        JC.WebGLMaskManager = function() {};\n    \n        JC.WebGLMaskManager.prototype.constructor = JC.WebGLMaskManager;\n    \n        JC.WebGLMaskManager.prototype.setContext = function(gl) {\n            this.gl = gl;\n        };\n    \n        JC.WebGLMaskManager.prototype.pushMask = function(maskData, renderSession) {\n            var gl = renderSession.gl;\n    \n    \n            gl.enable(gl.STENCIL_TEST);\n            gl.depthMask(false);\n            gl.colorMask(false, false, false, false);\n            gl.stencilFunc(gl.ALWAYS, 1, ~0);\n            gl.stencilOp(gl.KEEP, gl.REPLACE, gl.REPLACE);\n    \n            // maskData.render();\n    \n            gl.depthMask(true);\n            gl.colorMask(true, true, true, true);\n            gl.stencilFunc(gl.EQUAL, 1, ~0);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        };\n    \n        JC.WebGLMaskManager.prototype.popMask = function() {\n            var gl = this.gl;\n            gl.disable(gl.STENCIL_TEST);\n        };\n    \n        JC.WebGLMaskManager.prototype.destroy = function() {\n            this.gl = null;\n        };\n    \n    \n        /**\n         * @author Mat Groves http://matgroves.com/ @Doormat23\n         */\n    \n        if (typeof exports !== 'undefined') {\n            if (typeof module !== 'undefined' && module.exports) {\n                exports = module.exports = JC;\n            }\n            exports.JC = JC;\n        } else if (typeof define !== 'undefined' && define.amd) {\n            define(JC);\n        } else {\n            root.JC = JC;\n        }\n    \n    })(this);\n    \n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = JC;\n        }else{\n            exports = JC;\n        }\n    } else if (typeof define !== 'undefined' && define.amd) {\n        define(JC);\n    }else{\n        window.JC = JC;\n    }\n\n})();","(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n\n    window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n})();","(function() {\n\n\twindow.JC = window.JC||{};\n\n\tJC.TWEEN = {\n\t\teaseBoth: function(t, b, c, d){  //加速减速曲线\n\t\t\tif ((t/=d/2) < 1) {\n\t\t\t\treturn c/2*t*t + b;\n\t\t\t}\n\t\t\treturn -c/2 * ((--t)*(t-2) - 1) + b;\n\t\t},\n\t\textend: function(opts){\n\t\t\tif(!opts)return;\n\t\t\tfor(var key in opts){\n\t\t\t\tif(key!=='extend'&&opts[key])this[key]=opts[key];\n\t\t\t}\n\t\t}\n\t};\n\n})();","(function() {\n\n\twindow.JC = window.JC||{};\n\n\tJC.Math = {\n        clamp: function ( x, a, b ) {\n\n            return ( x < a ) ? a : ( ( x > b ) ? b : x );\n\n        },\n        randIn: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t}\n\t};\n\n})();","(function(){\n    window.JC = window.JC||{};\n    JC.Texture = function(id, img)\n    {\n        this.id = id;\n        this.img = img;\n        this.width = img.width;\n        this.height = img.height;\n        this.isPowerOfTwo = JC.isPowerOfTwo(this.width,this.height);\n    };\n\n\n    JC.TextureUvs = function()\n    {\n        this.x0 = 0;\n        this.y0 = 0;\n\n        this.x1 = 0;\n        this.y1 = 0;\n\n        this.x2 = 0;\n        this.y2 = 0;\n\n        this.x3 = 0;\n        this.y3 = 0;\n    };\n\n\n\n    JC.TextureCache = {};\n\n\n    JC.ImageLoader = function(sources, crossorigin){\n        this.receiveNum = 0;\n        this.failNum = 0;\n        this.requestNum = 0;\n        this.crossorigin = crossorigin;\n        this.sources = sources||{};\n        this.imgs = {};\n\n        this.loading();\n    };\n    JC.ImageLoader.prototype.constructor = JC.ImageLoader;\n    JC.ImageLoader.prototype.loading = function(){\n        var This = this;\n\n        function ears(source,img){\n            img.onload = function(){\n                This.receiveNum++;\n                JC.TextureCache[source] = new JC.Texture(source,img);\n                if((This.receiveNum+This.failNum)>=This.requestNum){\n                    This.onLoaded();\n                    This.failNum>0&&This.onFailed();\n                }\n            };\n            img.onerror = function (){\n                This.failNum++;\n            };\n        }\n\n        for(var source in this.sources){\n            this.imgs[source] = new Image();\n\n            ears(source,this.imgs[source]);\n\n            if(this.crossorigin){\n                this.imgs[source].crossOrigin = '';\n            }\n            this.imgs[source].src = this.sources[source];\n            this.requestNum++;\n        }\n    };\n    JC.ImageLoader.prototype.getTexture = function(id){\n        return JC.TextureCache[id];\n    };\n    JC.ImageLoader.prototype.onLoaded = function(){};\n    JC.ImageLoader.prototype.onFailed = function(){};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n})();","(function() {\n\n    var root = this;\n\n    var JC = JC || {};\n\n    JC.VERSION = \"v0.0.3\";\n\n    JC.blendModes = {\n        NORMAL: 0,\n        ALPHA: 1,\n        ADD: 2,\n        MULTIPLY: 3,\n        SCREEN: 4\n    };\n\n    JC.scaleModes = {\n        DEFAULT: 0,\n        LINEAR: 0,\n        NEAREST: 1\n    };\n\n    if (typeof(Float32Array) != 'undefined') {\n        JC.Float32Array = Float32Array;\n        JC.Uint16Array = Uint16Array;\n\n        JC.Uint32Array = Uint32Array;\n        JC.ArrayBuffer = ArrayBuffer;\n    } else {\n        JC.Float32Array = Array;\n        JC.Uint16Array = Array;\n\n        JC.Uint32Array = Array;\n        JC.ArrayBuffer = Array;\n        console.log('%c not type array ', 'color: #fff;background: #f00;');\n    }\n\n    JC.PI_2 = Math.PI * 2;\n\n    JC.RTD = 180 / Math.PI;\n\n    JC.DTR = Math.PI / 180;\n\n    JC.dontSpeek = false;\n\n    JC.defaultRenderOptions = {\n        view: null,\n        transparent: false,\n        antialias: false,\n        preserveDrawingBuffer: false,\n        resolution: 1,\n        clearBeforeRender: true,\n        autoResize: false\n    };\n\n    function noop(){}\n\n    JC.sayHello = function(type) {\n        if (JC.dontSpeek) return;\n\n        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n            var args = [\n                '%c  %c jcw2d.js ' + JC.VERSION + '  %c ' + ' %c ' + ' http://www.jason82.com/ %c  ',\n                'background: #80a89e',\n                'color: #f98165; background: #cad9d5;',\n                'background: #80a89e',\n                'background: #cad9d5',\n                'background: #80a89e'\n            ];\n\n            console.log.apply(console, args);\n        }else{\n            console.log(' jcw2d.js ' + JC.VERSION + '  http://www.jason82.com/  ');\n        }\n\n        JC.dontSpeek = true;\n    };\n\n\n    JC.Point = function(x, y) {\n        this.x = x || 0;\n\n        this.y = y || 0;\n    };\n    JC.Point.prototype.clone = function() {\n        return new JC.Point(this.x, this.y);\n    };\n    JC.Point.prototype.set = function(x, y) {\n        this.x = x || 0;\n        this.y = y || ((y !== 0) ? this.x : 0);\n    };\n    JC.Point.prototype.constructor = JC.Point;\n\n\n    JC.Matrix = function() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n    };\n    JC.Matrix.prototype.fromArray = function(array) {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    };\n    JC.Matrix.prototype.toArray = function(transpose) {\n        if (!this.array) this.array = new JC.Float32Array(9);\n        var array = this.array;\n\n        if (transpose) {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        } else {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    };\n    JC.Matrix.prototype.apply = function(pos, newPos) {\n        newPos = newPos || new JC.Point();\n\n        newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n        newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n\n        return newPos;\n    };\n    JC.Matrix.prototype.applyInverse = function(pos, newPos) {\n        newPos = newPos || new JC.Point();\n\n        var id = 1 / (this.a * this.d + this.c * -this.b);\n\n        newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n        newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n\n        return newPos;\n    };\n    JC.Matrix.prototype.translate = function(x, y) {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    };\n    JC.Matrix.prototype.scale = function(x, y) {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    };\n    JC.Matrix.prototype.rotate = function(angle) {\n        var cos = Math.cos(angle);\n        var sin = Math.sin(angle);\n\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n\n        this.a = a1 * cos - this.b * sin;\n        this.b = a1 * sin + this.b * cos;\n        this.c = c1 * cos - this.d * sin;\n        this.d = c1 * sin + this.d * cos;\n        this.tx = tx1 * cos - this.ty * sin;\n        this.ty = tx1 * sin + this.ty * cos;\n\n        return this;\n    };\n    JC.Matrix.prototype.append = function(matrix) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n\n        this.a = matrix.a * a1 + matrix.b * c1;\n        this.b = matrix.a * b1 + matrix.b * d1;\n        this.c = matrix.c * a1 + matrix.d * c1;\n        this.d = matrix.c * b1 + matrix.d * d1;\n\n        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n\n        return this;\n    };\n    JC.Matrix.prototype.identity = function() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    };\n\n    JC.identityMatrix = new JC.Matrix();\n\n\n    function Animate(){\n        this.MST = 0;\n        this.MAT = 300;\n        this.fx = 'easeBoth';\n        this.complete = noop;\n        this.moving = false;\n        this.infinity = false;\n        this.alternate = false;\n        this.repeats = 0;\n    }\n    Animate.prototype.moveTween = function(opts){\n        this.MST = Date.now();\n        this.MATR = opts.attr||this.MATR;\n        this.MAT = opts.time||this.MAT;\n        this.fx = opts.fx||this.fx;\n        this.complete = opts.complete||this.complete;\n        this.infinity = opts.infinity||this.infinity;\n        this.alternate = opts.alternate||this.alternate;\n        this.repeats = opts.repeats||this.repeats;\n        this.moving = true;\n        this.MATRC = {};\n        for(var i in this.MATR){\n            this.MATRC[i] = this[i];\n        }\n    };\n    Animate.prototype.manager = function(){\n        if(!this.moving)return;\n        var now = Date.now();\n        if(now < this.MST+this.MAT){\n            this.nextPose();\n        }else{\n            this.setVal(this.MATR);\n            if(this.repeats>0||this.infinity){\n                this.repeats>0&&--this.repeats;\n                if(this.alternate){\n                    this.moveTween({attr: this.MATRC});\n                }else{\n                    this.setVal(this.MATRC);\n                    this.moveTween({attr: this.MATR});\n                }\n            }else{\n                this.moving = false;\n                this.complete();\n                if(now>this.MST)this.complete = noop;\n            }\n        }\n    };\n    Animate.prototype.nextPose = function(){\n        var now=Date.now()-this.MST;\n        for(var i in this.MATR){\n            this[i] = JC.TWEEN[this.fx]( now , this.MATRC[i] , this.MATR[i] - this.MATRC[i] , this.MAT );\n        }\n    };\n\n    JC.DisplayObject = function() {\n        Animate.call( this );\n        this.visible = true;\n        this.worldAlpha = 1;\n        this.alpha = 1;\n\n        this.scaleX = 1;\n        this.scaleY = 1;\n\n        this.skewX = 0;\n        this.skewY = 0;\n\n        this.rotation = 0;\n        this.rotationCache = 0;\n        this._sr = 0;\n        this._cr = 1;\n        \n        this.x = 0;\n        this.y = 0;\n        \n        this.pivotX = 0;\n        this.pivotY = 0;\n\n        this._mask = null;\n\n        this.parent = null;\n        this.worldTransform = new JC.Matrix();\n\n        this.renderable = false;\n\n        this._cacheAsBitmap = false;\n\n        this._cacheIsDirty = false;\n    };\n\n    JC.DisplayObject.prototype = Object.create( Animate.prototype );\n    JC.DisplayObject.prototype.constructor = JC.DisplayObject;\n\n    Object.defineProperty(JC.DisplayObject.prototype, 'mask', {\n        get: function() {\n            return this._mask;\n        },\n        set: function(value) {\n\n            if (this._mask) this._mask.isMask = false;\n            this._mask = value;\n            if (this._mask) this._mask.isMask = true;\n        }\n    });\n\n    Object.defineProperty(JC.DisplayObject.prototype, 'cacheAsBitmap', {\n\n        get: function() {\n            return this._cacheAsBitmap;\n        },\n\n        set: function(value) {\n\n            if (this._cacheAsBitmap === value) return;\n\n            if (value) {\n                this._generateCachedSprite();\n            } else {\n                this._destroyCachedSprite();\n            }\n\n            this._cacheAsBitmap = value;\n        }\n    });\n\n    JC.DisplayObject.prototype.setVal = function(vals){\n        if(vals===undefined)return;\n        for(var key in vals){\n            if(this[key]===undefined){\n                continue;\n            }else{\n                this[key] = vals[key];\n            }\n        }\n    };\n\n    JC.DisplayObject.prototype.upDate = function(renderSession) {\n        renderSession.texturesManager.setTexture(this.texture);\n        renderSession.shaderManager.setShader(this.shaderType);\n        renderSession.blendModeManager.setBlendMode(this.blendMode);\n        this.dirty&&this.createBuffer(renderSession.gl);\n        this.syncAttribute(renderSession);\n        this.syncUniforms(renderSession);\n    };\n\n    JC.DisplayObject.prototype.updateTransform = function() {\n        var pt = this.parent.worldTransform;\n        var wt = this.worldTransform;\n\n        var a, b, c, d, tx, ty;\n\n        if (this.rotation % JC.PI_2) {\n            if (this.rotation !== this.rotationCache) {\n                this.rotationCache = this.rotation;\n                this._sr = Math.sin(this.rotation);\n                this._cr = Math.cos(this.rotation);\n            }\n\n            a = this._cr * this.scaleX;\n            b = this._sr * this.scaleX;\n            c = -this._sr * this.scaleY;\n            d = this._cr * this.scaleY;\n            tx = this.x;\n            ty = this.y;\n\n            if (this.pivotX || this.pivotY) {\n                tx -= this.pivotX * a + this.pivotY * c;\n                ty -= this.pivotX * b + this.pivotY * d;\n            }\n\n            wt.a = a * pt.a + b * pt.c;\n            wt.b = a * pt.b + b * pt.d;\n            wt.c = c * pt.a + d * pt.c;\n            wt.d = c * pt.b + d * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n\n\n        } else {\n            a = this.scaleX;\n            d = this.scaleY;\n\n            tx = this.x - this.pivotX * a;\n            ty = this.y - this.pivotY * d;\n\n            wt.a = a * pt.a;\n            wt.b = a * pt.b;\n            wt.c = d * pt.c;\n            wt.d = d * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n        }\n\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        this.manager();\n    };\n\n    JC.DisplayObject.prototype.displayObjectUpdateTransform = JC.DisplayObject.prototype.updateTransform;\n\n    JC.DisplayObject.prototype.render = function(renderSession) {\n        // OVERWRITE;\n        // this line is just here to pass jshinting :)\n        renderSession = renderSession;\n    };\n\n\n\n    JC.DisplayObjectContainer = function() {\n        JC.DisplayObject.call(this);\n\n        this.children = [];\n    };\n\n    JC.DisplayObjectContainer.prototype = Object.create(JC.DisplayObject.prototype);\n    JC.DisplayObjectContainer.prototype.constructor = JC.DisplayObjectContainer;\n\n    JC.DisplayObjectContainer.prototype.addChilds = function() {\n        var l = arguments.length;\n        if(l>0){\n            for(var i=0;i<l;i++){\n                this.addChildAt(arguments[i], this.children.length);\n            }\n            return arguments[l-1];\n        }\n    };\n\n    JC.DisplayObjectContainer.prototype.addChildAt = function(child, index) {\n        if (index >= 0 && index <= this.children.length) {\n            if (child.parent) {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n\n            this.children.splice(index, 0, child);\n\n            return child;\n        } else {\n            throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);\n        }\n    };\n\n    JC.DisplayObjectContainer.prototype.swapChildren = function(child, child2) {\n        if (child === child2) {\n            return;\n        }\n\n        var index1 = this.getChildIndex(child);\n        var index2 = this.getChildIndex(child2);\n\n        if (index1 < 0 || index2 < 0) {\n            throw new Error('swapChildren: Both the supplied DisplayObjects must be a child of the caller.');\n        }\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n\n    };\n\n    JC.DisplayObjectContainer.prototype.getChildIndex = function(child) {\n        var index = this.children.indexOf(child);\n        if (index === -1) {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n        return index;\n    };\n\n    JC.DisplayObjectContainer.prototype.setChildIndex = function(child, index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('The supplied index is out of bounds');\n        }\n        var currentIndex = this.getChildIndex(child);\n        this.children.splice(currentIndex, 1); //remove from old position\n        this.children.splice(index, 0, child); //add at new position\n    };\n\n    JC.DisplayObjectContainer.prototype.getChildAt = function(index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject must be a child of the caller');\n        }\n        return this.children[index];\n\n    };\n\n    JC.DisplayObjectContainer.prototype.removeChild = function(child) {\n        var index = this.children.indexOf(child);\n        if (index === -1) return;\n\n        return this.removeChildAt(index);\n    };\n\n    JC.DisplayObjectContainer.prototype.removeChildAt = function(index) {\n        var child = this.getChildAt(index);\n        if (this.stage)\n            child.removeStageReference();\n\n        child.parent = undefined;\n        this.children.splice(index, 1);\n        return child;\n    };\n\n    JC.DisplayObjectContainer.prototype.removeChildren = function(beginIndex, endIndex) {\n        var begin = beginIndex || 0;\n        var end = typeof endIndex === 'number' ? endIndex : this.children.length;\n        var range = end - begin;\n\n        if (range > 0 && range <= end) {\n            var removed = this.children.splice(begin, range);\n            for (var i = 0; i < removed.length; i++) {\n                var child = removed[i];\n                if (this.stage)\n                    child.removeStageReference();\n                child.parent = undefined;\n            }\n            return removed;\n        } else if (range === 0 && this.children.length === 0) {\n            return [];\n        } else {\n            throw new Error('removeChildren: Range Error, numeric values are outside the acceptable range');\n        }\n    };\n\n    JC.DisplayObjectContainer.prototype.updateTransform = function() {\n        if (!this.visible) return;\n\n        this.displayObjectUpdateTransform();\n\n        for (var i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].updateTransform();\n        }\n    };\n\n    JC.DisplayObjectContainer.prototype.displayObjectContainerUpdateTransform = JC.DisplayObjectContainer.prototype.updateTransform;\n\n    JC.DisplayObjectContainer.prototype.render = function(renderSession) {\n        if (!this.visible || this.alpha <= 0) return;\n\n        if (this._cacheAsBitmap) {\n            this._renderCachedSprite(renderSession);\n            return;\n        }\n\n        var i, j;\n\n        if (this._mask) {\n\n            if (this._mask) {\n                renderSession.maskManager.pushMask(this.mask, renderSession);\n            }\n\n            // simple render children!\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n\n            if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n\n        } else {\n            // simple render children!\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n        }\n    };\n\n\n\n\n    JC.Sprite = function(opts) {\n        JC.DisplayObjectContainer.call(this);\n\n        this.texture = opts.texture;\n\n        this.width = opts.width||this.texture.width;\n\n        this.height = opts.height||this.texture.height;\n\n        this.sH = opts.sH||0;\n\n        this.sW = opts.sW||0;\n\n        this.tint = opts.tint||0xFFFFFF;\n\n        this.blendMode = opts.blendModes||JC.blendModes.ALPHA;\n\n        this.shader = null;\n        this.shaderType = 'sprite';\n\n        this.repeatX = opts.repeatX||false;\n        this.repeatY = opts.repeatY||false;\n\n        this.renderable = true;\n\n        this.buildMesh();\n\n    };\n\n    JC.Sprite.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n    JC.Sprite.prototype.constructor = JC.Sprite;\n\n\n    JC.Sprite.prototype.buildMesh = function() {\n        var w = this.texture.width,\n            h = this.texture.height;\n        this.vertices = new JC.Float32Array([\n                -this.width/2,this.height/2,\n                -this.width/2,-this.height/2,\n                this.width/2,-this.height/2,\n                this.width/2,this.height/2\n            ]);\n        this.indices = new JC.Uint16Array([\n                0,1,2,\n                0,2,3\n            ]);\n        if(this.repeatX || this.repeatY){\n            var rX = this.repeatX?2:1,\n                rY = this.repeatY?2:1;\n            this.uvs = new JC.Float32Array([\n                0*rX, 0*rY,\n                0*rX, 1*rY,\n                1*rX, 1*rY,\n                1*rX, 0*rY\n            ]);\n        }else{\n            this.uvs = new JC.Float32Array([\n                this.sW/w, this.sH/h,\n                this.sW/w, (this.sH+this.height)/h,\n                (this.sW+this.width)/w, (this.sH+this.height)/h,\n                (this.sW+this.width)/w, this.sH/h\n            ]);\n        }\n        this.cachedTint = JC.hex2rgb(this.tint);\n        this.dirty = true;\n    };\n    \n    JC.Sprite.prototype.createBuffer = function(gl){\n        this.vertexBuffer = gl.createBuffer();\n        this.uvsBuffer = gl.createBuffer();\n        this.indicesBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n        this.dirty = false;\n    };\n\n    JC.Sprite.prototype.syncUniforms = function(renderSession){\n        var gl = renderSession.gl,\n            shader = renderSession.shaderManager.shader,\n            projection = renderSession.projection;\n\n        gl.uniform1i(shader.uSampler, 0);\n        gl.uniform1f(shader.uAlpha, this.worldAlpha);\n        gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n        gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n        gl.uniform3fv(shader.uTint, this.cachedTint);\n\n    };\n\n    JC.Sprite.prototype.syncAttribute = function(renderSession){\n        var gl = renderSession.gl,\n            shader = renderSession.shaderManager.shader;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.enableVertexAttribArray(shader.aVertexPosition);\n        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n        gl.enableVertexAttribArray(shader.aTextureCoord);\n        gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    };\n\n    JC.Sprite.prototype.render = function(renderSession) {\n        if (!this.visible || this.alpha <= 0) return;\n        this.upDate(renderSession);\n        var i, j, gl = renderSession.gl;\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask) {\n\n            if (this._mask) {\n                renderSession.maskManager.pushMask(this.mask, renderSession);\n            }\n\n            // add this sprite to the batch\n            gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n\n            // now loop through the children and make sure they get rendered\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n\n            // time to stop the sprite batch as either a mask element or a filter draw will happen next\n\n            if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n        } else {\n\n            gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n\n            // simple render children!\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n\n        }\n    };\n\n    JC.Sprite.fromFrame = function(frameId) {\n        var texture = JC.TextureCache[frameId];\n        if (!texture) throw new Error('The frameId \"' + frameId + '\" does not exist in the texture cache' + this);\n        return new JC.Sprite(texture);\n    };\n\n    JC.Sprite.fromImage = function(imageId, crossorigin, scaleMode) {\n        var texture = JC.Texture.fromImage(imageId, crossorigin, scaleMode);\n        return new JC.Sprite(texture);\n    };\n\n\n\n\n    JC.Point = function(opts) {\n        this.x = opts.x;\n        this.y = opts.y;\n\n        this.radius = opts.radius || 10;\n        this.color = opts.color;\n        this.alpha = opts.alpha;\n\n        this.alive = true;\n\n        this.wander = JC.Math.randIn( 0.5, 2.0 );\n        this.theta = JC.Math.randIn( 0, Math.PI*2 );\n        this.drag = 0.92;\n\n        this.vx = 0.0;\n        this.vy = 0.0;\n    };\n    JC.Point.prototype.move = function() {\n        this.x += this.vx;\n        this.y += this.vy;\n\n        this.vx *= this.drag;\n        this.vy *= this.drag;\n\n        this.theta += JC.Math.randIn( -0.5, 0.5 ) * this.wander;\n        this.vx += Math.sin( this.theta ) * 0.1;\n        this.vy += Math.cos( this.theta ) * 0.1;\n\n        this.radius *= 0.96;\n        this.alive = this.radius > 0.5;\n    };\n    JC.Point.prototype.revive = function() {\n        var theta = JC.Math.randIn( 0, Math.PI*2 ),\n            force = JC.Math.randIn( 2, 8 );\n        this.x = JC.Math.randIn( -20, 20 );\n        this.y = JC.Math.randIn( -20, 20 );\n\n        this.vx = Math.sin( theta ) * force;\n        this.vy = Math.cos( theta ) * force;\n\n        this.drag = JC.Math.randIn( 0.9, 0.99 );\n        this.wander = JC.Math.randIn( 0.5, 2.0 );\n\n\n        this.radius = JC.Math.randIn(4,20);\n    };\n\n\n\n    JC.Particles = function(opts) {\n        JC.DisplayObjectContainer.call(this);\n\n        this.points = [];\n\n        this.texture = opts.texture;\n\n        this.tint = opts.tint||0xFFFFFF;\n\n        this.blendMode = opts.blendModes||JC.blendModes.ALPHA;\n\n        this.shader = null;\n\n        this.renderable = true;\n\n        this.buildMesh();\n\n    };\n\n    JC.Particles.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n    JC.Particles.prototype.constructor = JC.Particles;\n    JC.Particles.prototype.buildMesh = function() {\n        this.vertices = new JC.Float32Array(this.points.length*2);\n        this.sizes = new JC.Uint16Array(this.points.length);\n        this.point_colors = new JC.Float32Array(this.points.length*4);\n        var ct;\n        for(var i=0;i<this.points.length;i++){\n            this.vertices[2*i] = this.points[i].x;\n            this.vertices[2*i+1] = this.points[i].y;\n            this.sizes[i] = this.points[i].radius;\n            ct = JC.hex2rgb(this.points[i].color);\n            this.point_colors[4*i] = ct[0];\n            this.point_colors[4*i+1] = ct[1];\n            this.point_colors[4*i+2] = ct[2];\n            this.point_colors[4*i+3] = this.points[i].alpha;\n        }\n    };\n    JC.Particles.prototype.createBuffer = function(gl){\n        this.vertexBuffer = gl.createBuffer();\n        this.sizesBuffer = gl.createBuffer();\n        this.colorsBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.sizes, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.point_colors, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        this.dirty = false;\n    };\n    JC.Particles.prototype.syncUniforms = function(renderSession){\n        var gl = renderSession.gl,\n            shader = renderSession.shaderManager.shader,\n            projection = renderSession.projection;\n\n        gl.uniform1i(shader.uSampler, 0);\n        gl.uniform1f(shader.uAlpha, this.worldAlpha);\n        gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n        gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n        gl.uniform3fv(shader.uTint, this.cachedTint);\n\n    };\n\n    JC.Particles.prototype.syncAttribute = function(renderSession){\n        var gl = renderSession.gl,\n            shader = renderSession.shaderManager.shader;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.enableVertexAttribArray(shader.aVertexPosition);\n        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n        gl.enableVertexAttribArray(shader.aPointSize);\n        gl.vertexAttribPointer(shader.aPointSize, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n        gl.enableVertexAttribArray(shader.aPointColors);\n        gl.vertexAttribPointer(shader.aPointColors, 4, gl.FLOAT, false, 0, 0);\n\n    };\n\n\n\n\n    JC.Stage = function(backgroundColor) {\n        JC.DisplayObjectContainer.call(this);\n\n        this.worldTransform = new JC.Matrix();\n\n        this.stage = this;\n\n        this.setBackgroundColor(backgroundColor);\n    };\n\n    JC.Stage.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n    JC.Stage.prototype.constructor = JC.Stage;\n\n    JC.Stage.prototype.updateTransform = function() {\n        this.worldAlpha = 1;\n\n        for (var i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].updateTransform();\n        }\n    };\n\n    JC.Stage.prototype.setBackgroundColor = function(bgc) {\n        if (typeof bgc === 'number') return;\n        this.backgroundColor = JC.hex2rgb(bgc);\n    };\n\n\n\n    JC.hex2rgb = function(hex) {\n        return [(hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255];\n    };\n\n    JC.rgb2hex = function(rgb) {\n        return ((rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255);\n    };\n\n    /**\n     * A polyfill for Function.prototype.bind\n     *\n     * @method bind\n     */\n    if (typeof Function.prototype.bind !== 'function') {\n        Function.prototype.bind = (function() {\n            return function(thisArg) {\n                var target = this,\n                    i = arguments.length - 1,\n                    boundArgs = [];\n                if (i > 0) {\n                    boundArgs.length = i;\n                    while (i--) boundArgs[i] = arguments[i + 1];\n                }\n\n                if (typeof target !== 'function') throw new TypeError();\n\n                function bound() {\n                    var i = arguments.length,\n                        args = new Array(i);\n                    while (i--) args[i] = arguments[i];\n                    args = boundArgs.concat(args);\n                    return target.apply(this instanceof bound ? this : thisArg, args);\n                }\n\n                bound.prototype = (function F(proto) {\n                    if (proto) F.prototype = proto;\n                    if (!(this instanceof F)) return new F();\n                })(target.prototype);\n\n                return bound;\n            };\n        })();\n    }\n\n    JC.getNextPowerOfTwo = function(number) {\n        if (number > 0 && (number & (number - 1)) === 0) // see: http://goo.gl/D9kPj\n            return number;\n        else {\n            var result = 1;\n            while (result < number) result <<= 1;\n            return result;\n        }\n    };\n\n    JC.isPowerOfTwo = function(width, height) {\n        return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n\n    };\n\n\n\n    JC.CompileVertexShader = function(gl, shaderSrc) {\n        return JC._CompileShader(gl, shaderSrc, gl.VERTEX_SHADER);\n    };\n\n    JC.CompileFragmentShader = function(gl, shaderSrc) {\n        return JC._CompileShader(gl, shaderSrc, gl.FRAGMENT_SHADER);\n    };\n\n    JC._CompileShader = function(gl, shaderSrc, shaderType) {\n        var src = shaderSrc.join(\"\\n\");\n        var shader = gl.createShader(shaderType);\n        gl.shaderSource(shader, src);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            window.console.log(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    };\n\n    JC.compileProgram = function(gl, vertexSrc, fragmentSrc) {\n        var fragmentShader = JC.CompileFragmentShader(gl, fragmentSrc);\n        var vertexShader = JC.CompileVertexShader(gl, vertexSrc);\n\n        var shaderProgram = gl.createProgram();\n\n        gl.attachShader(shaderProgram, vertexShader);\n        gl.attachShader(shaderProgram, fragmentShader);\n        gl.linkProgram(shaderProgram);\n\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n            window.console.log(\"Could not initialise shaders\");\n        }\n\n        return shaderProgram;\n    };\n\n\n\n    JC.SpriteShader = function(gl) {\n        this.gl = gl;\n\n        this.program = null;\n\n        this.fragmentSrc = [\n            'precision lowp float;',\n            'varying vec2 vTextureCoord;',\n\n            'uniform sampler2D uSampler;',\n            'uniform vec3 uTint;',\n            'uniform float uAlpha;',\n\n            'void main(void) {',\n            '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n            '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n            '}'\n        ];\n\n        this.vertexSrc = [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n\n            'uniform vec2 projectionVector;',\n            'uniform mat3 uMatrix;',\n\n            'varying vec2 vTextureCoord;',\n\n            'void main(void) {',\n            '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n            '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n            '   vTextureCoord = aTextureCoord;',\n            '}'\n        ];\n\n        this.textureCount = 0;\n\n        this.init();\n    };\n\n    JC.SpriteShader.prototype.constructor = JC.SpriteShader;\n\n    JC.SpriteShader.prototype.init = function() {\n        var gl = this.gl;\n\n        var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n\n        gl.useProgram(program);\n\n        this.uSampler = gl.getUniformLocation(program, 'uSampler');\n        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n        this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n        this.uTint = gl.getUniformLocation(program, 'uTint');\n        this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n\n        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n        this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n\n        this.program = program;\n    };\n\n    JC.SpriteShader.prototype.destroy = function() {\n        this.gl.deleteProgram(this.program);\n        this.gl = null;\n    };\n\n\n\n\n    JC.PointShader = function(gl) {\n        this.gl = gl;\n\n        this.program = null;\n\n        this.fragmentSrc = [\n            'precision lowp float;',\n            'varying vec2 vTextureCoord;',\n\n            'uniform sampler2D uSampler;',\n            'uniform vec3 uTint;',\n            'uniform float uAlpha;',\n\n            'varying vec4 vPointColor;',\n\n            'void main(void) {',\n            '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n            '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n            '}'\n        ];\n\n        this.vertexSrc = [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute float aPointColor;',\n\n            'uniform vec2 projectionVector;',\n            'uniform mat3 uMatrix;',\n\n            'varying vec4 vPointColor;',\n\n            'void main(void) {',\n            '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n            '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n            '   vPointColor = aPointColor;',\n            '}'\n        ];\n\n        this.textureCount = 0;\n\n        this.init();\n    };\n\n    JC.PointShader.prototype.constructor = JC.PointShader;\n\n    JC.PointShader.prototype.init = function() {\n        var gl = this.gl;\n\n        var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n\n        gl.useProgram(program);\n\n        this.uSampler = gl.getUniformLocation(program, 'uSampler');\n        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n        this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n        this.uTint = gl.getUniformLocation(program, 'uTint');\n        this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n\n        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n        this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n\n        this.program = program;\n    };\n\n    JC.PointShader.prototype.destroy = function() {\n        this.gl.deleteProgram(this.program);\n        this.gl = null;\n    };\n\n\n\n    JC.Renderer = function(width, height, options) {\n        if (options) {\n            for (var i in JC.defaultRenderOptions) {\n                if (typeof options[i] === 'undefined') options[i] = JC.defaultRenderOptions[i];\n            }\n        } else {\n            options = JC.defaultRenderOptions;\n        }\n\n        JC.sayHello();\n\n        this.resolution = options.resolution || window.devicePixelRatio;\n\n        this.transparent = options.transparent;\n\n        this.autoResize = options.autoResize || false;\n\n        this.clearBeforeRender = options.clearBeforeRender || true;\n\n        this.width = width || 800;\n\n        this.height = height || 600;\n\n        this.view = options.view || document.createElement('canvas');\n\n        this.contextLostBound = this.handleContextLost.bind(this);\n\n        this.contextRestoredBound = this.handleContextRestored.bind(this);\n\n        this.view.addEventListener('webglcontextlost', this.contextLostBound, false);\n        this.view.addEventListener('webglcontextrestored', this.contextRestoredBound, false);\n\n        this._contextOptions = {\n            alpha: this.transparent,\n            antialias: options.antialias, // SPEED UP??\n            premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n            stencil: true,\n            preserveDrawingBuffer: options.preserveDrawingBuffer\n        };\n\n        this.projection = new JC.Point();\n\n        this.offset = new JC.Point(0, 0);\n\n        this.shaderManager = new JC.ShaderManager();\n\n        this.texturesManager = new JC.TexturesManager();\n\n        this.maskManager = new JC.WebGLMaskManager();\n\n        this.blendModeManager = new JC.WebGLBlendModeManager();\n\n        this.renderSession = {};\n        this.renderSession.gl = this.gl;\n        this.renderSession.shaderManager = this.shaderManager;\n        this.renderSession.texturesManager = this.texturesManager;\n        this.renderSession.maskManager = this.maskManager;\n        this.renderSession.blendModeManager = this.blendModeManager;\n        this.renderSession.renderer = this;\n        this.renderSession.resolution = this.resolution;\n\n        // time init the context..\n        this.initContext();\n\n        // map some webGL blend modes..\n        this.mapBlendModes();\n    };\n\n    JC.Renderer.prototype.constructor = JC.Renderer;\n\n    JC.Renderer.prototype.initContext = function() {\n        var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n        this.gl = gl;\n\n        if (!gl) {\n            throw new Error('This browser does not support webGL. Try using the canvas renderer');\n        }\n\n        // set up the default JC settings..\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.enable(gl.BLEND);\n\n        // need to set the context for all the managers...\n        this.shaderManager.setContext(gl);\n        this.texturesManager.setContext(gl);\n        this.maskManager.setContext(gl);\n        this.blendModeManager.setContext(gl);\n\n        this.renderSession.gl = this.gl;\n\n        // now resize and we are good to go!\n        this.resize(this.width, this.height);\n\n    };\n\n    JC.Renderer.prototype.render = function(stage) {\n        // no point rendering if our context has been blown up!\n        if (this.contextLost) return;\n\n        // update the scene graph\n        stage.updateTransform();\n\n        var gl = this.gl;\n\n        // make sure we are bound to the main frame buffer\n        // gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        if (this.clearBeforeRender) {\n            if (this.transparent) {\n                gl.clearColor(0, 0, 0, 0);\n            } else {\n                gl.clearColor(stage.backgroundColor[0], stage.backgroundColor[1], stage.backgroundColor[2], 1);\n            }\n\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        this.renderDisplayObject(stage, this.projection);\n    };\n\n    JC.Renderer.prototype.renderDisplayObject = function(displayObject, projection, buffer) {\n        this.renderSession.blendModeManager.setBlendMode(JC.blendModes.ALPHA);\n\n        // set the default projection\n        this.renderSession.projection = projection;\n\n        //set the default offset\n        this.renderSession.offset = this.offset;\n\n        // render the scene!\n        displayObject.render(this.renderSession);\n\n    };\n\n    JC.Renderer.prototype.resize = function(width, height) {\n        this.width = width * this.resolution;\n        this.height = height * this.resolution;\n\n        this.view.width = this.width;\n        this.view.height = this.height;\n\n        if (this.autoResize) {\n            this.view.style.width = this.width / this.resolution + 'px';\n            this.view.style.height = this.height / this.resolution + 'px';\n        }\n\n        this.gl.viewport(0, 0, this.width, this.height);\n\n        this.projection.x = this.width / 2 / this.resolution;\n        this.projection.y = this.height / 2 / this.resolution;\n    };\n\n    JC.Renderer.prototype.handleContextLost = function(event) {\n        event.preventDefault();\n        this.contextLost = true;\n    };\n\n    JC.Renderer.prototype.handleContextRestored = function() {\n        this.initContext();\n\n        this.contextLost = false;\n    };\n\n    JC.Renderer.prototype.mapBlendModes = function() {\n        var gl = this.gl;\n\n        if (!JC.blendModesWebGL) {\n            JC.blendModesWebGL = [];\n\n            JC.blendModesWebGL[JC.blendModes.NORMAL]      = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.ALPHA]       = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.ADD]         = [gl.SRC_ALPHA, gl.DST_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.MULTIPLY]    = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.SCREEN]      = [gl.SRC_ALPHA, gl.ONE];\n        }\n    };\n\n\n\n\n\n    JC.TexturesManager = function() {\n        this.textures = {};\n    };\n\n    JC.TexturesManager.prototype.constructor = JC.TexturesManager;\n\n    JC.TexturesManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    };\n\n    JC.TexturesManager.prototype.setTexture = function(texture) {\n        var gl = this.gl;\n        if (this.currentId === texture.id) return false;\n\n        if(this.textures[texture.id]===undefined){\n            this.setPara(texture);\n        }\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.textures[texture.id].texture);\n        \n        this.currentId = texture.id;\n\n        return true;\n    };\n\n    JC.TexturesManager.prototype.setPara = function(texture) {\n        var gl = this.gl;\n\n        texture.texture = gl.createTexture();\n\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n        \n        gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n        \n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.img);\n        \n        if(texture.isPowerOfTwo)gl.generateMipmap(gl.TEXTURE_2D);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\n        this.textures[texture.id] = texture;\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    JC.TexturesManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n\n\n\n\n    JC.WebGLBlendModeManager = function() {\n        this.currentBlendMode = 99999;\n    };\n\n    JC.WebGLBlendModeManager.prototype.constructor = JC.WebGLBlendModeManager;\n\n    JC.WebGLBlendModeManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    };\n\n    JC.WebGLBlendModeManager.prototype.setBlendMode = function(blendMode) {\n        if (this.currentBlendMode === blendMode) return false;\n\n        this.currentBlendMode = blendMode;\n\n        var blendModeWebGL = JC.blendModesWebGL[this.currentBlendMode];\n        \n        this.gl.blendEquation( this.gl.FUNC_ADD );\n        this.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);\n\n        return true;\n    };\n\n    JC.WebGLBlendModeManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n\n\n    JC.ShaderManager = function()\n    {\n\n        this.shaders = {};\n\n    };\n\n    JC.ShaderManager.prototype.constructor = JC.ShaderManager;\n\n    JC.ShaderManager.prototype.setContext = function(gl)\n    {\n        this.gl = gl;\n\n        // this shader is used for the default sprite rendering\n        this.shaders['sprite'] = new JC.SpriteShader(gl);\n\n        // this shader is used for the particle rendering\n        this.shaders['particle'] = new JC.PointShader(gl);\n\n        this.setShader('sprite');\n    };\n\n\n    JC.ShaderManager.prototype.setShader = function(type)\n    {\n        if(this._curShaderType === type)return false;\n        \n        this._curShaderType = type;\n\n        this.shader = this.shaders[type];\n\n        this.gl.useProgram(this.shader.program);\n\n        return true;\n    };\n\n    JC.ShaderManager.prototype.destroy = function()\n    {\n        this.gl = null;\n    };\n\n\n\n\n    JC.WebGLMaskManager = function() {};\n\n    JC.WebGLMaskManager.prototype.constructor = JC.WebGLMaskManager;\n\n    JC.WebGLMaskManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    };\n\n    JC.WebGLMaskManager.prototype.pushMask = function(maskData, renderSession) {\n        var gl = renderSession.gl;\n\n\n        gl.enable(gl.STENCIL_TEST);\n        gl.depthMask(false);\n        gl.colorMask(false, false, false, false);\n        gl.stencilFunc(gl.ALWAYS, 1, ~0);\n        gl.stencilOp(gl.KEEP, gl.REPLACE, gl.REPLACE);\n\n        // maskData.render();\n\n        gl.depthMask(true);\n        gl.colorMask(true, true, true, true);\n        gl.stencilFunc(gl.EQUAL, 1, ~0);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    };\n\n    JC.WebGLMaskManager.prototype.popMask = function() {\n        var gl = this.gl;\n        gl.disable(gl.STENCIL_TEST);\n    };\n\n    JC.WebGLMaskManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n\n\n    /**\n     * @author Mat Groves http://matgroves.com/ @Doormat23\n     */\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = JC;\n        }\n        exports.JC = JC;\n    } else if (typeof define !== 'undefined' && define.amd) {\n        define(JC);\n    } else {\n        root.JC = JC;\n    }\n\n})(this);\n"]}