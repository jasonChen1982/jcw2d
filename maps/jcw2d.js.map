{"version":3,"sources":["jcw2d.js","modules/utils.js","modules/event.js","modules/animation.js","modules/math/point.js","modules/math/matrix.js","modules/textures/baseTexture.js","modules/textures/texture.js","modules/textures/textureUvs.js","modules/display/display.js","modules/display/container.js","modules/sprite/sprite.js","modules/particles/particleContainer.js","modules/renderer/renderer.js","modules/renderer/manager/shaderManager.js","modules/renderer/shaders/shader.js","modules/renderer/shaders/spriteShader.js","modules/renderer/shaders/particleShader.js","modules/renderer/shaders/graphicsShader.js","modules/RAF.js","modules/const.js","modules/tween.js"],"names":["root","factory","exports","module","define","amd","JC","this","_rt","val","Object","prototype","toString","call","InteractionData","global","x","y","target","originalEvent","cancleBubble","ratio","type","Eventer","touchstarted","mouseDowned","listeners","Animate","opts","element","duration","living","onCompelete","onUpdate","infinity","alternate","ease","repeats","delay","progress","timeScale","paused","Transition","ATRS","from","ATRE","to","Animation","_keyframes","keys","_keyIndex","_direction","_keyConfig","keyConfig","configKey","MovieClip","animations","index","direction","frames","sy","sx","fillMode","fps","pt","nt","PathMotion","points","attachNormal","sDeg","tDeg","pDeg","Animator","start","animates","Point","Matrix","a","b","c","d","tx","ty","BaseTexture","source","scaleMode","width","height","realWidth","realHeight","CONST","SCALE_MODES","DEFAULT","hasLoaded","isLoading","resolution","premultipliedAlpha","imageUrl","isPowerOfTwo","mipmap","loadSource","Texture","baseTexture","frame","noFrame","math","Rectangle","_frame","valid","requiresUpdate","_uvs","on","onBaseTextureUpdated","once","onBaseTextureLoaded","TextureUvs","x0","y0","x1","y1","x2","y2","x3","y3","DisplayObject","_ready","visible","worldAlpha","alpha","scaleX","scaleY","skewX","skewY","rotation","rotationCache","_sr","_cr","pivotX","pivotY","mask","parent","worldTransform","event","passEvent","bound","Container","cds","Sprite","texture","anchor","_texture","_width","_height","tint","blendMode","BLEND_MODES","NORMAL","shader","cachedTint","ParticleContainer","maxSize","properties","batchSize","maxBatchSize","_properties","_maxSize","_batchSize","_buffers","_bufferToUpdate","interactiveChildren","setProperties","Renderer","view","options","i","DEFAULT_RENDER_OPTIONS","document","getElementById","projection","Float32Array","transparent","autoResize","blendModes","preserveDrawingBuffer","autoClear","_backgroundColor","_backgroundColorRgb","_backgroundColorString","backgroundColor","handleContextLost","bind","handleContextRestored","addEventListener","_contextOptions","antialias","stencil","drawCount","shaderManager","ShaderManager","blendModeManager","BlendModeManager","_createContext","_initContext","_mapGlModes","renderer","shaderType","currentShader","init","Shader","gl","vertexSrc","fragmentSrc","uniforms","attributes","Error","program","textureCount","MAX_TEXTURE_UNITS","getParameter","MAX_TEXTURE_IMAGE_UNITS","SpriteShader","uAlpha","value","uSampler","projectionMatrix","projectionVector","customUniforms","u","aVertexPosition","aTextureCoord","aColor","customAttributes","join","ParticleShader","aAlpha","aPositionCoord","aRotation","GraphicsShader","window","lastTime","androidUC","test","navigator","userAgent","vendors","length","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","RAF","requestAnimFrame","VERSION","PI_2","PI","RTD","DTR","ADD","MULTIPLY","SCREEN","DRAW_MODES","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","LINEAR","NEAREST","clearBeforeRender","SPRITE_BATCH_SIZE","UTILS","hex2rgb","hex","out","hex2string","substr","rgb2hex","rgb","getNextPowerOfTwo","number","result","sayHi","_saidHi","toLowerCase","indexOf","args","console","log","apply","isWebGLSupported","contextOptions","WebGLRenderingContext","canvas","createElement","getContext","getContextAttributes","e","sign","n","removeItems","arr","startIdx","removeCount","len","copyJSON","json","JSON","parse","stringify","isArray","ks","object","isObject","isNumber","isFunction","random","min","euclideanModulo","m","clamp","TextureCache","BaseTextureCache","TWEEN","easeBoth","t","extend","key","fn","push","off","cbs","splice","emit","ev","undefined","ears","nextPose","cache","pause","stop","cancle","create","constructor","update","snippet","pose","setVal","sc","config","interval","next","getFramePos","pos","cf","row","_textureW","lintRow","lintCol","mCol","mRow","playMovie","movie","format","isString","warn","end","This","defineProperty","get","getPoint","rotate","decomposeRotate","rT","l","slice","r","oP","oL","oR","p1","p2","xxxxx","fromTo","animate","keyFrames","clone","copy","p","set","equals","fromArray","array","toArray","transpose","newPos","applyInverse","translate","scale","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","identity","setTransform","sr","cr","cy","nsx","cx","IDENTITY","TEMP_MATRIX","naturalWidth","naturalHeight","utils","wasLoading","complete","_sourceLoaded","onload","onerror","src","fromImage","crossorigin","image","Image","crossOrigin","defineProperties","_updateUvs","fromCanvas","baseFrame","tw","th","clear","isVisible","vals","updateMe","wt","upAnimation","ctx","globalAlpha","getGlobalPos","cb","getBound","setBound","needless","regX","regY","ContainsPoint","px","py","ax","ay","bx","by","lup","depth","lx","addChilds","cd","arguments","removeChilds","updateTransform","updateChilds","render","save","renderMe","renderChilds","restore","noticeEvent","child","upEvent","hitTest","re","hitTestMe","abs","_onTextureUpdate","upTexture","_textureH","setObjectRenderer","plugins","sprite","getBounds","getLocalBounds","containsPoint","point","position","uvs","displayObjectUpdateTransform","children","renderable","particle","SystemRenderer","glContextId","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","resize","isContextLost","cacheParent","_tempDisplayObjectParent","clearColor","COLOR_BUFFER_BIT","renderDisplayObject","displayObject","renderWebGL","preventDefault","ONE","ONE_MINUS_SRC_ALPHA","DST_ALPHA","DST_COLOR","ONE_MINUS_SRC_COLOR","drawModes","style","maxAttibs","MAX_VERTEX_ATTRIBS","shaderPool","graphics","text","TextShader","setShader","useProgram","compile","cacheUniformLocations","cacheAttributeLocations","_location","getUniformLocation","getAttribLocation","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","error","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","syncUniform","uniform","il","location","uniform1i","uniform1f","uniform2f","uniform3f","uniform4f","z","w","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform1fv","uniform2fv","uniform3fv","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","_array","activeTexture","initSampler2D","bindTexture","TEXTURE_2D","syncUniforms","updateTexture","createTexture","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","generateMipmap","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","CLAMP_TO_EDGE","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","TextureShader"],"mappings":"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","file":"../src/jcw2d.js","sourcesContent":["(function (root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(function () {\n      return (root.JC = factory());\n    });\n  } else {\n    // Global Variables\n    root.JC = factory();\n  }\n}(this, function () {\n\n    var JC = window.JC||{};\n\n    (function() {\n        var lastTime = 0;\n        var androidUC = /(?=.*?uc)(?=.*?android)/i.test(window.navigator.userAgent);\n        var vendors = ['ms', 'moz', 'webkit', 'o'];\n        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n                window[vendors[x] + 'CancelRequestAnimationFrame'];\n        }\n    \n        if (!window.requestAnimationFrame||androidUC) {\n            window.requestAnimationFrame = function(callback) {\n                var currTime = new Date().getTime();\n                var timeToCall = Math.max(0, 20 - (currTime - lastTime));\n                var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                  timeToCall);\n                lastTime = currTime + timeToCall;\n                return id;\n            };\n        }\n    \n        if (!window.cancelAnimationFrame) {\n            window.cancelAnimationFrame = function(id) {\n                clearTimeout(id);\n            };\n        }\n    \n        window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n    })();\n\n    \n    JC.CONST = {\n        VERSION: '0.0.1',\n    \n        PI_2: Math.PI * 2,\n    \n        RTD: 180 / Math.PI,\n    \n        DTR: Math.PI / 180,\n    \n    \n        /**\n         *\n         * @static\n         * @constant\n         * @property {object} BLEND_MODES\n         * @property {number} BLEND_MODES.NORMAL\n         * @property {number} BLEND_MODES.ADD\n         * @property {number} BLEND_MODES.MULTIPLY\n         * @property {number} BLEND_MODES.SCREEN\n         */\n        BLEND_MODES: {\n            NORMAL:         0,\n            ADD:            1,\n            MULTIPLY:       2,\n            SCREEN:         3\n        },\n    \n        /**\n         *\n         * @static\n         * @constant\n         * @property {object} DRAW_MODES\n         * @property {number} DRAW_MODES.POINTS\n         * @property {number} DRAW_MODES.LINES\n         * @property {number} DRAW_MODES.LINE_LOOP\n         * @property {number} DRAW_MODES.LINE_STRIP\n         * @property {number} DRAW_MODES.TRIANGLES\n         * @property {number} DRAW_MODES.TRIANGLE_STRIP\n         * @property {number} DRAW_MODES.TRIANGLE_FAN\n         */\n        DRAW_MODES: {\n            POINTS:         0,\n            LINES:          1,\n            LINE_LOOP:      2,\n            LINE_STRIP:     3,\n            TRIANGLES:      4,\n            TRIANGLE_STRIP: 5,\n            TRIANGLE_FAN:   6\n        },\n    \n        /**\n         *\n         * @static\n         * @constant\n         * @property {object} SCALE_MODES\n         * @property {number} SCALE_MODES.DEFAULT=LINEAR\n         * @property {number} SCALE_MODES.LINEAR Smooth scaling\n         * @property {number} SCALE_MODES.NEAREST Pixelating scaling\n         */\n        SCALE_MODES: {\n            DEFAULT:    0,\n            LINEAR:     0,\n            NEAREST:    1\n        },\n    \n        DEFAULT_RENDER_OPTIONS: {\n            view: null,\n            resolution: 1,\n            antialias: false,\n            autoResize: false,\n            transparent: false,\n            backgroundColor: 0x000000,\n            clearBeforeRender: true,\n            preserveDrawingBuffer: false\n        },\n    \n        SPRITE_BATCH_SIZE: 2000 //nice balance between mobile and desktop machines\n    };\n\n    \n    /**\n     * 简单拷贝json对象\n     *\n     * @name copyJSON\n     * @memberof JC\n     * @property {JC.copyJSON}\n     */\n     \n    // JC.copyJSON = ;\n    \n    /**\n     * 将角度转化成弧度\n     *\n     * @name DTR\n     * @memberof JC\n     * @property {JC.DTR}\n     */\n    \n    // JC.DTR = Math.PI/180;\n    \n    \n    /**\n     * 是否为数组\n     *\n     * @name isArray\n     * @memberof JC\n     * @property {JC.isArray}\n     */\n    // JC.isArray = ;\n    \n    /**\n     * 是否为对象\n     *\n     * @name isObject\n     * @memberof JC\n     * @property {JC.isObject}\n     */\n    // JC.isObject = (function(){\n    //     var ks = _rt({});\n    //     return function(object){\n    //         return Object.prototype.toString.call(object) === ks;\n    //     };\n    // })();\n    \n    /**\n     * 是否为数字\n     *\n     * @name isNumber\n     * @memberof JC\n     * @property {JC.isNumber}\n     */\n    // JC.isNumber = (function(){\n    //     var ks = _rt(1);\n    //     return function(object){\n    //         return Object.prototype.toString.call(object) === ks;\n    //     };\n    // })();\n    \n    /**\n     * 是否为函数\n     *\n     * @name isFunction\n     * @memberof JC\n     * @property {JC.isFunction}\n     */\n    // JC.isFunction = (function(){\n    //     var ks = _rt(function(){});\n    //     return function(object){\n    //         return Object.prototype.toString.call(object) === ks;\n    //     };\n    // })();\n    \n    /**\n     * 强化的随机数\n     *\n     * @name random\n     * @memberof JC\n     * @property {JC.random}\n     */\n    \n    // JC.random = function(min, max){\n    //     if (JC.isArray(min))\n    //         return min[~~(Math.random() * min.length)];\n    //     if (!JC.isNumber(max))\n    //         max = min || 1, min = 0;\n    //     return min + Math.random() * (max - min);\n    // };\n    \n    \n    /**\n     * 阿基米德求模\n     *\n     * @name euclideanModulo\n     * @memberof JC\n     * @property {JC.euclideanModulo}\n     */\n    \n    // JC.euclideanModulo = function(n, m){\n    //     return ((n % m) + m) % m;\n    // };\n    \n    function _rt(val){\n        return Object.prototype.toString.call(val);\n    }\n    \n    JC.UTILS = {\n    \n        hex2rgb: function (hex, out)\n        {\n            out = out || [];\n    \n            out[0] = (hex >> 16 & 0xFF) / 255;\n            out[1] = (hex >> 8 & 0xFF) / 255;\n            out[2] = (hex & 0xFF) / 255;\n    \n            return out;\n        },\n    \n        hex2string: function (hex)\n        {\n            hex = hex.toString(16);\n            hex = '000000'.substr(0, 6 - hex.length) + hex;\n    \n            return '#' + hex;\n        },\n    \n        rgb2hex: function (rgb)\n        {\n            return ((rgb[0]*255 << 16) + (rgb[1]*255 << 8) + rgb[2]*255);\n        },\n    \n        getNextPowerOfTwo: function (number)\n        {\n            // see: http://en.wikipedia.org/wiki/Power_of_two#Fast_algorithm_to_check_if_a_positive_number_is_a_power_of_two\n            if (number > 0 && (number & (number - 1)) === 0)\n            {\n                return number;\n            }\n            else\n            {\n                var result = 1;\n    \n                while (result < number)\n                {\n                    result <<= 1;\n                }\n    \n                return result;\n            }\n        },\n    \n        isPowerOfTwo: function (width, height)\n        {\n            return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n        },\n    \n        sayHi: function (type)\n        {\n            if (this._saidHi)\n            {\n                return;\n            }\n    \n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                var args = [\n                    '\\n %c %c %c jcw2d.js ' + JC.CONST.VERSION + ' - ✰ ' + type + ' ✰  %c ' + ' %c ' + ' http://www.jason82.com/  %c %c ♥%c♥%c♥ \\n\\n',\n                    'background: #ff66a5; padding:5px 0;',\n                    'background: #ff66a5; padding:5px 0;',\n                    'color: #ff66a5; background: #030307; padding:5px 0;',\n                    'background: #ff66a5; padding:5px 0;',\n                    'background: #ffc3dc; padding:5px 0;',\n                    'background: #ff66a5; padding:5px 0;',\n                    'color: #ff2424; background: #fff; padding:5px 0;',\n                    'color: #ff2424; background: #fff; padding:5px 0;',\n                    'color: #ff2424; background: #fff; padding:5px 0;'\n                ];\n    \n                window.console.log.apply(console, args); //jshint ignore:line\n            }\n            else if (window.console)\n            {\n                window.console.log('jcw2d.js ' + JC.CONST.VERSION + ' - ' + type + ' - http://www.jason82.com/'); //jshint ignore:line\n            }\n    \n            this._saidHi = true;\n        },\n    \n        isWebGLSupported: function ()\n        {\n            var contextOptions = { stencil: true };\n            try\n            {\n                if (!window.WebGLRenderingContext)\n                {\n                    return false;\n                }\n    \n                var canvas = document.createElement('canvas'),\n                    gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);\n    \n                return !!(gl && gl.getContextAttributes().stencil);\n            }\n            catch (e)\n            {\n                return false;\n            }\n        },\n    \n        sign: function (n)\n        {\n            return n ? (n < 0 ? -1 : 1) : 0;\n        },\n    \n        removeItems: function (arr, startIdx, removeCount)\n        {\n            var length = arr.length;\n    \n            if (startIdx >= length || removeCount === 0)\n            {\n                return;\n            }\n    \n            removeCount = (startIdx+removeCount > length ? length-startIdx : removeCount);\n            for (var i = startIdx, len = length-removeCount; i < len; ++i)\n            {\n                arr[i] = arr[i + removeCount];\n            }\n    \n            arr.length = len;\n        },\n    \n        copyJSON: function(json){\n            return JSON.parse(JSON.stringify(json));\n        },\n    \n        isArray: (function(){\n            var ks = _rt('s');\n            return function(object){\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        isObject: (function(){\n            var ks = _rt({});\n            return function(object){\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        isNumber: (function(){\n            var ks = _rt(1);\n            return function(object){\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        /**\n         * 是否为函数\n         *\n         * @name isFunction\n         * @memberof JC\n         * @property {JC.isFunction}\n         */\n        isFunction: (function(){\n            var ks = _rt(function(){});\n            return function(object){\n                return Object.prototype.toString.call(object) === ks;\n            };\n        })(),\n    \n        /**\n         * 强化的随机数\n         *\n         * @name random\n         * @memberof JC\n         * @property {JC.random}\n         */\n        random: function(min, max){\n            if (this.isArray(min))\n                return min[~~(Math.random() * min.length)];\n            if (!this.isNumber(max))\n                max = min || 1, min = 0;\n            return min + Math.random() * (max - min);\n        },\n    \n        /**\n         * 阿基米德求模\n         *\n         * @name euclideanModulo\n         * @memberof JC\n         * @property {JC.euclideanModulo}\n         */\n        euclideanModulo: function(n, m){\n            return ((n % m) + m) % m;\n        },\n        \n        clamp: function(x, a, b) {\n            return (x < a) ? a : ((x > b) ? b : x);\n        },\n    \n        TextureCache: {},\n    \n        BaseTextureCache: {}\n    \n    };\n    \n    \n    \n\n    JC.TWEEN = {\n        easeBoth: function(t, b, c, d) { //加速减速曲线\n            if ((t /= d / 2) < 1) {\n                return c / 2 * t * t + b;\n            }\n            return -c / 2 * ((--t) * (t - 2) - 1) + b;\n        },\n        extend: function(opts) {\n            if (!opts) return;\n            for (var key in opts) {\n                if (key !== 'extend' && opts[key]) this[key] = opts[key];\n            }\n        }\n    };\n    \n\n    \n    /**\n     * jcw2d的事件消息对象的类\n     *\n     * @class JC.InteractionData\n     * @constructor\n     */\n    function InteractionData(){\n        /**\n         * 转换到canvas坐标系统的事件触发点\n         *\n         * @property global\n         * @type Object\n         */\n        this.global = {x:-100000,y:-100000};\n    \n        /**\n         * 事件源\n         *\n         * @property target\n         * @type JC.Container\n         */\n        this.target = null;\n    \n        /**\n         * 浏览器的原始事件对象\n         *\n         * @property originalEvent\n         * @type Event\n         */\n        this.originalEvent = null;\n    \n        /**\n         * 在canvas内阻止事件冒泡\n         *\n         * @property cancleBubble\n         * @type Boolean\n         */\n        this.cancleBubble = false;\n    \n        /**\n         * canvas视窗和页面坐标的兑换比例\n         *\n         * @property ratio\n         * @type Number\n         */\n        this.ratio = 1;\n    \n        /**\n         * 事件类型\n         *\n         * @property type\n         * @type String\n         */\n        this.type = '';\n    }\n    JC.InteractionData = InteractionData;\n    \n    \n    \n    /**\n     * jcw2d的事件对象的类\n     *\n     * @class JC.Eventer\n     * @constructor Eventer\n     * @memberof JC\n     */\n    function Eventer(){\n        this.touchstarted = false;\n        this.mouseDowned = false;\n        this.listeners = {};\n    }\n    /**\n     * 事件对象的事件绑定函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 回调函数\n     * @private\n     */\n    Eventer.prototype.on = function(type,fn){\n        this.listeners[type] = this.listeners[type]||[];\n        this.listeners[type].push(fn);\n    };\n    /**\n     * 事件对象的事件解绑函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 注册时回调函数的引用\n     * @private\n     */\n    Eventer.prototype.off = function(type,fn){\n        if (this.listeners[type]) {\n            var i = this.listeners[type].length;\n            if(fn){\n                while (i--) {\n                    if (cbs[type][i] === fn) {\n                        cbs[type].splice(i, 1);\n                    }\n                }\n            }else{\n                cbs[type].length = 0;\n            }\n        }\n    };\n    /**\n     * 事件对象的触发事件函数\n     *\n     * @param ev {JC.InteractionData} 事件类型\n     * @private\n     */\n    Eventer.prototype.emit = function(ev){\n        if ( this.listeners === undefined ) return;\n        var ears = this.listeners;\n        var cbs = ears[ ev.type ];\n        if ( cbs !== undefined ) {\n            var length = cbs.length;\n            var i;\n            for ( i = 0; i < length; i ++ ) {\n                cbs[ i ].call( this, ev );\n            }\n        }\n    };\n    JC.Eventer = Eventer;\n\n    \n    /**\n     * 动画对象的基本类型\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画配置信息\n     */\n    \n    function Animate(opts){\n        this.element = opts.element||{};\n        this.duration = opts.duration||300;\n        this.living = true;\n    \n        this.onCompelete = opts.onCompelete||null;\n        this.onUpdate = opts.onUpdate||null;\n    \n        this.infinity = opts.infinity||false;\n        this.alternate = opts.alternate||false;\n        this.ease = opts.ease||'easeBoth';\n        this.repeats = opts.repeats||0;\n        this.delay = opts.delay||0;\n        this.progress = 0-this.delay;\n    \n        this.timeScale = opts.timeScale||1;\n    \n        this.paused = false;\n    }\n    JC.Animate = Animate;\n    Animate.prototype.nextPose = function(){\n        var cache = {};\n        for(var i in this.ATRE){\n            cache[i] = JC.TWEEN[this.ease]( this.progress , this.ATRS[i] , this.ATRE[i] - this.ATRS[i] , this.duration );\n            if(this.element[i]!==undefined)this.element[i] = cache[i];\n        }\n        return cache;//this.onUpdate\n    };\n    Animate.prototype.pause = function(){\n        this.paused = true;\n    };\n    Animate.prototype.start = function(){\n        this.paused = false;\n    };\n    Animate.prototype.stop = function(){\n        this.progress = this.duration;\n    };\n    Animate.prototype.cancle = function(){\n        this.living = false;\n    };\n    \n    \n    /**\n     * Transition类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画所具备的特性\n     */\n    \n    function Transition(opts){\n        JC.Animate.call(this,opts);\n    \n        this.ATRS = opts.from;\n        this.ATRE = opts.to;\n    }\n    JC.Transition = Transition;\n    Transition.prototype = Object.create( JC.Animate.prototype );\n    Transition.prototype.constructor = JC.Transition;\n    Transition.prototype.update = function(snippet){\n        if(this.paused||!this.living)return;\n        this.progress += this.timeScale*snippet;\n    \n        if(this.progress < this.duration){\n            if(this.progress<0)return;\n            var pose = this.nextPose();\n            this.onUpdate&&this.onUpdate(pose,this.progress/this.duration);\n        }else{\n            this.element.setVal(this.ATRE);\n            this.onUpdate&&this.onUpdate(this.ATRE,1);\n            if(this.repeats>0||this.infinity){\n                this.repeats>0&&--this.repeats;\n                this.progress = 0;\n                if(this.alternate){\n                    var sc = JC.copyJSON(this.ATRS);\n                    this.ATRS = JC.copyJSON(this.ATRE);\n                    this.ATRE = sc;\n                }else{\n                    this.element.setVal(this.ATRS);\n                }\n            }else{\n                this.living = false;\n                this.onCompelete&&this.onCompelete();\n            }\n        }\n    };\n    \n    \n    /**\n     * Animation类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画配置信息\n     */\n    function Animation(opts){\n        JC.Animate.call(this,opts);\n    \n        this._keyframes = opts.keys;\n        this._keyIndex = 0;\n        this._direction = 1;\n        this._keyConfig = opts.keyConfig;\n    \n        this.configKey();\n    }\n    JC.Animation = Animation;\n    Animation.prototype = Object.create( JC.Animate.prototype );\n    Animation.prototype.constructor = JC.Animation;\n    Animation.prototype.configKey = function(){\n        this.ATRS = this._keyframes[this._keyIndex];\n        this._keyIndex += this._direction;\n        this.ATRE = this._keyframes[this._keyIndex];\n        var config = this._keyConfig[Math.min(this._keyIndex,this._keyIndex-this._direction)]||{};\n        this.ease = config.ease||this.ease;\n        this.duration = config.duration||this.duration;\n        this.progress = 0;\n    };\n    Animation.prototype.update = function(snippet){\n        if(this.paused||!this.living)return;\n        this.progress += this.timeScale*snippet;\n    \n        if(this.progress < this.duration){\n            if(this.progress<0)return;\n            var pose = this.nextPose();\n            this.onUpdate&&this.onUpdate(pose,this.progress/this.duration,this._keyIndex);\n        }else{\n            this.element.setVal(this.ATRE);\n            this.onUpdate&&this.onUpdate(this.ATRE,1,this._keyIndex);\n            if(this._keyIndex<this._keyframes.length-1&&this._keyIndex>0){\n                this.configKey();\n            }else{\n                if(this.repeats>0||this.infinity){\n                    this.repeats>0&&--this.repeats;\n                    if(this.alternate){\n                        this._direction *= -1;\n                    }else{\n                        this._keyIndex = 0;\n                    }\n                    this.configKey();\n                }else{\n                    this.living = false;\n                    this.onCompelete&&this.onCompelete();\n                }\n            }\n        }\n    };\n    \n    \n    /**\n     * MovieClip类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [element] {object} 动画对象 内部传入\n     * @param [opts] {object} 动画配置信息 内部传入\n     */\n    function MovieClip(element, opts){\n        this.element = element;\n        this.living = false;\n    \n        this.onCompelete = null;\n        // this.onUpdate = null;\n    \n        this.infinity = false;\n        this.alternate = false;\n        this.repeats = 0;\n    \n        this.animations = opts.animations||{};\n    \n        this.index = 0;\n        this.direction = 1;\n        this.frames = [];\n        this.sy = opts.sy||0;\n        this.sx = opts.sx||0;\n        this.fillMode = 0;\n        this.fps = 16;\n    \n        this.paused = false;\n    \n        this.pt = 0;\n        this.nt = 0;\n    }\n    JC.MovieClip = MovieClip;\n    MovieClip.prototype.update = function(snippet){\n        if(this.paused||!this.living)return;\n        this.nt += snippet;\n        if(this.nt-this.pt<this.interval)return;\n        this.pt = this.nt;\n        var i = this.index + this.direction;\n        if(i<this.frames.length&&i>=0){\n            this.index = i;\n            // Do you need this handler???\n            // this.onUpdate&&this.onUpdate(this.index);\n        }else{\n            if(this.repeats>0||this.infinity){\n                this.repeats>0&&--this.repeats;\n                if(this.alternate){\n                    this.direction *= -1;\n                    this.index += this.direction;\n                }else{\n                    this.direction = 1;\n                    this.index = 0;\n                }\n                // Do you need this handler???\n                // this.onUpdate&&this.onUpdate(this.index);\n            }else{\n                this.living = false;\n                this.index = this.fillMode;\n                this.onCompelete&&this.onCompelete();\n                this.next&&this.next();\n            }\n        }\n    };\n    MovieClip.prototype.getFramePos = function(){\n        var pos = {\n                x: this.sx,\n                y: this.sy\n            };\n        var cf = this.frames[this.index];\n        if(cf>0){\n            var row = this.element._textureW/this.element.width >> 0;\n            var lintRow = this.sx/this.element.width >> 0;\n            var lintCol = this.sy/this.element.height >> 0;\n            var mCol = lintCol+(lintRow+cf)/row >> 0;\n            var mRow = (lintRow+cf)%row;\n            pos.x = mRow*this.element.width;\n            pos.y = mCol*this.element.height;\n        }\n        return pos;\n    };\n    MovieClip.prototype.playMovie = function(opts){\n        this.next = null;\n        var movie = this.format(opts.movie);\n        if(!JC.isArray(movie))return;\n        this.frames = movie;\n        this.index = 0;\n        this.direction = 1;\n        this.fillMode = opts.fillMode||0;\n        this.fps = opts.fps||this.fps;\n        this.infinity = opts.infinity||false;\n        this.alternate = opts.alternate||false;\n        this.repeats = opts.repeats||0;\n        this.living = true;\n        this.onCompelete = opts.onCompelete||null;\n    };\n    MovieClip.prototype.format = function(movie){\n        if(JC.isString(movie)){\n            var config = this.animations[movie];\n            if(config){\n                return this.format(config);\n            }else{\n                console.warn(\n                '%c JC.MovieClip warn %c: you didn\\`t config %c'+movie+'%c in animations ',\n                'color: #f98165; background: #80a89e',\n                'color: #80a89e; background: #cad9d5;',\n                'color: #f98165; background: #cad9d5',\n                'color: #80a89e; background: #cad9d5'\n                );\n                return false;\n            }\n        }else if(JC.isArray(movie)){\n            return movie;\n        }else if(JC.isObject(movie)){\n            var arr = [];\n            for(var i=movie.start;i<=movie.end;i++){\n                arr.push(i);\n            }\n            if(movie.next&&this.animations[movie.next]){\n                var This = this;\n                this.next = function(){\n                    This.playMovie({\n                        movie: this.animations[movie.next],\n                        infinity: true\n                    });\n                };\n            }\n            return arr;\n        }\n    };\n    MovieClip.prototype.pause = function(){\n        this.paused = true;\n    };\n    MovieClip.prototype.start = function(){\n        this.paused = false;\n    };\n    MovieClip.prototype.cancle = function(){\n        this.living = false;\n    };\n    Object.defineProperty(MovieClip.prototype, 'interval', {\n        get: function() {\n            return this.fps>0?1000/this.fps>>0:16;\n        }\n    });\n    \n    \n    /**\n     * Transition类型动画对象\n     *\n     * @class\n     * @memberof JC\n     * @param [opts] {object} 动画所具备的特性\n     * @param [opts] {object} 动画配置信息\n     */\n    \n    function PathMotion(opts){\n        JC.Animate.call(this,opts);\n    \n        this.points = opts.points;\n        this.attachNormal = opts.attachNormal||false;\n        this.sDeg = false;\n        this.tDeg = 0;\n        this.pDeg = 0;\n    }\n    JC.PathMotion = PathMotion;\n    PathMotion.prototype = Object.create( JC.Animate.prototype );\n    PathMotion.prototype.constructor = JC.PathMotion;\n    PathMotion.prototype.update = function(snippet){\n        if(this.paused||!this.living)return;\n        this.progress += this.timeScale*snippet;\n    \n        if(this.progress < this.duration){\n            if(this.progress<0)return;\n            var pose = this.nextPose();\n            this.onUpdate&&this.onUpdate(pose,this.progress/this.duration);\n        }else{\n            this.element.setVal(this.ATRE);\n            this.onUpdate&&this.onUpdate(this.ATRE,1);\n            if(this.repeats>0||this.infinity){\n                this.repeats>0&&--this.repeats;\n                this.progress = 0;\n                if(this.alternate){\n                    var sc = JC.copyJSON(this.ATRS);\n                    this.ATRS = JC.copyJSON(this.ATRE);\n                    this.ATRE = sc;\n                }else{\n                    this.element.setVal(this.ATRS);\n                }\n            }else{\n                this.living = false;\n                this.onCompelete&&this.onCompelete();\n            }\n        }\n    };\n    PathMotion.prototype.nextPose = function(){\n        var cache = {};\n        // for(var i in this.ATRE){\n        //     cache[i] = JC.TWEEN[this.ease]( this.progress , this.ATRS[i] , this.ATRE[i] - this.ATRS[i] , this.duration );\n        //     if(this.element[i]!==undefined)this.element[i] = cache[i];\n        // }\n        var t = JC.TWEEN[this.ease]( this.progress , 0 , 1 , this.duration );\n        var pos = this.getPoint(t,this.points);\n        cache.x = pos.x;\n        cache.y = pos.y;\n        // cache.y = pos.y;\n        if(this.attachNormal){\n            cache.rotate = this.decomposeRotate(t);\n        }\n        return cache;//this.onUpdate\n    };\n    PathMotion.prototype.getPoint = function(t, points) {\n        var a = points,\n            len = a.length,\n            rT = 1 - t,\n            l = a.slice(0, len - 1),\n            r = a.slice(1),\n            oP = {};\n        if (len > 3) {\n            var oL = this.getPoint(t, l),\n                oR = this.getPoint(t, r);\n            oP.x = rT * oL.x + t * oR.x;\n            oP.y = rT * oL.y + t * oR.y;\n            // oP.z = rT * oL.z + t * oR.z;\n            return oP;\n        } else {\n            oP.x = rT * rT * points[0].x + 2 * t * rT * points[1].x + t * t * points[2].x;\n            oP.y = rT * rT * points[0].y + 2 * t * rT * points[1].y + t * t * points[2].y;\n            // oP.z = rT * rT * points[0].z + 2 * t * rT * points[1].z + t * t * points[2].z;\n            return oP;\n        }\n    };\n    PathMotion.prototype.decomposeRotate = function(t) {\n        var p1 = this.getPoint(t,this.points);\n        var p2 = this.getPoint(t+0.01,this.points);\n        var deg = p1.xxxxx+p2.x;\n    };\n    \n    /**\n     * Animator类型动画对象\n     *\n     * @class\n     * @memberof JC\n     */\n    function Animator(){\n        this.start = false;\n        this.animates = [];\n    }\n    JC.Animator = Animator;\n    Animator.prototype.update = function(snippet){\n        for(var i=0;i<this.animates.length;i++){\n            if(!this.animates[i].living)this.animates.splice(i,1);\n            this.animates[i]&&this.animates[i].update(snippet);\n        }\n    };\n    Animator.prototype.fromTo = function(opts){\n        var animate = new JC.Transition(opts);\n        this.animates.push(animate);\n        return animate;\n    };\n    Animator.prototype.keyFrames = function(opts){\n        var animate = new JC.Animation(opts);\n        this.animates.push(animate);\n        return animate;\n    };\n    \n    \n    \n    \n    \n    \n    \n    \n\n    /**\n     * The Point object represents a location in a two-dimensional coordinate system, where x represents\n     * the horizontal axis and y represents the vertical axis.\n     *\n     * @class\n     * @memberof PIXI\n     * @param [x=0] {number} position of the point on the x axis\n     * @param [y=0] {number} position of the point on the y axis\n     */\n    function Point(x, y)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x || 0;\n    \n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y || 0;\n    }\n    \n    JC.Point = Point;\n    Point.prototype.constructor = JC.Point;\n    \n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    Point.prototype.clone = function ()\n    {\n        return new Point(this.x, this.y);\n    };\n    \n    /**\n     * Copies x and y from the given point\n     *\n     * @param p {PIXI.Point}\n     */\n    Point.prototype.copy = function (p) {\n        this.set(p.x, p.y);\n    };\n    \n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param p {PIXI.Point}\n     * @returns {boolean}\n     */\n    Point.prototype.equals = function (p) {\n        return (p.x === this.x) && (p.y === this.y);\n    };\n    \n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param [x=0] {number} position of the point on the x axis\n     * @param [y=0] {number} position of the point on the y axis\n     */\n    Point.prototype.set = function (x, y)\n    {\n        this.x = x || 0;\n        this.y = y || ( (y !== 0) ? this.x : 0 ) ;\n    };\n    \n    \n    /**\n     * 矩阵对象，用来描述和记录对象的tansform 状态信息\n     *\n     * @class\n     * @memberof JC\n     */\n    function Matrix(){\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n    }\n    JC.Matrix = Matrix;\n    Matrix.prototype.constructor = JC.Matrix;\n    \n    /**\n     * 从数组设置一个矩阵\n     *\n     * @param array {number[]}\n     */\n    Matrix.prototype.fromArray = function(array){\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    };\n    \n    /**\n     * 将对象的数据以数组的形式导出\n     *\n     * @param transpose {boolean} 是否对矩阵进行转置\n     * @return {number[]} 返回数组\n     */\n    Matrix.prototype.toArray = function(transpose){\n        if(!this.array) this.array = new JC.Float32Array(9);\n        var array = this.array;\n    \n        if(transpose){\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }else{\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n        return array;\n    };\n    \n    /**\n     * 将坐标点与矩阵左乘\n     *\n     * @param pos {object} 原始点\n     * @param newPos {object} 变换之后的点\n     * @return {object} 返回数组\n     */\n    Matrix.prototype.apply = function(pos, newPos){\n        newPos = newPos || {};\n        newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n        newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n        return newPos;\n    };\n    /**\n     * 将坐标点与转置矩阵左乘\n     *\n     * @param pos {object} 原始点\n     * @param newPos {object} 变换之后的点\n     * @return {object} 变换之后的点\n     */\n    Matrix.prototype.applyInverse = function(pos, newPos){\n        var id = 1 / (this.a * this.d + this.c * -this.b);\n        newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n        newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n        return newPos;\n    };\n    /**\n     * 位移操作\n     *\n     * @return {this} \n     */\n    Matrix.prototype.translate = function(x, y){\n        this.tx += x;\n        this.ty += y;\n        return this;\n    };\n    /**\n     * 缩放操作\n     *\n     * @return {this} \n     */\n    Matrix.prototype.scale = function(x, y){\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n        return this;\n    };\n    /**\n     * 旋转操作\n     *\n     * @return {this} \n     */\n    Matrix.prototype.rotate = function(angle){\n        var cos = Math.cos( angle );\n        var sin = Math.sin( angle );\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n        this.a = a1 * cos-this.b * sin;\n        this.b = a1 * sin+this.b * cos;\n        this.c = c1 * cos-this.d * sin;\n        this.d = c1 * sin+this.d * cos;\n        this.tx = tx1 * cos - this.ty * sin;\n        this.ty = tx1 * sin + this.ty * cos;\n        return this;\n    };\n    /**\n     * 矩阵相乘\n     *\n     * @return {this} \n     */\n    Matrix.prototype.append = function(matrix){\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        this.a  = matrix.a * a1 + matrix.b * c1;\n        this.b  = matrix.a * b1 + matrix.b * d1;\n        this.c  = matrix.c * a1 + matrix.d * c1;\n        this.d  = matrix.c * b1 + matrix.d * d1;\n        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n        return this;\n    };\n    /**\n     * 单位矩阵\n     *\n     * @return {this} \n     */\n    Matrix.prototype.identity = function(){\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n        return this;\n    };\n    /**\n     * 快速设置矩阵各个分量\n     *\n     * @return {this} \n     */\n    Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY)\n    {\n        var a, b, c, d, sr, cr, cy, sy, nsx, cx;\n    \n        sr  = Math.sin(rotation);\n        cr  = Math.cos(rotation);\n        cy  = Math.cos(skewY);\n        sy  = Math.sin(skewY);\n        nsx = -Math.sin(skewX);\n        cx  =  Math.cos(skewX);\n    \n        a  =  cr * scaleX;\n        b  =  sr * scaleX;\n        c  = -sr * scaleY;\n        d  =  cr * scaleY;\n    \n        this.a  = cy * a + sy * c;\n        this.b  = cy * b + sy * d;\n        this.c  = nsx * a + cx * c;\n        this.d  = nsx * b + cx * d;\n    \n        this.tx = x + ( pivotX * a + pivotY * c );\n        this.ty = y + ( pivotX * b + pivotY * d );\n    \n        return this;\n    };\n    JC.IDENTITY = new Matrix();\n    JC.TEMP_MATRIX = new Matrix();\n    \n\n    JC.BaseTextureCache = {};\n    function BaseTexture(source, scaleMode) {\n        JC.Eventer.call(this);\n    \n        this.width = 100;\n    \n        this.height = 100;\n    \n        this.realWidth = 100;\n    \n        this.realHeight = 100;\n    \n        this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;\n    \n        this.hasLoaded = false;\n    \n        this.isLoading = false;\n    \n        this.source = null; // set in loadSource, if at all\n    \n        this.resolution = 1;\n    \n        this.premultipliedAlpha = true;\n    \n        this.imageUrl = null;\n    \n        this.isPowerOfTwo = false;\n    \n        this.mipmap = false;\n    \n        // this._glTextures = {};\n    \n        // if no source passed don't try to load\n        if (source) {\n            this.loadSource(source);\n        }\n    \n    }\n    \n    BaseTexture.prototype = Object.create(JC.Eventer.prototype);\n    BaseTexture.prototype.constructor = BaseTexture;\n    \n    BaseTexture.prototype.update = function() {\n        this.realWidth = this.source.naturalWidth || this.source.width;\n        this.realHeight = this.source.naturalHeight || this.source.height;\n    \n        this.width = this.realWidth / this.resolution;\n        this.height = this.realHeight / this.resolution;\n    \n        this.isPowerOfTwo = utils.isPowerOfTwo(this.realWidth, this.realHeight);\n    \n        this.emit({ type: 'update' });\n    };\n    \n    BaseTexture.prototype.loadSource = function(source) {\n        var wasLoading = this.isLoading;\n        this.hasLoaded = false;\n        this.isLoading = false;\n    \n        this.source = source;\n    \n        if ((this.source.complete || this.source.getContext) && this.source.width && this.source.height) {\n            this._sourceLoaded();\n        } else if (!source.getContext) {\n            this.isLoading = true;\n    \n            var This = this;\n    \n            source.onload = function() {\n                source.onload = null;\n                source.onerror = null;\n    \n                This.isLoading = false;\n                This._sourceLoaded();\n                This.emit({ type: 'loaded' });\n            };\n    \n            source.onerror = function() {\n                source.onload = null;\n                source.onerror = null;\n    \n                This.isLoading = false;\n                This.emit({ type: 'error' });\n            };\n    \n            if (source.complete && source.src) {\n                this.isLoading = false;\n    \n                source.onload = null;\n                source.onerror = null;\n    \n                if (source.width && source.height) {\n                    this._sourceLoaded();\n    \n                    // If any previous subscribers possible\n                    if (wasLoading) {\n                        this.emit({ type: 'loaded' });\n                    }\n                } else {\n                    // If any previous subscribers possible\n                    if (wasLoading) {\n                        this.emit({ type: 'error' });\n                    }\n                }\n            }\n        }\n    };\n    \n    BaseTexture.prototype._sourceLoaded = function() {\n        this.hasLoaded = true;\n        this.update();\n    };\n    BaseTexture.fromImage = function (imageUrl, crossorigin, scaleMode)\n    {\n        var baseTexture = JC.BaseTextureCache[imageUrl];\n    \n        if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0)\n        {\n            crossorigin = true;\n        }\n    \n        if (!baseTexture)\n        {\n            var image = new Image();\n            if (crossorigin)\n            {\n                image.crossOrigin = '';\n            }\n    \n            baseTexture = new BaseTexture(image, scaleMode);\n            baseTexture.imageUrl = imageUrl;\n    \n            image.src = imageUrl;\n    \n            JC.BaseTextureCache[imageUrl] = baseTexture;\n    \n        }\n    \n        return baseTexture;\n    };\n    \n    function Texture(baseTexture, frame) {\n        JC.Eventer.call(this);\n    \n        this.noFrame = false;\n    \n        if (!frame) {\n            this.noFrame = true;\n            frame = new math.Rectangle(0, 0, 1, 1);\n        }\n    \n        if (baseTexture instanceof Texture) {\n            baseTexture = baseTexture.baseTexture;\n        }\n    \n        this.baseTexture = baseTexture;\n    \n        this._frame = frame;\n    \n        this.valid = false;\n    \n        this.requiresUpdate = false;\n    \n        this._uvs = null;\n    \n        this.width = 0;\n    \n        this.height = 0;\n    \n        if (baseTexture.hasLoaded) {\n            if (this.noFrame) {\n                frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n    \n                // if there is no frame we should monitor for any base texture changes..\n                baseTexture.on('update', this.onBaseTextureUpdated, this);\n            }\n            this.frame = frame;\n        } else {\n            baseTexture.once('loaded', this.onBaseTextureLoaded, this);\n        }\n    \n    }\n    \n    Texture.prototype = Object.create(JC.Eventer.prototype);\n    Texture.prototype.constructor = Texture;\n    \n    Object.defineProperties(Texture.prototype, {\n        frame: {\n            get: function() {\n                return this._frame;\n            },\n            set: function(frame) {\n                this._frame = frame;\n    \n                this.noFrame = false;\n    \n                this.width = frame.width;\n                this.height = frame.height;\n    \n                this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;\n    \n                if (this.valid) {\n                    this._updateUvs();\n                }\n            }\n        }\n    });\n    \n    Texture.prototype.update = function() {\n        this.baseTexture.update();\n    };\n    \n    Texture.prototype.onBaseTextureLoaded = function(baseTexture) {\n        // TODO this code looks confusing.. boo to abusing getters and setterss!\n        if (this.noFrame) {\n            this.frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n        } else {\n            this.frame = this._frame;\n        }\n    \n        this.emit('update', this);\n    };\n    \n    Texture.prototype.onBaseTextureUpdated = function(baseTexture) {\n        this._frame.width = baseTexture.width;\n        this._frame.height = baseTexture.height;\n    \n        this.emit('update', this);\n    };\n    \n    Texture.prototype._updateUvs = function() {\n        if (!this._uvs) {\n            this._uvs = new TextureUvs();\n        }\n        this._uvs.set(this.frame, this.baseTexture);\n    };\n    \n    Texture.fromImage = function(imageUrl, crossorigin, scaleMode) {\n        var texture = JC.UTILS.TextureCache[imageUrl];\n    \n        if (!texture) {\n            texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin, scaleMode));\n            JC.UTILS.TextureCache[imageUrl] = texture;\n        }\n    \n        return texture;\n    };\n    \n    Texture.fromCanvas = function(canvas, scaleMode) {\n        return new Texture(BaseTexture.fromCanvas(canvas, scaleMode));\n    };\n    \n    \n    function TextureUvs() {\n        this.x0 = 0;\n        this.y0 = 0;\n    \n        this.x1 = 1;\n        this.y1 = 0;\n    \n        this.x2 = 1;\n        this.y2 = 1;\n    \n        this.x3 = 0;\n        this.y3 = 1;\n    }\n    \n    TextureUvs.prototype.set = function(frame, baseFrame) {\n        var tw = baseFrame.width;\n        var th = baseFrame.height;\n    \n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n    \n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n    \n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n    \n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n    };\n    \n\n    \n    /**\n     * 显示对象的基类\n     *\n     * @class\n     * @memberof JC\n     */\n    function DisplayObject(){\n        this._ready = true;\n    \n        this.visible = true;\n        this.worldAlpha = 1;\n        this.alpha = 1;\n    \n        this.scaleX = 1;\n        this.scaleY = 1;\n    \n        this.skewX = 0;\n        this.skewY = 0;\n    \n        this.rotation = 0;\n        this.rotationCache = 0;\n        this._sr = 0;\n        this._cr = 1;\n        \n        this.x = 0;\n        this.y = 0;\n        \n        this.pivotX = 0;\n        this.pivotY = 0;\n    \n        this.mask = null;\n    \n        this.parent = null;\n        this.worldTransform = new JC.Matrix();\n    \n        this.event = new JC.Eventer();\n        this.passEvent = false;\n        this.bound = [];\n    \n    \n        this.Animator = new JC.Animator();\n    }\n    JC.DisplayObject = DisplayObject;\n    DisplayObject.prototype.constructor = JC.DisplayObject;\n    \n    Object.defineProperty(DisplayObject.prototype, 'scale', {\n        get: function() {\n            return this.scaleX;\n        },\n        set: function(scale) {\n            this.scaleX = this.scaleY = scale;\n        }\n    });\n    \n    /**\n     * fromTo动画，指定动画的启始位置和结束位置\n     *\n     * ```js\n     * // 扩展缓动函数，缓动函数库详见目录下的util/tween.js\n     * JC.TWEEN.extend({    \n     *    bounceOut: function(t, b, c, d){\n     *        if ((t/=d) < (1/2.75)) {\n     *            return c*(7.5625*t*t) + b;\n     *        } else if (t < (2/2.75)) {\n     *            return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;\n     *        } else if (t < (2.5/2.75)) {\n     *            return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;\n     *        }\n     *        return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;\n     *    }\n     * });\n     * var dispayObj = new JC.Text('Hello JC','bold 36px Arial','#c32361');\n     * dispayObj.fromTo({\n     *   from: {x: 100},\n     *   to: {x: 200},\n     *   ease: 'bounceOut', // 执行动画使用的缓动函数 默认值为 easeBoth\n     *   repeats: 10, // 动画运动完后再重复10次\n     *   infinity: true, // 无限循环动画\n     *   alternate: true, // 偶数次的时候动画回放\n     *   duration: 1000, // 动画时长 ms单位 默认 300ms\n     *   onUpdate: function(state,rate){},\n     *   onCompelete: function(){ console.log('end'); } // 动画执行结束回调\n     * });\n     * ```\n     *\n     * @param opts {object} 配置\n     * @param clear {boolean} 是否去掉之前的动画\n     */\n    DisplayObject.prototype.fromTo = function(opts,clear){\n        opts.element = this;\n        this.setVal(opts.from);\n        if(clear)this.Animator.animates.length = 0;\n        return this.Animator.fromTo(opts);\n    };\n    \n    /**\n     * to动画，物体当前位置为动画的启始位置，只需制定动画的结束位置\n     *\n     * @param opts {object} 配置\n     * @param clear {boolean} 是否去掉之前的动画\n     */\n    DisplayObject.prototype.to = function(opts,clear){\n        opts.element = this;\n        opts.from = {};\n        for(var i in opts.to){\n            opts.from[i] = this[i];\n        }\n        if(clear)this.Animator.animates.length = 0;\n        return this.Animator.fromTo(opts);\n    };\n    \n    /**\n     * keyFrames动画，设置物体动画的keyframe，可以为相邻的两个keyFrames之前配置差值时间及时间函数\n     *\n     * @param opts {object} 配置\n     * @param clear {boolean} 是否去掉之前的动画\n     */\n    DisplayObject.prototype.keyFrames = function(opts,clear){\n        opts.element = this;\n        if(clear)this.Animator.animates.length = 0;\n        return this.Animator.keyFrames(opts);\n    };\n    \n    /**\n     * 检测是否可见\n     *\n     * @method isVisible\n     * @private\n     */\n    DisplayObject.prototype.isVisible = function(){\n        return !!(this.visible && this.alpha>0 && this.scaleX*this.scaleY>0);\n    };\n    \n    DisplayObject.prototype.setVal = function(vals){\n        if(vals===undefined)return;\n        for(var key in vals){\n            if(this[key]===undefined){\n                continue;\n            }else{\n                this[key] = vals[key];\n            }\n        }\n    };\n    DisplayObject.prototype.updateMe = function(){\n        var pt = this.parent.worldTransform;\n        var wt = this.worldTransform;\n    \n        var a, b, c, d, tx, ty;\n    \n        if(this.skewX || this.skewY){\n    \n            JC.TEMP_MATRIX.setTransform(\n                this.x,\n                this.y,\n                this.pivotX,\n                this.pivotY,\n                this.scaleX,\n                this.scaleY,\n                this.rotation,\n                this.skewX,\n                this.skewY\n            );\n    \n            wt.a  = JC.TEMP_MATRIX.a  * pt.a + JC.TEMP_MATRIX.b  * pt.c;\n            wt.b  = JC.TEMP_MATRIX.a  * pt.b + JC.TEMP_MATRIX.b  * pt.d;\n            wt.c  = JC.TEMP_MATRIX.c  * pt.a + JC.TEMP_MATRIX.d  * pt.c;\n            wt.d  = JC.TEMP_MATRIX.c  * pt.b + JC.TEMP_MATRIX.d  * pt.d;\n            wt.tx = JC.TEMP_MATRIX.tx * pt.a + JC.TEMP_MATRIX.ty * pt.c + pt.tx;\n            wt.ty = JC.TEMP_MATRIX.tx * pt.b + JC.TEMP_MATRIX.ty * pt.d + pt.ty;\n        }else{\n            if(this.rotation % 360){\n                if(this.rotation !== this.rotationCache){\n                    this.rotationCache = this.rotation;\n                    this._sr = Math.sin(this.rotation*JC.DTR);\n                    this._cr = Math.cos(this.rotation*JC.DTR);\n                }\n    \n                a  =  this._cr * this.scaleX;\n                b  =  this._sr * this.scaleX;\n                c  = -this._sr * this.scaleY;\n                d  =  this._cr * this.scaleY;\n                tx =  this.x;\n                ty =  this.y;\n    \n                if(this.pivotX || this.pivotY){\n                    tx -= this.pivotX * a + this.pivotY * c;\n                    ty -= this.pivotX * b + this.pivotY * d;\n                }\n                wt.a  = a  * pt.a + b  * pt.c;\n                wt.b  = a  * pt.b + b  * pt.d;\n                wt.c  = c  * pt.a + d  * pt.c;\n                wt.d  = c  * pt.b + d  * pt.d;\n                wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n                wt.ty = tx * pt.b + ty * pt.d + pt.ty; \n            }else{\n                a  = this.scaleX;\n                d  = this.scaleY;\n    \n                tx = this.x - this.pivotX * a;\n                ty = this.y - this.pivotY * d;\n    \n                wt.a  = a  * pt.a;\n                wt.b  = a  * pt.b;\n                wt.c  = d  * pt.c;\n                wt.d  = d  * pt.d;\n                wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n                wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n            }\n        }\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    };\n    \n    DisplayObject.prototype.upAnimation = function(snippet){\n        this.Animator.update(snippet);\n    };\n    DisplayObject.prototype.setTransform = function(ctx){\n        var matrix = this.worldTransform;\n        ctx.globalAlpha = this.worldAlpha;\n        ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);\n    };\n    /**\n     * 获取物体相对于canvas世界坐标系的坐标位置\n     *\n     * @return {object}\n     */\n    DisplayObject.prototype.getGlobalPos = function(){\n        return {x: this.worldTransform.x,y: this.worldTransform.y};\n    };\n    /**\n     * 显示对象的事件绑定函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 回调函数\n     */\n    DisplayObject.prototype.on = function(type,fn){\n        this.event.on(type,fn);\n    };\n    /**\n     * 显示对象的事件解绑函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 注册时回调函数的引用\n     */\n    DisplayObject.prototype.off = function(type,fn){\n        this.event.off(type,fn);\n    };\n    /**\n     * 显示对象的一次性事件绑定函数\n     *\n     * @param type {String} 事件类型\n     * @param fn {Function} 回调函数\n     */\n    DisplayObject.prototype.once = function(type,fn){\n        var This = this,\n            cb = function(ev){\n                fn&&fn(ev);\n                This.event.off(type,cb);\n            };\n        this.event.on(type,cb);\n    };\n    /**\n     * 获取当前坐标系下的监测区域\n     *\n     * @method getBound\n     * @private\n     */\n    DisplayObject.prototype.getBound = function (){\n        var bound = [],\n            l = this.bound.length>>1;\n    \n        for (var i = 0; i < l; i++) {\n            var p = this.worldTransform.apply({x: this.bound[i*2],y: this.bound[i*2+1]});\n            bound[i*2  ] = p.x;\n            bound[i*2+1] = p.y;\n        }\n        return bound;\n    };\n    /**\n     * 设置显示对象的监测区域\n     *\n     * @param points {Array} 区域的坐标点 [x0,y0 ..... xn,yn]\n     * @param needless {boolean} 当该值为true，当且仅当this.bound为空时才会更新点击区域。默认为false，总是更新点击区域。\n     * @return {Array}\n     */\n    DisplayObject.prototype.setBound = function (points,needless){\n        var l = this.bound.length;\n        if(l>4&&needless)return;\n        points = points||[\n            -this.regX,this.regY,\n            -this.regX,this.regY-this.height,\n            -this.regX+this.width,this.regY-this.height,\n            -this.regX+this.width,this.regY\n        ];\n        this.bound = points;\n    };\n    DisplayObject.prototype.ContainsPoint = function (p,px,py){\n        var n = p.length>>1;\n        var ax, ay = p[2*n-3]-py, bx = p[2*n-2]-px, by = p[2*n-1]-py;\n        \n        //var lup = by > ay;\n        for(var i=0; i<n; i++){\n            ax = bx;  ay = by;\n            bx = p[2*i  ] - px;\n            by = p[2*i+1] - py;\n            if(ay==by) continue;\n            lup = by>ay;\n        }\n        \n        var depth = 0;\n        for(i=0; i<n; i++){\n            ax = bx;  ay = by;\n            bx = p[2*i  ] - px;\n            by = p[2*i+1] - py;\n            if(ay< 0 && by< 0) continue;\n            if(ay> 0 && by> 0) continue;\n            if(ax< 0 && bx< 0) continue;\n            \n            if(ay==by && Math.min(ax,bx)<=0) return true;\n            if(ay==by) continue;\n            \n            var lx = ax + (bx-ax)*(-ay)/(by-ay);\n            if(lx===0) return true;\n            if(lx> 0) depth++;\n            if(ay===0 &&  lup && by>ay) depth--;\n            if(ay===0 && !lup && by<ay) depth--;\n            lup = by>ay;\n        }\n        return (depth & 1) == 1;\n    };\n    \n    \n    \n    /**\n     * 显示对象容器，继承至DisplayObject\n     *\n     * ```js\n     * var container = new JC.Container();\n     * container.addChilds(sprite);\n     * ```\n     *\n     * @class\n     * @extends JC.DisplayObject\n     * @memberof JC\n     */\n    function Container(){\n        JC.DisplayObject.call( this );\n        this.cds = [];\n        this.timeScale = 1;\n        this.paused = false;\n    }\n    JC.Container = Container;\n    Container.prototype = Object.create( JC.DisplayObject.prototype );\n    Container.prototype.constructor = JC.Container;\n    \n    /**\n     * 向容器添加一个物体\n     * \n     * ```js\n     * container.addChilds(sprite,sprite2,text3,graphice);\n     * ```\n     *\n     * @param child {JC.Container}\n     * @return {JC.Container}\n     */\n    Container.prototype.addChilds = function (cd){\n        if(cd === undefined)return cd;\n        var l = arguments.length;\n        if(l > 1){\n            for (var i=0; i<l; i++) { this.addChilds(arguments[i]); }\n            return arguments[l-1];\n        }\n        if(cd.parent){ cd.parent.removeChilds(cd); }\n        cd.parent = this;\n        this.cds.push(cd);\n        return cd;\n    };\n    /**\n     * 从容器移除一个物体\n     * \n     * ```js\n     * container.removeChilds(sprite,sprite2,text3,graphice);\n     * ```\n     *\n     * @param child {JC.Container}\n     * @return {JC.Container}\n     */\n    Container.prototype.removeChilds = function (){\n        var l = arguments.length;\n        if(l > 1){\n            for (var i=0; i<l; i++) { this.removeChilds(arguments[i]); }\n        }else if(l===1){\n            for(var a=0;a<this.cds.length;a++){\n                if(this.cds[a]===arguments[0]){\n                    this.cds.splice(a,1);\n                    this.cds[a].parent = null;\n                    a--;\n                }\n            }\n        }\n    };\n    Container.prototype.updateTransform = function (snippet){\n        if(!this._ready)return;\n        snippet = this.timeScale*snippet;\n        !this.paused&&this.upAnimation(snippet);\n        this.updateMe();\n        this.cds.length>0&&this.updateChilds(snippet);\n    };\n    Container.prototype.updateChilds = function (snippet){\n        for (var i=0,l=this.cds.length; i<l; i++) {\n            var cd = this.cds[i];\n            cd.updateTransform(snippet);\n        }\n    };\n    Container.prototype.render = function (ctx){\n        ctx.save();\n        this.setTransform(ctx);\n        this.mask&&this.mask.render(ctx);\n        this.renderMe(ctx);\n        this.cds.length>0&&this.renderChilds(ctx);\n        ctx.restore();\n    };\n    Container.prototype.renderMe = function (){\n        return true;\n    };\n    Container.prototype.renderChilds = function (ctx){\n        for (var i=0,l=this.cds.length; i<l; i++) {\n            var cd = this.cds[i];\n            if (!cd.isVisible()||!cd._ready)continue;\n            cd.render(ctx);\n        }\n    };\n    Container.prototype.noticeEvent = function (ev){\n        var i = this.cds.length-1;\n        while(i>=0){\n            var child = this.cds[i];\n            if(child.visible){\n                child.noticeEvent(ev);\n                if(ev.target)break;\n            }\n            i--;\n        }\n        this.upEvent(ev);\n    };\n    Container.prototype.upEvent = function(ev){\n        if(!this._ready)return;\n        if(ev.target||(!this.passEvent&&this.hitTest(ev))){\n            if(!ev.cancleBubble||ev.target===this){\n                if(!(this.event.listeners[ev.type]&&this.event.listeners[ev.type].length>0))return;\n                this.event.emit(ev);\n            }\n        }\n    };\n    Container.prototype.hitTest = function(ev){\n        if (ev.type==='touchmove'||ev.type==='touchend'||ev.type==='mousemove'||ev.type==='mouseup'){\n            var re = this.event.touchstarted;\n            if(re)ev.target = this;\n            if(ev.type==='touchend'||ev.type==='mouseup')this.event.touchstarted = false;\n            return re;\n        }\n        if(this.hitTestMe(ev)){\n            ev.target = this;\n            if(ev.type==='touchstart'||ev.type==='mousedown')this.event.touchstarted = true;\n            return true;\n        }\n        return false;\n    };\n    Container.prototype.hitTestMe = function(ev){\n        return this.ContainsPoint(this.getBound(),ev.global.x,ev.global.y);\n    };\n    Container.prototype.pause = function(){\n        this.paused = true;\n    };\n    Container.prototype.start = function(){\n        this.paused = false;\n    };\n    Container.prototype.cancle = function(){\n        this.Animator.animates.length = 0;\n    };\n    \n\n    function Sprite(texture) {\n        JC.Container.call(this);\n    \n        /**\n         * The anchor sets the origin point of the texture.\n         * The default is 0,0 this means the texture's origin is the top left\n         * Setting the anchor to 0.5,0.5 means the texture's origin is centered\n         * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner\n         *\n         * @member {PIXI.Point}\n         */\n        this.anchor = new JC.Point();\n    \n        /**\n         * The texture that the sprite is using\n         *\n         * @member {PIXI.Texture}\n         * @private\n         */\n        this._texture = null;\n    \n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @member {number}\n         * @private\n         */\n        this._width = 0;\n    \n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @member {number}\n         * @private\n         */\n        this._height = 0;\n    \n        /**\n         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.tint = 0xFFFFFF;\n    \n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n    \n        /**\n         * The shader that will be used to render the sprite. Set to null to remove a current shader.\n         *\n         * @member {PIXI.AbstractFilter|PIXI.Shader}\n         */\n        this.shader = null;\n    \n        /**\n         * An internal cached value of the tint.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.cachedTint = 0xFFFFFF;\n    \n        // call texture setter\n        this.texture = texture;\n    }\n    \n    // constructor\n    JC.Sprite = Sprite;\n    Sprite.prototype = Object.create(JC.Container.prototype);\n    Sprite.prototype.constructor = JC.Sprite;\n    \n    Object.defineProperties(Sprite.prototype, {\n        /**\n         * The width of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         * @memberof PIXI.Sprite#\n         */\n        width: {\n            get: function() {\n                return Math.abs(this.scale.x) * this.texture._frame.width;\n            },\n            set: function(value) {\n                var sign = utils.sign(this.scale.x) || 1;\n                this.scale.x = sign * value / this.texture._frame.width;\n                this._width = value;\n            }\n        },\n    \n        /**\n         * The height of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         * @memberof PIXI.Sprite#\n         */\n        height: {\n            get: function() {\n                return Math.abs(this.scale.y) * this.texture._frame.height;\n            },\n            set: function(value) {\n                var sign = utils.sign(this.scale.y) || 1;\n                this.scale.y = sign * value / this.texture._frame.height;\n                this._height = value;\n            }\n        },\n    \n        /**\n         * The texture that the sprite is using\n         *\n         * @member {PIXI.Texture}\n         * @memberof PIXI.Sprite#\n         */\n        texture: {\n            get: function() {\n                return this._texture;\n            },\n            set: function(value) {\n                if (this._texture === value) {\n                    return;\n                }\n    \n                this._texture = value;\n                this.cachedTint = 0xFFFFFF;\n    \n                if (value) {\n                    // wait for the texture to load\n                    if (value.baseTexture.hasLoaded) {\n                        this._onTextureUpdate();\n                    } else {\n                        value.once('update', this._onTextureUpdate, this);\n                    }\n                }\n            }\n        }\n    });\n    \n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @private\n     */\n    Sprite.prototype.upTexture = function() {\n        this._textureW = opts.texture.width;\n        this._textureH = opts.texture.height;\n        this.width = opts.width || this._textureW;\n        this.height = opts.height || this._textureH;\n        this.regX = this.width >> 1;\n        this.regY = this.height >> 1;\n        this.setBound(null, true);\n    };\n    \n    /**\n     *\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer {PIXI.WebGLRenderer}\n     * @private\n     */\n    Sprite.prototype.render = function(renderer) {\n        renderer.setObjectRenderer(renderer.plugins.sprite);\n        renderer.plugins.sprite.render(this);\n    };\n    \n    /**\n     * Returns the bounds of the Sprite as a rectangle. The bounds calculation takes the worldTransform into account.\n     *\n     * @param matrix {PIXI.Matrix} the transformation matrix of the sprite\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    Sprite.prototype.getBounds = function(matrix) {\n    \n    };\n    \n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     */\n    Sprite.prototype.getLocalBounds = function() {};\n    \n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param point {PIXI.Point} the point to test\n     * @return {boolean} the result of the test\n     */\n    Sprite.prototype.containsPoint = function(point) {};\n    \n\n    function ParticleContainer(maxSize, properties, batchSize)\n    {\n        JC.Container.call(this);\n    \n        batchSize = batchSize || 15000; //CONST.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n        maxSize = maxSize || 15000;\n    \n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        var maxBatchSize = 16384;\n        if (batchSize > maxBatchSize) {\n            batchSize = maxBatchSize;\n        }\n    \n        if (batchSize > maxSize) {\n            batchSize = maxSize;\n        }\n    \n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        this._properties = [false, true, false, false, false];\n    \n        /**\n         * @member {number}\n         * @private\n         */\n        this._maxSize = maxSize;\n    \n        /**\n         * @member {number}\n         * @private\n         */\n        this._batchSize = batchSize;\n    \n        /**\n         * @member {WebGLBuffer}\n         * @private\n         */\n        this._buffers = null;\n    \n        /**\n         * @member {number}\n         * @private\n         */\n        this._bufferToUpdate = 0;\n    \n        /**\n         * @member {boolean}\n         *\n         */\n        this.interactiveChildren = false;\n    \n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n    \n        this.setProperties(properties);\n    }\n    \n    JC.ParticleContainer = ParticleContainer;\n    ParticleContainer.prototype = Object.create(JC.Container.prototype);\n    ParticleContainer.prototype.constructor = JC.ParticleContainer;\n    \n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param properties {object} The properties to be uploaded\n     */\n    ParticleContainer.prototype.setProperties = function(properties)\n    {\n        if ( properties ) {\n            this._properties[0] = 'scale' in properties ? !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'alpha' in properties ? !!properties.alpha : this._properties[4];\n        }\n    };\n    \n    ParticleContainer.prototype.updateTransform = function ()\n    {\n    \n        this.displayObjectUpdateTransform();\n    };\n    \n    ParticleContainer.prototype.render = function (renderer)\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n    \n        renderer.setObjectRenderer( renderer.plugins.particle );\n        renderer.plugins.particle.render( this );\n    };\n    \n    \n\n    \n\n    function Renderer(view, options){\n        options = options || {};\n    \n        if (options)\n        {\n            for (var i in JC.CONST.DEFAULT_RENDER_OPTIONS)\n            {\n                if (typeof options[i] === 'undefined')\n                {\n                    options[i] = JC.CONST.DEFAULT_RENDER_OPTIONS[i];\n                }\n            }\n        }\n        else\n        {\n            options = JC.CONST.DEFAULT_RENDER_OPTIONS;\n        }\n    \n        this.view = typeof view !== 'string' ? view : document.getElementById(view);\n    \n        this.width = this.view.width;\n        this.height = this.view.height;\n    \n        this.projection =  new Float32Array([this.width>>1, this.width>>1]);\n    \n        this.resolution = options.resolution;\n    \n        this.transparent = options.transparent;\n    \n        this.autoResize = options.autoResize || false;\n    \n        this.blendModes = null;\n    \n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n    \n        this.autoClear = options.autoClear;\n    \n        this._backgroundColor = 0x000000;\n    \n        this._backgroundColorRgb = [0, 0, 0];\n    \n        this._backgroundColorString = '#000000';\n    \n        this.backgroundColor = options.backgroundColor || this._backgroundColor;\n    \n    \n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    \n        this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n        this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    \n        this._contextOptions = {\n            alpha: this.transparent,\n            antialias: options.antialias,\n            premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n            stencil: true,\n            preserveDrawingBuffer: options.preserveDrawingBuffer\n        };\n    \n        this.drawCount = 0;\n    \n        this.shaderManager = new ShaderManager(this);\n    \n        this.blendModeManager = new BlendModeManager(this);\n    \n        this._createContext();\n        this._initContext();\n    \n        this._mapGlModes();\n    \n    }\n    \n    // constructor\n    JC.Renderer = Renderer;\n    Renderer.prototype = Object.create(SystemRenderer.prototype);\n    Renderer.prototype.constructor = Renderer;\n    \n    Renderer.glContextId = 0;\n    \n    Renderer.prototype._createContext = function () {\n        var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n        this.gl = gl;\n    \n        if (!gl)\n        {\n            throw new Error('This browser does not support webGL. Try using the canvas renderer');\n        }\n    \n        this.glContextId = Renderer.glContextId++;\n        gl.id = this.glContextId;\n        gl.renderer = this;\n    };\n    \n    Renderer.prototype._initContext = function (){\n        var gl = this.gl;\n    \n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.enable(gl.BLEND);\n    \n        this.emit('context', gl);\n    \n        this.resize(this.width, this.height);\n    \n    };\n    \n    Renderer.prototype.render = function (object){\n    \n        this.emit('prerender');\n    \n        if (this.gl.isContextLost())\n        {\n            return;\n        }\n    \n        this.drawCount = 0;\n    \n        var cacheParent = object.parent;\n        object.parent = this._tempDisplayObjectParent;\n    \n        object.updateTransform();\n    \n        object.parent = cacheParent;\n    \n        var gl = this.gl;\n    \n    \n        if (this.clearBeforeRender)\n        {\n            if (this.transparent)\n            {\n                gl.clearColor(0, 0, 0, 0);\n            }\n            else\n            {\n                gl.clearColor(this._backgroundColorRgb[0], this._backgroundColorRgb[1], this._backgroundColorRgb[2], 1);\n            }\n    \n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    \n        this.renderDisplayObject(object);\n    \n        this.emit('postrender');\n    };\n    \n    Renderer.prototype.renderDisplayObject = function (displayObject){\n        displayObject.renderWebGL(this);\n    };\n    \n    Renderer.prototype.handleContextLost = function (event){\n        event.preventDefault();\n    };\n    \n    Renderer.prototype.handleContextRestored = function (){\n        this._initContext();\n    };\n    \n    Renderer.prototype._mapGlModes = function (){\n        var gl = this.gl;\n    \n        if (!this.blendModes)\n        {\n            this.blendModes = {};\n    \n            this.blendModes[JC.CONST.BLEND_MODES.NORMAL]        = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n            this.blendModes[JC.CONST.BLEND_MODES.ADD]           = [gl.ONE,       gl.DST_ALPHA];\n            this.blendModes[JC.CONST.BLEND_MODES.MULTIPLY]      = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n            this.blendModes[JC.CONST.BLEND_MODES.SCREEN]        = [gl.ONE,       gl.ONE_MINUS_SRC_COLOR];\n        }\n    \n        if (!this.drawModes)\n        {\n            this.drawModes = {};\n    \n            this.drawModes[JC.CONST.DRAW_MODES.POINTS]         = gl.POINTS;\n            this.drawModes[JC.CONST.DRAW_MODES.LINES]          = gl.LINES;\n            this.drawModes[JC.CONST.DRAW_MODES.LINE_LOOP]      = gl.LINE_LOOP;\n            this.drawModes[JC.CONST.DRAW_MODES.LINE_STRIP]     = gl.LINE_STRIP;\n            this.drawModes[JC.CONST.DRAW_MODES.TRIANGLES]      = gl.TRIANGLES;\n            this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;\n            this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_FAN]   = gl.TRIANGLE_FAN;\n        }\n    };\n    \n    Object.defineProperties(Renderer.prototype, {\n        backgroundColor:\n        {\n            get: function ()\n            {\n                return this._backgroundColor;\n            },\n            set: function (val)\n            {\n                this._backgroundColor = val;\n                this._backgroundColorString = utils.hex2string(val);\n                utils.hex2rgb(val, this._backgroundColorRgb);\n            }\n        }\n    });\n    \n    Renderer.prototype.resize = function (width, height) {\n        this.width = width * this.resolution;\n        this.height = height * this.resolution;\n    \n        this.view.width = this.width;\n        this.view.height = this.height;\n    \n        this.projection =  new Float32Array([this.width>>1, this.width>>1]);\n    \n        if (this.autoResize)\n        {\n            this.view.style.width = this.width / this.resolution + 'px';\n            this.view.style.height = this.height / this.resolution + 'px';\n        }\n    };\n    \n    \n    function ShaderManager(renderer){\n    \n        this.renderer = renderer;\n    \n        this.shaderType = '';\n    \n        this.currentShader = null;\n    \n        this.init();\n    }\n    \n    ShaderManager.prototype.init = function (){\n    \n        var gl = this.renderer.gl;\n    \n        this.maxAttibs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    \n        this.shaderPool = {\n            particle: new ParticleShader(gl),\n            sprite: new SpriteShader(gl),\n            graphics: new GraphicsShader(gl),\n            text: new TextShader(gl)\n        };\n    };\n    \n    ShaderManager.prototype.setShader = function (shaderType)\n    {\n        if (this.shaderType === shaderType)\n        {\n            return false;\n        }\n    \n        this.currentShader = this.shaderPool[shaderType];\n    \n        this.renderer.gl.useProgram(this.currentShader.program);\n    \n        this.shaderType = shaderType;\n    \n        return true;\n    };\n    \n    \n    function Shader(gl, vertexSrc, fragmentSrc, uniforms, attributes) {\n        if (!vertexSrc || !fragmentSrc) {\n            throw new Error('jcw2d.js Error. Shader requires vertexSrc and fragmentSrc');\n        }\n    \n        this.type = '';\n    \n        this.gl = gl;\n    \n        this.program = null;\n    \n        this.uniforms = uniforms || {};\n    \n        this.attributes = attributes || {};\n    \n        this.textureCount = 1;\n    \n        this.MAX_TEXTURE_UNITS = gl.getParameter(MAX_TEXTURE_IMAGE_UNITS);\n    \n        this.vertexSrc = vertexSrc;\n    \n        this.fragmentSrc = fragmentSrc;\n    \n        this.init();\n    }\n    \n    Shader.prototype.constructor = Shader;\n    \n    Shader.prototype.init = function() {\n        this.compile();\n    \n        this.gl.useProgram(this.program);\n    \n        this.cacheUniformLocations(Object.keys(this.uniforms));\n        this.cacheAttributeLocations(Object.keys(this.attributes));\n    };\n    \n    Shader.prototype.cacheUniformLocations = function(keys) {\n        for (var i = 0; i < keys.length; ++i) {\n            this.uniforms[keys[i]]._location = this.gl.getUniformLocation(this.program, keys[i]);\n        }\n    };\n    \n    Shader.prototype.cacheAttributeLocations = function(keys) {\n        for (var i = 0; i < keys.length; ++i) {\n            this.attributes[keys[i]] = this.gl.getAttribLocation(this.program, keys[i]);\n        }\n    };\n    \n    Shader.prototype.compile = function() {\n        var gl = this.gl;\n    \n        var glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexSrc);\n        var glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentSrc);\n    \n        var program = gl.createProgram();\n    \n        gl.attachShader(program, glVertShader);\n        gl.attachShader(program, glFragShader);\n        gl.linkProgram(program);\n    \n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            console.error('jcw2d.js Error: Could not initialize shader.');\n            console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n            console.error('gl.getError()', gl.getError());\n    \n            if (gl.getProgramInfoLog(program) !== '') {\n                console.warn('jcw2d.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n            }\n    \n            gl.deleteProgram(program);\n            program = null;\n        }\n    \n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    \n        return (this.program = program);\n    };\n    \n    Shader.prototype.syncUniform = function(uniform) {\n        var location = uniform._location,\n            value = uniform.value,\n            gl = this.gl,\n            i, il;\n    \n        switch (uniform.type) {\n            case 'b':\n            case 'bool':\n            case 'boolean':\n                gl.uniform1i(location, value ? 1 : 0);\n                break;\n    \n                // single int value\n            case 'i':\n            case '1i':\n                gl.uniform1i(location, value);\n                break;\n    \n                // single float value\n            case 'f':\n            case '1f':\n                gl.uniform1f(location, value);\n                break;\n    \n                // Float32Array(2) or JS Arrray\n            case '2f':\n                gl.uniform2f(location, value[0], value[1]);\n                break;\n    \n                // Float32Array(3) or JS Arrray\n            case '3f':\n                gl.uniform3f(location, value[0], value[1], value[2]);\n                break;\n    \n                // Float32Array(4) or JS Arrray\n            case '4f':\n                gl.uniform4f(location, value[0], value[1], value[2], value[3]);\n                break;\n    \n                // a 2D Point object\n            case 'v2':\n                gl.uniform2f(location, value.x, value.y);\n                break;\n    \n                // a 3D Point object\n            case 'v3':\n                gl.uniform3f(location, value.x, value.y, value.z);\n                break;\n    \n                // a 4D Point object\n            case 'v4':\n                gl.uniform4f(location, value.x, value.y, value.z, value.w);\n                break;\n    \n                // Int32Array or JS Array\n            case '1iv':\n                gl.uniform1iv(location, value);\n                break;\n    \n                // Int32Array or JS Array\n            case '2iv':\n                gl.uniform2iv(location, value);\n                break;\n    \n                // Int32Array or JS Array\n            case '3iv':\n                gl.uniform3iv(location, value);\n                break;\n    \n                // Int32Array or JS Array\n            case '4iv':\n                gl.uniform4iv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '1fv':\n                gl.uniform1fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '2fv':\n                gl.uniform2fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '3fv':\n                gl.uniform3fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case '4fv':\n                gl.uniform4fv(location, value);\n                break;\n    \n                // Float32Array or JS Array\n            case 'm2':\n            case 'mat2':\n            case 'Matrix2fv':\n                gl.uniformMatrix2fv(location, uniform.transpose, value);\n                break;\n    \n                // Float32Array or JS Array\n            case 'm3':\n            case 'mat3':\n            case 'Matrix3fv':\n    \n                gl.uniformMatrix3fv(location, uniform.transpose, value);\n                break;\n    \n                // Float32Array or JS Array\n            case 'm4':\n            case 'mat4':\n            case 'Matrix4fv':\n                gl.uniformMatrix4fv(location, uniform.transpose, value);\n                break;\n    \n                // a Color Value\n            case 'c':\n                if (typeof value === 'number') {\n                    value = utils.hex2rgb(value);\n                }\n    \n                gl.uniform3f(location, value[0], value[1], value[2]);\n                break;\n    \n                // flat array of integers (JS or typed array)\n            case 'iv1':\n                gl.uniform1iv(location, value);\n                break;\n    \n                // flat array of integers with 3 x N size (JS or typed array)\n            case 'iv':\n                gl.uniform3iv(location, value);\n                break;\n    \n                // flat array of floats (JS or typed array)\n            case 'fv1':\n                gl.uniform1fv(location, value);\n                break;\n    \n                // flat array of floats with 3 x N size (JS or typed array)\n            case 'fv':\n                gl.uniform3fv(location, value);\n                break;\n    \n                // array of 2D Point objects\n            case 'v2v':\n                if (!uniform._array) {\n                    uniform._array = new Float32Array(2 * value.length);\n                }\n    \n                for (i = 0, il = value.length; i < il; ++i) {\n                    uniform._array[i * 2] = value[i].x;\n                    uniform._array[i * 2 + 1] = value[i].y;\n                }\n    \n                gl.uniform2fv(location, uniform._array);\n                break;\n    \n                // array of 3D Point objects\n            case 'v3v':\n                if (!uniform._array) {\n                    uniform._array = new Float32Array(3 * value.length);\n                }\n    \n                for (i = 0, il = value.length; i < il; ++i) {\n                    uniform._array[i * 3] = value[i].x;\n                    uniform._array[i * 3 + 1] = value[i].y;\n                    uniform._array[i * 3 + 2] = value[i].z;\n    \n                }\n    \n                gl.uniform3fv(location, uniform._array);\n                break;\n    \n                // array of 4D Point objects\n            case 'v4v':\n                if (!uniform._array) {\n                    uniform._array = new Float32Array(4 * value.length);\n                }\n    \n                for (i = 0, il = value.length; i < il; ++i) {\n                    uniform._array[i * 4] = value[i].x;\n                    uniform._array[i * 4 + 1] = value[i].y;\n                    uniform._array[i * 4 + 2] = value[i].z;\n                    uniform._array[i * 4 + 3] = value[i].w;\n    \n                }\n    \n                gl.uniform4fv(location, uniform._array);\n                break;\n    \n                // PIXI.Texture\n            case 't':\n            case 'sampler2D':\n    \n                if (!uniform.value || !uniform.value.baseTexture.hasLoaded) {\n                    break;\n                }\n    \n                // activate this texture\n                gl.activeTexture(gl['TEXTURE' + this.textureCount]);\n    \n                var texture = uniform.value.baseTexture.texture;\n    \n                if (!texture) {\n                    this.initSampler2D(uniform);\n    \n                    // set the textur to the newly created one..\n                    texture = uniform.value.baseTexture.texture;\n                }\n    \n                // bind the texture\n                gl.bindTexture(gl.TEXTURE_2D, texture);\n    \n                // set uniform to texture index\n                gl.uniform1i(uniform._location, this.textureCount);\n    \n                // increment next texture id\n                this.textureCount++;\n    \n                break;\n    \n            default:\n                console.warn('jcw2d.js Shader Warning: Unknown uniform type: ' + uniform.type);\n        }\n    };\n    \n    Shader.prototype.syncUniforms = function() {\n        this.textureCount = 1;\n    \n        for (var key in this.uniforms) {\n            this.syncUniform(this.uniforms[key]);\n        }\n    };\n    \n    Shader.prototype.initSampler2D = function(uniform) {\n        var gl = this.gl;\n    \n        var texture = uniform.value.baseTexture;\n    \n        if (!texture.hasLoaded) {\n            return;\n        }\n    \n        this.updateTexture(texture);\n    };\n    \n    Shader.prototype.updateTexture = function (texture){\n        texture = texture.baseTexture || texture;\n    \n        if (!texture.hasLoaded)\n        {\n            return;\n        }\n    \n        var gl = this.gl;\n    \n        if (!texture.texture)\n        {\n            texture.texture = gl.createTexture();\n            texture.on('update', this.updateTexture, this);\n        }\n    \n    \n        gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n    \n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n    \n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    \n    \n        if (texture.mipmap && texture.isPowerOfTwo)\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n        else\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n        }\n    \n        if (!texture.isPowerOfTwo)\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        }\n        else\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        }\n    \n        return  texture.texture;\n    };\n    \n    Shader.prototype._glCompile = function(type, src) {\n        var shader = this.gl.createShader(type);\n    \n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n    \n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.log(this.gl.getShaderInfoLog(shader));\n            return null;\n        }\n    \n        return shader;\n    };\n    \n    function SpriteShader(gl) {\n        var uniforms = {\n            uAlpha: { type: '1f', value: 1 },\n            uSampler: { type: 'sampler2D', value: 0 },\n            projectionMatrix: {\n                type: 'mat3',\n                value: new Float32Array([1, 0, 0,\n                    0, 1, 0,\n                    0, 0, 1\n                ])\n            },\n            projectionVector: {\n                type: '2fv',\n                value: new Float32Array([1, 1])\n            }\n        };\n    \n        if (customUniforms) {\n            for (var u in customUniforms) {\n                uniforms[u] = customUniforms[u];\n            }\n        }\n    \n    \n        var attributes = {\n            aVertexPosition: 0,\n            aTextureCoord: 0,\n            aColor: 0\n        };\n    \n        if (customAttributes) {\n            for (var a in customAttributes) {\n                attributes[a] = customAttributes[a];\n            }\n        }\n    \n        var vertexSrc = [\n            'precision lowp float;',\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute vec4 aColor;',\n    \n            'uniform mat3 projectionMatrix;',\n            'uniform vec2 projectionVector;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying vec4 vColor;',\n    \n            'void main(void){',\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n            '   vTextureCoord = aTextureCoord;',\n            '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\n            '}'\n        ].join('\\n');\n    \n        var fragmentSrc = [\n            'precision lowp float;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying vec4 vColor;',\n    \n            'uniform sampler2D uSampler;',\n            'uniform float uAlpha;',\n    \n            'void main(void){',\n            '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * uAlpha;',\n            '}'\n        ].join('\\n');\n    \n    \n        Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n    }\n    \n    // constructor\n    SpriteShader.prototype = Object.create(Shader.prototype);\n    SpriteShader.prototype.constructor = SpriteShader;\n    \n    function ParticleShader(shaderManager) {\n        var uniforms = {\n            uAlpha: { type: '1f', value: 1 },\n            uSampler: { type: 'sampler2D', value: 0 },\n            projectionMatrix: {\n                type: 'mat3',\n                value: new Float32Array([1, 0, 0,\n                    0, 1, 0,\n                    0, 0, 1\n                ])\n            },\n            projectionVector: {\n                type: '2fv',\n                value: new Float32Array([1, 1])\n            }\n        };\n    \n        if (customUniforms) {\n            for (var u in customUniforms) {\n                uniforms[u] = customUniforms[u];\n            }\n        }\n    \n    \n        var attributes = {\n            aVertexPosition: 0,\n            aTextureCoord: 0,\n            aAlpha: 0,\n            aPositionCoord: 0,\n            aRotation: 0\n        };\n    \n        if (customAttributes) {\n            for (var a in customAttributes) {\n                attributes[a] = customAttributes[a];\n            }\n        }\n    \n        var vertexSrc = [\n            'precision lowp float;',\n            \n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute float aAlpha;',\n    \n            'attribute vec2 aPositionCoord;',\n            'attribute float aRotation;',\n    \n            'uniform mat3 projectionMatrix;',\n            'uniform vec2 projectionVector;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying float vAlpha;',\n    \n            'void main(void){',\n            '   vec2 v = aVertexPosition;',\n    \n            '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);',\n            '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);',\n            '   v = v + aPositionCoord;',\n    \n            '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy / projectionVector, 0.0, 1.0);',\n    \n            '   vTextureCoord = aTextureCoord;',\n            '   vAlpha = aAlpha;',\n            '}'\n        ].join('\\n');\n    \n        var fragmentSrc = [\n            'precision lowp float;',\n    \n            'varying vec2 vTextureCoord;',\n            'varying float vAlpha;',\n    \n            'uniform sampler2D uSampler;',\n            'uniform float uAlpha;',\n    \n            'void main(void){',\n            '  vec4 color = texture2D(uSampler, vTextureCoord) * vAlpha * uAlpha;',\n            '  if (color.a == 0.0) discard;',\n            '  gl_FragColor = color;',\n            '}'\n        ].join('\\n');\n    \n    \n        Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n    \n    }\n    \n    ParticleShader.prototype = Object.create(TextureShader.prototype);\n    ParticleShader.prototype.constructor = ParticleShader;\n    \n    module.exports = ParticleShader;\n    \n    function GraphicsShader(shaderManager) {\n        Shader.call(this,\n            shaderManager,\n            // vertex shader\n            [\n                'attribute vec2 aVertexPosition;',\n                'attribute vec4 aColor;',\n    \n                'uniform mat3 projectionMatrix;',\n                'uniform vec2 projectionVector;',\n    \n                'uniform float alpha;',\n                'uniform vec3 tint;',\n    \n                'varying vec4 vColor;',\n    \n                'void main(void){',\n                '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n                '   vColor = aColor * vec4(tint * alpha, alpha);',\n                '}'\n            ].join('\\n'),\n            // fragment shader\n            [\n                'precision mediump float;',\n    \n                'varying vec4 vColor;',\n    \n                'void main(void){',\n                '   gl_FragColor = vColor;',\n                '}'\n            ].join('\\n'),\n            // custom uniforms\n            {\n                tint: { type: '3f', value: [0, 0, 0] },\n                alpha: { type: '1f', value: 0 },\n                projectionMatrix: { type: 'mat3', value: new Float32Array(9) },\n                projectionVector: {\n                    type: '2fv',\n                    value: new Float32Array([1, 1])\n                }\n            },\n            // custom attributes\n            {\n                aVertexPosition: 0,\n                aColor: 0\n            }\n        );\n    }\n    \n    GraphicsShader.prototype = Object.create(Shader.prototype);\n    GraphicsShader.prototype.constructor = GraphicsShader;\n    \n    \n\n    return JC;\n\n}));","\n/**\n * 简单拷贝json对象\n *\n * @name copyJSON\n * @memberof JC\n * @property {JC.copyJSON}\n */\n \n// JC.copyJSON = ;\n\n/**\n * 将角度转化成弧度\n *\n * @name DTR\n * @memberof JC\n * @property {JC.DTR}\n */\n\n// JC.DTR = Math.PI/180;\n\n\n/**\n * 是否为数组\n *\n * @name isArray\n * @memberof JC\n * @property {JC.isArray}\n */\n// JC.isArray = ;\n\n/**\n * 是否为对象\n *\n * @name isObject\n * @memberof JC\n * @property {JC.isObject}\n */\n// JC.isObject = (function(){\n//     var ks = _rt({});\n//     return function(object){\n//         return Object.prototype.toString.call(object) === ks;\n//     };\n// })();\n\n/**\n * 是否为数字\n *\n * @name isNumber\n * @memberof JC\n * @property {JC.isNumber}\n */\n// JC.isNumber = (function(){\n//     var ks = _rt(1);\n//     return function(object){\n//         return Object.prototype.toString.call(object) === ks;\n//     };\n// })();\n\n/**\n * 是否为函数\n *\n * @name isFunction\n * @memberof JC\n * @property {JC.isFunction}\n */\n// JC.isFunction = (function(){\n//     var ks = _rt(function(){});\n//     return function(object){\n//         return Object.prototype.toString.call(object) === ks;\n//     };\n// })();\n\n/**\n * 强化的随机数\n *\n * @name random\n * @memberof JC\n * @property {JC.random}\n */\n\n// JC.random = function(min, max){\n//     if (JC.isArray(min))\n//         return min[~~(Math.random() * min.length)];\n//     if (!JC.isNumber(max))\n//         max = min || 1, min = 0;\n//     return min + Math.random() * (max - min);\n// };\n\n\n/**\n * 阿基米德求模\n *\n * @name euclideanModulo\n * @memberof JC\n * @property {JC.euclideanModulo}\n */\n\n// JC.euclideanModulo = function(n, m){\n//     return ((n % m) + m) % m;\n// };\n\nfunction _rt(val){\n    return Object.prototype.toString.call(val);\n}\n\nJC.UTILS = {\n\n    hex2rgb: function (hex, out)\n    {\n        out = out || [];\n\n        out[0] = (hex >> 16 & 0xFF) / 255;\n        out[1] = (hex >> 8 & 0xFF) / 255;\n        out[2] = (hex & 0xFF) / 255;\n\n        return out;\n    },\n\n    hex2string: function (hex)\n    {\n        hex = hex.toString(16);\n        hex = '000000'.substr(0, 6 - hex.length) + hex;\n\n        return '#' + hex;\n    },\n\n    rgb2hex: function (rgb)\n    {\n        return ((rgb[0]*255 << 16) + (rgb[1]*255 << 8) + rgb[2]*255);\n    },\n\n    getNextPowerOfTwo: function (number)\n    {\n        // see: http://en.wikipedia.org/wiki/Power_of_two#Fast_algorithm_to_check_if_a_positive_number_is_a_power_of_two\n        if (number > 0 && (number & (number - 1)) === 0)\n        {\n            return number;\n        }\n        else\n        {\n            var result = 1;\n\n            while (result < number)\n            {\n                result <<= 1;\n            }\n\n            return result;\n        }\n    },\n\n    isPowerOfTwo: function (width, height)\n    {\n        return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n    },\n\n    sayHi: function (type)\n    {\n        if (this._saidHi)\n        {\n            return;\n        }\n\n        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n        {\n            var args = [\n                '\\n %c %c %c jcw2d.js ' + JC.CONST.VERSION + ' - ✰ ' + type + ' ✰  %c ' + ' %c ' + ' http://www.jason82.com/  %c %c ♥%c♥%c♥ \\n\\n',\n                'background: #ff66a5; padding:5px 0;',\n                'background: #ff66a5; padding:5px 0;',\n                'color: #ff66a5; background: #030307; padding:5px 0;',\n                'background: #ff66a5; padding:5px 0;',\n                'background: #ffc3dc; padding:5px 0;',\n                'background: #ff66a5; padding:5px 0;',\n                'color: #ff2424; background: #fff; padding:5px 0;',\n                'color: #ff2424; background: #fff; padding:5px 0;',\n                'color: #ff2424; background: #fff; padding:5px 0;'\n            ];\n\n            window.console.log.apply(console, args); //jshint ignore:line\n        }\n        else if (window.console)\n        {\n            window.console.log('jcw2d.js ' + JC.CONST.VERSION + ' - ' + type + ' - http://www.jason82.com/'); //jshint ignore:line\n        }\n\n        this._saidHi = true;\n    },\n\n    isWebGLSupported: function ()\n    {\n        var contextOptions = { stencil: true };\n        try\n        {\n            if (!window.WebGLRenderingContext)\n            {\n                return false;\n            }\n\n            var canvas = document.createElement('canvas'),\n                gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);\n\n            return !!(gl && gl.getContextAttributes().stencil);\n        }\n        catch (e)\n        {\n            return false;\n        }\n    },\n\n    sign: function (n)\n    {\n        return n ? (n < 0 ? -1 : 1) : 0;\n    },\n\n    removeItems: function (arr, startIdx, removeCount)\n    {\n        var length = arr.length;\n\n        if (startIdx >= length || removeCount === 0)\n        {\n            return;\n        }\n\n        removeCount = (startIdx+removeCount > length ? length-startIdx : removeCount);\n        for (var i = startIdx, len = length-removeCount; i < len; ++i)\n        {\n            arr[i] = arr[i + removeCount];\n        }\n\n        arr.length = len;\n    },\n\n    copyJSON: function(json){\n        return JSON.parse(JSON.stringify(json));\n    },\n\n    isArray: (function(){\n        var ks = _rt('s');\n        return function(object){\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    isObject: (function(){\n        var ks = _rt({});\n        return function(object){\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    isNumber: (function(){\n        var ks = _rt(1);\n        return function(object){\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    /**\n     * 是否为函数\n     *\n     * @name isFunction\n     * @memberof JC\n     * @property {JC.isFunction}\n     */\n    isFunction: (function(){\n        var ks = _rt(function(){});\n        return function(object){\n            return Object.prototype.toString.call(object) === ks;\n        };\n    })(),\n\n    /**\n     * 强化的随机数\n     *\n     * @name random\n     * @memberof JC\n     * @property {JC.random}\n     */\n    random: function(min, max){\n        if (this.isArray(min))\n            return min[~~(Math.random() * min.length)];\n        if (!this.isNumber(max))\n            max = min || 1, min = 0;\n        return min + Math.random() * (max - min);\n    },\n\n    /**\n     * 阿基米德求模\n     *\n     * @name euclideanModulo\n     * @memberof JC\n     * @property {JC.euclideanModulo}\n     */\n    euclideanModulo: function(n, m){\n        return ((n % m) + m) % m;\n    },\n    \n    clamp: function(x, a, b) {\n        return (x < a) ? a : ((x > b) ? b : x);\n    },\n\n    TextureCache: {},\n\n    BaseTextureCache: {}\n\n};\n\n\n","\n/**\n * jcw2d的事件消息对象的类\n *\n * @class JC.InteractionData\n * @constructor\n */\nfunction InteractionData(){\n    /**\n     * 转换到canvas坐标系统的事件触发点\n     *\n     * @property global\n     * @type Object\n     */\n    this.global = {x:-100000,y:-100000};\n\n    /**\n     * 事件源\n     *\n     * @property target\n     * @type JC.Container\n     */\n    this.target = null;\n\n    /**\n     * 浏览器的原始事件对象\n     *\n     * @property originalEvent\n     * @type Event\n     */\n    this.originalEvent = null;\n\n    /**\n     * 在canvas内阻止事件冒泡\n     *\n     * @property cancleBubble\n     * @type Boolean\n     */\n    this.cancleBubble = false;\n\n    /**\n     * canvas视窗和页面坐标的兑换比例\n     *\n     * @property ratio\n     * @type Number\n     */\n    this.ratio = 1;\n\n    /**\n     * 事件类型\n     *\n     * @property type\n     * @type String\n     */\n    this.type = '';\n}\nJC.InteractionData = InteractionData;\n\n\n\n/**\n * jcw2d的事件对象的类\n *\n * @class JC.Eventer\n * @constructor Eventer\n * @memberof JC\n */\nfunction Eventer(){\n    this.touchstarted = false;\n    this.mouseDowned = false;\n    this.listeners = {};\n}\n/**\n * 事件对象的事件绑定函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 回调函数\n * @private\n */\nEventer.prototype.on = function(type,fn){\n    this.listeners[type] = this.listeners[type]||[];\n    this.listeners[type].push(fn);\n};\n/**\n * 事件对象的事件解绑函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 注册时回调函数的引用\n * @private\n */\nEventer.prototype.off = function(type,fn){\n    if (this.listeners[type]) {\n        var i = this.listeners[type].length;\n        if(fn){\n            while (i--) {\n                if (cbs[type][i] === fn) {\n                    cbs[type].splice(i, 1);\n                }\n            }\n        }else{\n            cbs[type].length = 0;\n        }\n    }\n};\n/**\n * 事件对象的触发事件函数\n *\n * @param ev {JC.InteractionData} 事件类型\n * @private\n */\nEventer.prototype.emit = function(ev){\n    if ( this.listeners === undefined ) return;\n    var ears = this.listeners;\n    var cbs = ears[ ev.type ];\n    if ( cbs !== undefined ) {\n        var length = cbs.length;\n        var i;\n        for ( i = 0; i < length; i ++ ) {\n            cbs[ i ].call( this, ev );\n        }\n    }\n};\nJC.Eventer = Eventer;","\n/**\n * 动画对象的基本类型\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画配置信息\n */\n\nfunction Animate(opts){\n    this.element = opts.element||{};\n    this.duration = opts.duration||300;\n    this.living = true;\n\n    this.onCompelete = opts.onCompelete||null;\n    this.onUpdate = opts.onUpdate||null;\n\n    this.infinity = opts.infinity||false;\n    this.alternate = opts.alternate||false;\n    this.ease = opts.ease||'easeBoth';\n    this.repeats = opts.repeats||0;\n    this.delay = opts.delay||0;\n    this.progress = 0-this.delay;\n\n    this.timeScale = opts.timeScale||1;\n\n    this.paused = false;\n}\nJC.Animate = Animate;\nAnimate.prototype.nextPose = function(){\n    var cache = {};\n    for(var i in this.ATRE){\n        cache[i] = JC.TWEEN[this.ease]( this.progress , this.ATRS[i] , this.ATRE[i] - this.ATRS[i] , this.duration );\n        if(this.element[i]!==undefined)this.element[i] = cache[i];\n    }\n    return cache;//this.onUpdate\n};\nAnimate.prototype.pause = function(){\n    this.paused = true;\n};\nAnimate.prototype.start = function(){\n    this.paused = false;\n};\nAnimate.prototype.stop = function(){\n    this.progress = this.duration;\n};\nAnimate.prototype.cancle = function(){\n    this.living = false;\n};\n\n\n/**\n * Transition类型动画对象\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画所具备的特性\n */\n\nfunction Transition(opts){\n    JC.Animate.call(this,opts);\n\n    this.ATRS = opts.from;\n    this.ATRE = opts.to;\n}\nJC.Transition = Transition;\nTransition.prototype = Object.create( JC.Animate.prototype );\nTransition.prototype.constructor = JC.Transition;\nTransition.prototype.update = function(snippet){\n    if(this.paused||!this.living)return;\n    this.progress += this.timeScale*snippet;\n\n    if(this.progress < this.duration){\n        if(this.progress<0)return;\n        var pose = this.nextPose();\n        this.onUpdate&&this.onUpdate(pose,this.progress/this.duration);\n    }else{\n        this.element.setVal(this.ATRE);\n        this.onUpdate&&this.onUpdate(this.ATRE,1);\n        if(this.repeats>0||this.infinity){\n            this.repeats>0&&--this.repeats;\n            this.progress = 0;\n            if(this.alternate){\n                var sc = JC.copyJSON(this.ATRS);\n                this.ATRS = JC.copyJSON(this.ATRE);\n                this.ATRE = sc;\n            }else{\n                this.element.setVal(this.ATRS);\n            }\n        }else{\n            this.living = false;\n            this.onCompelete&&this.onCompelete();\n        }\n    }\n};\n\n\n/**\n * Animation类型动画对象\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画配置信息\n */\nfunction Animation(opts){\n    JC.Animate.call(this,opts);\n\n    this._keyframes = opts.keys;\n    this._keyIndex = 0;\n    this._direction = 1;\n    this._keyConfig = opts.keyConfig;\n\n    this.configKey();\n}\nJC.Animation = Animation;\nAnimation.prototype = Object.create( JC.Animate.prototype );\nAnimation.prototype.constructor = JC.Animation;\nAnimation.prototype.configKey = function(){\n    this.ATRS = this._keyframes[this._keyIndex];\n    this._keyIndex += this._direction;\n    this.ATRE = this._keyframes[this._keyIndex];\n    var config = this._keyConfig[Math.min(this._keyIndex,this._keyIndex-this._direction)]||{};\n    this.ease = config.ease||this.ease;\n    this.duration = config.duration||this.duration;\n    this.progress = 0;\n};\nAnimation.prototype.update = function(snippet){\n    if(this.paused||!this.living)return;\n    this.progress += this.timeScale*snippet;\n\n    if(this.progress < this.duration){\n        if(this.progress<0)return;\n        var pose = this.nextPose();\n        this.onUpdate&&this.onUpdate(pose,this.progress/this.duration,this._keyIndex);\n    }else{\n        this.element.setVal(this.ATRE);\n        this.onUpdate&&this.onUpdate(this.ATRE,1,this._keyIndex);\n        if(this._keyIndex<this._keyframes.length-1&&this._keyIndex>0){\n            this.configKey();\n        }else{\n            if(this.repeats>0||this.infinity){\n                this.repeats>0&&--this.repeats;\n                if(this.alternate){\n                    this._direction *= -1;\n                }else{\n                    this._keyIndex = 0;\n                }\n                this.configKey();\n            }else{\n                this.living = false;\n                this.onCompelete&&this.onCompelete();\n            }\n        }\n    }\n};\n\n\n/**\n * MovieClip类型动画对象\n *\n * @class\n * @memberof JC\n * @param [element] {object} 动画对象 内部传入\n * @param [opts] {object} 动画配置信息 内部传入\n */\nfunction MovieClip(element, opts){\n    this.element = element;\n    this.living = false;\n\n    this.onCompelete = null;\n    // this.onUpdate = null;\n\n    this.infinity = false;\n    this.alternate = false;\n    this.repeats = 0;\n\n    this.animations = opts.animations||{};\n\n    this.index = 0;\n    this.direction = 1;\n    this.frames = [];\n    this.sy = opts.sy||0;\n    this.sx = opts.sx||0;\n    this.fillMode = 0;\n    this.fps = 16;\n\n    this.paused = false;\n\n    this.pt = 0;\n    this.nt = 0;\n}\nJC.MovieClip = MovieClip;\nMovieClip.prototype.update = function(snippet){\n    if(this.paused||!this.living)return;\n    this.nt += snippet;\n    if(this.nt-this.pt<this.interval)return;\n    this.pt = this.nt;\n    var i = this.index + this.direction;\n    if(i<this.frames.length&&i>=0){\n        this.index = i;\n        // Do you need this handler???\n        // this.onUpdate&&this.onUpdate(this.index);\n    }else{\n        if(this.repeats>0||this.infinity){\n            this.repeats>0&&--this.repeats;\n            if(this.alternate){\n                this.direction *= -1;\n                this.index += this.direction;\n            }else{\n                this.direction = 1;\n                this.index = 0;\n            }\n            // Do you need this handler???\n            // this.onUpdate&&this.onUpdate(this.index);\n        }else{\n            this.living = false;\n            this.index = this.fillMode;\n            this.onCompelete&&this.onCompelete();\n            this.next&&this.next();\n        }\n    }\n};\nMovieClip.prototype.getFramePos = function(){\n    var pos = {\n            x: this.sx,\n            y: this.sy\n        };\n    var cf = this.frames[this.index];\n    if(cf>0){\n        var row = this.element._textureW/this.element.width >> 0;\n        var lintRow = this.sx/this.element.width >> 0;\n        var lintCol = this.sy/this.element.height >> 0;\n        var mCol = lintCol+(lintRow+cf)/row >> 0;\n        var mRow = (lintRow+cf)%row;\n        pos.x = mRow*this.element.width;\n        pos.y = mCol*this.element.height;\n    }\n    return pos;\n};\nMovieClip.prototype.playMovie = function(opts){\n    this.next = null;\n    var movie = this.format(opts.movie);\n    if(!JC.isArray(movie))return;\n    this.frames = movie;\n    this.index = 0;\n    this.direction = 1;\n    this.fillMode = opts.fillMode||0;\n    this.fps = opts.fps||this.fps;\n    this.infinity = opts.infinity||false;\n    this.alternate = opts.alternate||false;\n    this.repeats = opts.repeats||0;\n    this.living = true;\n    this.onCompelete = opts.onCompelete||null;\n};\nMovieClip.prototype.format = function(movie){\n    if(JC.isString(movie)){\n        var config = this.animations[movie];\n        if(config){\n            return this.format(config);\n        }else{\n            console.warn(\n            '%c JC.MovieClip warn %c: you didn\\`t config %c'+movie+'%c in animations ',\n            'color: #f98165; background: #80a89e',\n            'color: #80a89e; background: #cad9d5;',\n            'color: #f98165; background: #cad9d5',\n            'color: #80a89e; background: #cad9d5'\n            );\n            return false;\n        }\n    }else if(JC.isArray(movie)){\n        return movie;\n    }else if(JC.isObject(movie)){\n        var arr = [];\n        for(var i=movie.start;i<=movie.end;i++){\n            arr.push(i);\n        }\n        if(movie.next&&this.animations[movie.next]){\n            var This = this;\n            this.next = function(){\n                This.playMovie({\n                    movie: this.animations[movie.next],\n                    infinity: true\n                });\n            };\n        }\n        return arr;\n    }\n};\nMovieClip.prototype.pause = function(){\n    this.paused = true;\n};\nMovieClip.prototype.start = function(){\n    this.paused = false;\n};\nMovieClip.prototype.cancle = function(){\n    this.living = false;\n};\nObject.defineProperty(MovieClip.prototype, 'interval', {\n    get: function() {\n        return this.fps>0?1000/this.fps>>0:16;\n    }\n});\n\n\n/**\n * Transition类型动画对象\n *\n * @class\n * @memberof JC\n * @param [opts] {object} 动画所具备的特性\n * @param [opts] {object} 动画配置信息\n */\n\nfunction PathMotion(opts){\n    JC.Animate.call(this,opts);\n\n    this.points = opts.points;\n    this.attachNormal = opts.attachNormal||false;\n    this.sDeg = false;\n    this.tDeg = 0;\n    this.pDeg = 0;\n}\nJC.PathMotion = PathMotion;\nPathMotion.prototype = Object.create( JC.Animate.prototype );\nPathMotion.prototype.constructor = JC.PathMotion;\nPathMotion.prototype.update = function(snippet){\n    if(this.paused||!this.living)return;\n    this.progress += this.timeScale*snippet;\n\n    if(this.progress < this.duration){\n        if(this.progress<0)return;\n        var pose = this.nextPose();\n        this.onUpdate&&this.onUpdate(pose,this.progress/this.duration);\n    }else{\n        this.element.setVal(this.ATRE);\n        this.onUpdate&&this.onUpdate(this.ATRE,1);\n        if(this.repeats>0||this.infinity){\n            this.repeats>0&&--this.repeats;\n            this.progress = 0;\n            if(this.alternate){\n                var sc = JC.copyJSON(this.ATRS);\n                this.ATRS = JC.copyJSON(this.ATRE);\n                this.ATRE = sc;\n            }else{\n                this.element.setVal(this.ATRS);\n            }\n        }else{\n            this.living = false;\n            this.onCompelete&&this.onCompelete();\n        }\n    }\n};\nPathMotion.prototype.nextPose = function(){\n    var cache = {};\n    // for(var i in this.ATRE){\n    //     cache[i] = JC.TWEEN[this.ease]( this.progress , this.ATRS[i] , this.ATRE[i] - this.ATRS[i] , this.duration );\n    //     if(this.element[i]!==undefined)this.element[i] = cache[i];\n    // }\n    var t = JC.TWEEN[this.ease]( this.progress , 0 , 1 , this.duration );\n    var pos = this.getPoint(t,this.points);\n    cache.x = pos.x;\n    cache.y = pos.y;\n    // cache.y = pos.y;\n    if(this.attachNormal){\n        cache.rotate = this.decomposeRotate(t);\n    }\n    return cache;//this.onUpdate\n};\nPathMotion.prototype.getPoint = function(t, points) {\n    var a = points,\n        len = a.length,\n        rT = 1 - t,\n        l = a.slice(0, len - 1),\n        r = a.slice(1),\n        oP = {};\n    if (len > 3) {\n        var oL = this.getPoint(t, l),\n            oR = this.getPoint(t, r);\n        oP.x = rT * oL.x + t * oR.x;\n        oP.y = rT * oL.y + t * oR.y;\n        // oP.z = rT * oL.z + t * oR.z;\n        return oP;\n    } else {\n        oP.x = rT * rT * points[0].x + 2 * t * rT * points[1].x + t * t * points[2].x;\n        oP.y = rT * rT * points[0].y + 2 * t * rT * points[1].y + t * t * points[2].y;\n        // oP.z = rT * rT * points[0].z + 2 * t * rT * points[1].z + t * t * points[2].z;\n        return oP;\n    }\n};\nPathMotion.prototype.decomposeRotate = function(t) {\n    var p1 = this.getPoint(t,this.points);\n    var p2 = this.getPoint(t+0.01,this.points);\n    var deg = p1.xxxxx+p2.x;\n};\n\n/**\n * Animator类型动画对象\n *\n * @class\n * @memberof JC\n */\nfunction Animator(){\n    this.start = false;\n    this.animates = [];\n}\nJC.Animator = Animator;\nAnimator.prototype.update = function(snippet){\n    for(var i=0;i<this.animates.length;i++){\n        if(!this.animates[i].living)this.animates.splice(i,1);\n        this.animates[i]&&this.animates[i].update(snippet);\n    }\n};\nAnimator.prototype.fromTo = function(opts){\n    var animate = new JC.Transition(opts);\n    this.animates.push(animate);\n    return animate;\n};\nAnimator.prototype.keyFrames = function(opts){\n    var animate = new JC.Animation(opts);\n    this.animates.push(animate);\n    return animate;\n};\n\n\n\n\n\n\n\n","/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n * @param [x=0] {number} position of the point on the x axis\n * @param [y=0] {number} position of the point on the y axis\n */\nfunction Point(x, y)\n{\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y || 0;\n}\n\nJC.Point = Point;\nPoint.prototype.constructor = JC.Point;\n\n/**\n * Creates a clone of this point\n *\n * @return {PIXI.Point} a copy of the point\n */\nPoint.prototype.clone = function ()\n{\n    return new Point(this.x, this.y);\n};\n\n/**\n * Copies x and y from the given point\n *\n * @param p {PIXI.Point}\n */\nPoint.prototype.copy = function (p) {\n    this.set(p.x, p.y);\n};\n\n/**\n * Returns true if the given point is equal to this point\n *\n * @param p {PIXI.Point}\n * @returns {boolean}\n */\nPoint.prototype.equals = function (p) {\n    return (p.x === this.x) && (p.y === this.y);\n};\n\n/**\n * Sets the point to a new x and y position.\n * If y is omitted, both x and y will be set to x.\n *\n * @param [x=0] {number} position of the point on the x axis\n * @param [y=0] {number} position of the point on the y axis\n */\nPoint.prototype.set = function (x, y)\n{\n    this.x = x || 0;\n    this.y = y || ( (y !== 0) ? this.x : 0 ) ;\n};\n","\n/**\n * 矩阵对象，用来描述和记录对象的tansform 状态信息\n *\n * @class\n * @memberof JC\n */\nfunction Matrix(){\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n}\nJC.Matrix = Matrix;\nMatrix.prototype.constructor = JC.Matrix;\n\n/**\n * 从数组设置一个矩阵\n *\n * @param array {number[]}\n */\nMatrix.prototype.fromArray = function(array){\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n};\n\n/**\n * 将对象的数据以数组的形式导出\n *\n * @param transpose {boolean} 是否对矩阵进行转置\n * @return {number[]} 返回数组\n */\nMatrix.prototype.toArray = function(transpose){\n    if(!this.array) this.array = new JC.Float32Array(9);\n    var array = this.array;\n\n    if(transpose){\n        array[0] = this.a;\n        array[1] = this.b;\n        array[2] = 0;\n        array[3] = this.c;\n        array[4] = this.d;\n        array[5] = 0;\n        array[6] = this.tx;\n        array[7] = this.ty;\n        array[8] = 1;\n    }else{\n        array[0] = this.a;\n        array[1] = this.c;\n        array[2] = this.tx;\n        array[3] = this.b;\n        array[4] = this.d;\n        array[5] = this.ty;\n        array[6] = 0;\n        array[7] = 0;\n        array[8] = 1;\n    }\n    return array;\n};\n\n/**\n * 将坐标点与矩阵左乘\n *\n * @param pos {object} 原始点\n * @param newPos {object} 变换之后的点\n * @return {object} 返回数组\n */\nMatrix.prototype.apply = function(pos, newPos){\n    newPos = newPos || {};\n    newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n    newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n    return newPos;\n};\n/**\n * 将坐标点与转置矩阵左乘\n *\n * @param pos {object} 原始点\n * @param newPos {object} 变换之后的点\n * @return {object} 变换之后的点\n */\nMatrix.prototype.applyInverse = function(pos, newPos){\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n    newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n};\n/**\n * 位移操作\n *\n * @return {this} \n */\nMatrix.prototype.translate = function(x, y){\n    this.tx += x;\n    this.ty += y;\n    return this;\n};\n/**\n * 缩放操作\n *\n * @return {this} \n */\nMatrix.prototype.scale = function(x, y){\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n};\n/**\n * 旋转操作\n *\n * @return {this} \n */\nMatrix.prototype.rotate = function(angle){\n    var cos = Math.cos( angle );\n    var sin = Math.sin( angle );\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a1 * cos-this.b * sin;\n    this.b = a1 * sin+this.b * cos;\n    this.c = c1 * cos-this.d * sin;\n    this.d = c1 * sin+this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n};\n/**\n * 矩阵相乘\n *\n * @return {this} \n */\nMatrix.prototype.append = function(matrix){\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    this.a  = matrix.a * a1 + matrix.b * c1;\n    this.b  = matrix.a * b1 + matrix.b * d1;\n    this.c  = matrix.c * a1 + matrix.d * c1;\n    this.d  = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n};\n/**\n * 单位矩阵\n *\n * @return {this} \n */\nMatrix.prototype.identity = function(){\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n};\n/**\n * 快速设置矩阵各个分量\n *\n * @return {this} \n */\nMatrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY)\n{\n    var a, b, c, d, sr, cr, cy, sy, nsx, cx;\n\n    sr  = Math.sin(rotation);\n    cr  = Math.cos(rotation);\n    cy  = Math.cos(skewY);\n    sy  = Math.sin(skewY);\n    nsx = -Math.sin(skewX);\n    cx  =  Math.cos(skewX);\n\n    a  =  cr * scaleX;\n    b  =  sr * scaleX;\n    c  = -sr * scaleY;\n    d  =  cr * scaleY;\n\n    this.a  = cy * a + sy * c;\n    this.b  = cy * b + sy * d;\n    this.c  = nsx * a + cx * c;\n    this.d  = nsx * b + cx * d;\n\n    this.tx = x + ( pivotX * a + pivotY * c );\n    this.ty = y + ( pivotX * b + pivotY * d );\n\n    return this;\n};\nJC.IDENTITY = new Matrix();\nJC.TEMP_MATRIX = new Matrix();\n","JC.BaseTextureCache = {};\nfunction BaseTexture(source, scaleMode) {\n    JC.Eventer.call(this);\n\n    this.width = 100;\n\n    this.height = 100;\n\n    this.realWidth = 100;\n\n    this.realHeight = 100;\n\n    this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;\n\n    this.hasLoaded = false;\n\n    this.isLoading = false;\n\n    this.source = null; // set in loadSource, if at all\n\n    this.resolution = 1;\n\n    this.premultipliedAlpha = true;\n\n    this.imageUrl = null;\n\n    this.isPowerOfTwo = false;\n\n    this.mipmap = false;\n\n    // this._glTextures = {};\n\n    // if no source passed don't try to load\n    if (source) {\n        this.loadSource(source);\n    }\n\n}\n\nBaseTexture.prototype = Object.create(JC.Eventer.prototype);\nBaseTexture.prototype.constructor = BaseTexture;\n\nBaseTexture.prototype.update = function() {\n    this.realWidth = this.source.naturalWidth || this.source.width;\n    this.realHeight = this.source.naturalHeight || this.source.height;\n\n    this.width = this.realWidth / this.resolution;\n    this.height = this.realHeight / this.resolution;\n\n    this.isPowerOfTwo = utils.isPowerOfTwo(this.realWidth, this.realHeight);\n\n    this.emit({ type: 'update' });\n};\n\nBaseTexture.prototype.loadSource = function(source) {\n    var wasLoading = this.isLoading;\n    this.hasLoaded = false;\n    this.isLoading = false;\n\n    this.source = source;\n\n    if ((this.source.complete || this.source.getContext) && this.source.width && this.source.height) {\n        this._sourceLoaded();\n    } else if (!source.getContext) {\n        this.isLoading = true;\n\n        var This = this;\n\n        source.onload = function() {\n            source.onload = null;\n            source.onerror = null;\n\n            This.isLoading = false;\n            This._sourceLoaded();\n            This.emit({ type: 'loaded' });\n        };\n\n        source.onerror = function() {\n            source.onload = null;\n            source.onerror = null;\n\n            This.isLoading = false;\n            This.emit({ type: 'error' });\n        };\n\n        if (source.complete && source.src) {\n            this.isLoading = false;\n\n            source.onload = null;\n            source.onerror = null;\n\n            if (source.width && source.height) {\n                this._sourceLoaded();\n\n                // If any previous subscribers possible\n                if (wasLoading) {\n                    this.emit({ type: 'loaded' });\n                }\n            } else {\n                // If any previous subscribers possible\n                if (wasLoading) {\n                    this.emit({ type: 'error' });\n                }\n            }\n        }\n    }\n};\n\nBaseTexture.prototype._sourceLoaded = function() {\n    this.hasLoaded = true;\n    this.update();\n};\nBaseTexture.fromImage = function (imageUrl, crossorigin, scaleMode)\n{\n    var baseTexture = JC.BaseTextureCache[imageUrl];\n\n    if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0)\n    {\n        crossorigin = true;\n    }\n\n    if (!baseTexture)\n    {\n        var image = new Image();\n        if (crossorigin)\n        {\n            image.crossOrigin = '';\n        }\n\n        baseTexture = new BaseTexture(image, scaleMode);\n        baseTexture.imageUrl = imageUrl;\n\n        image.src = imageUrl;\n\n        JC.BaseTextureCache[imageUrl] = baseTexture;\n\n    }\n\n    return baseTexture;\n};\n","function Texture(baseTexture, frame) {\n    JC.Eventer.call(this);\n\n    this.noFrame = false;\n\n    if (!frame) {\n        this.noFrame = true;\n        frame = new math.Rectangle(0, 0, 1, 1);\n    }\n\n    if (baseTexture instanceof Texture) {\n        baseTexture = baseTexture.baseTexture;\n    }\n\n    this.baseTexture = baseTexture;\n\n    this._frame = frame;\n\n    this.valid = false;\n\n    this.requiresUpdate = false;\n\n    this._uvs = null;\n\n    this.width = 0;\n\n    this.height = 0;\n\n    if (baseTexture.hasLoaded) {\n        if (this.noFrame) {\n            frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n\n            // if there is no frame we should monitor for any base texture changes..\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n        this.frame = frame;\n    } else {\n        baseTexture.once('loaded', this.onBaseTextureLoaded, this);\n    }\n\n}\n\nTexture.prototype = Object.create(JC.Eventer.prototype);\nTexture.prototype.constructor = Texture;\n\nObject.defineProperties(Texture.prototype, {\n    frame: {\n        get: function() {\n            return this._frame;\n        },\n        set: function(frame) {\n            this._frame = frame;\n\n            this.noFrame = false;\n\n            this.width = frame.width;\n            this.height = frame.height;\n\n            this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;\n\n            if (this.valid) {\n                this._updateUvs();\n            }\n        }\n    }\n});\n\nTexture.prototype.update = function() {\n    this.baseTexture.update();\n};\n\nTexture.prototype.onBaseTextureLoaded = function(baseTexture) {\n    // TODO this code looks confusing.. boo to abusing getters and setterss!\n    if (this.noFrame) {\n        this.frame = new math.Rectangle(0, 0, baseTexture.width, baseTexture.height);\n    } else {\n        this.frame = this._frame;\n    }\n\n    this.emit('update', this);\n};\n\nTexture.prototype.onBaseTextureUpdated = function(baseTexture) {\n    this._frame.width = baseTexture.width;\n    this._frame.height = baseTexture.height;\n\n    this.emit('update', this);\n};\n\nTexture.prototype._updateUvs = function() {\n    if (!this._uvs) {\n        this._uvs = new TextureUvs();\n    }\n    this._uvs.set(this.frame, this.baseTexture);\n};\n\nTexture.fromImage = function(imageUrl, crossorigin, scaleMode) {\n    var texture = JC.UTILS.TextureCache[imageUrl];\n\n    if (!texture) {\n        texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin, scaleMode));\n        JC.UTILS.TextureCache[imageUrl] = texture;\n    }\n\n    return texture;\n};\n\nTexture.fromCanvas = function(canvas, scaleMode) {\n    return new Texture(BaseTexture.fromCanvas(canvas, scaleMode));\n};\n\n","function TextureUvs() {\n    this.x0 = 0;\n    this.y0 = 0;\n\n    this.x1 = 1;\n    this.y1 = 0;\n\n    this.x2 = 1;\n    this.y2 = 1;\n\n    this.x3 = 0;\n    this.y3 = 1;\n}\n\nTextureUvs.prototype.set = function(frame, baseFrame) {\n    var tw = baseFrame.width;\n    var th = baseFrame.height;\n\n        this.x0 = frame.x / tw;\n        this.y0 = frame.y / th;\n\n        this.x1 = (frame.x + frame.width) / tw;\n        this.y1 = frame.y / th;\n\n        this.x2 = (frame.x + frame.width) / tw;\n        this.y2 = (frame.y + frame.height) / th;\n\n        this.x3 = frame.x / tw;\n        this.y3 = (frame.y + frame.height) / th;\n};\n","\n/**\n * 显示对象的基类\n *\n * @class\n * @memberof JC\n */\nfunction DisplayObject(){\n    this._ready = true;\n\n    this.visible = true;\n    this.worldAlpha = 1;\n    this.alpha = 1;\n\n    this.scaleX = 1;\n    this.scaleY = 1;\n\n    this.skewX = 0;\n    this.skewY = 0;\n\n    this.rotation = 0;\n    this.rotationCache = 0;\n    this._sr = 0;\n    this._cr = 1;\n    \n    this.x = 0;\n    this.y = 0;\n    \n    this.pivotX = 0;\n    this.pivotY = 0;\n\n    this.mask = null;\n\n    this.parent = null;\n    this.worldTransform = new JC.Matrix();\n\n    this.event = new JC.Eventer();\n    this.passEvent = false;\n    this.bound = [];\n\n\n    this.Animator = new JC.Animator();\n}\nJC.DisplayObject = DisplayObject;\nDisplayObject.prototype.constructor = JC.DisplayObject;\n\nObject.defineProperty(DisplayObject.prototype, 'scale', {\n    get: function() {\n        return this.scaleX;\n    },\n    set: function(scale) {\n        this.scaleX = this.scaleY = scale;\n    }\n});\n\n/**\n * fromTo动画，指定动画的启始位置和结束位置\n *\n * ```js\n * // 扩展缓动函数，缓动函数库详见目录下的util/tween.js\n * JC.TWEEN.extend({    \n *    bounceOut: function(t, b, c, d){\n *        if ((t/=d) < (1/2.75)) {\n *            return c*(7.5625*t*t) + b;\n *        } else if (t < (2/2.75)) {\n *            return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;\n *        } else if (t < (2.5/2.75)) {\n *            return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;\n *        }\n *        return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;\n *    }\n * });\n * var dispayObj = new JC.Text('Hello JC','bold 36px Arial','#c32361');\n * dispayObj.fromTo({\n *   from: {x: 100},\n *   to: {x: 200},\n *   ease: 'bounceOut', // 执行动画使用的缓动函数 默认值为 easeBoth\n *   repeats: 10, // 动画运动完后再重复10次\n *   infinity: true, // 无限循环动画\n *   alternate: true, // 偶数次的时候动画回放\n *   duration: 1000, // 动画时长 ms单位 默认 300ms\n *   onUpdate: function(state,rate){},\n *   onCompelete: function(){ console.log('end'); } // 动画执行结束回调\n * });\n * ```\n *\n * @param opts {object} 配置\n * @param clear {boolean} 是否去掉之前的动画\n */\nDisplayObject.prototype.fromTo = function(opts,clear){\n    opts.element = this;\n    this.setVal(opts.from);\n    if(clear)this.Animator.animates.length = 0;\n    return this.Animator.fromTo(opts);\n};\n\n/**\n * to动画，物体当前位置为动画的启始位置，只需制定动画的结束位置\n *\n * @param opts {object} 配置\n * @param clear {boolean} 是否去掉之前的动画\n */\nDisplayObject.prototype.to = function(opts,clear){\n    opts.element = this;\n    opts.from = {};\n    for(var i in opts.to){\n        opts.from[i] = this[i];\n    }\n    if(clear)this.Animator.animates.length = 0;\n    return this.Animator.fromTo(opts);\n};\n\n/**\n * keyFrames动画，设置物体动画的keyframe，可以为相邻的两个keyFrames之前配置差值时间及时间函数\n *\n * @param opts {object} 配置\n * @param clear {boolean} 是否去掉之前的动画\n */\nDisplayObject.prototype.keyFrames = function(opts,clear){\n    opts.element = this;\n    if(clear)this.Animator.animates.length = 0;\n    return this.Animator.keyFrames(opts);\n};\n\n/**\n * 检测是否可见\n *\n * @method isVisible\n * @private\n */\nDisplayObject.prototype.isVisible = function(){\n    return !!(this.visible && this.alpha>0 && this.scaleX*this.scaleY>0);\n};\n\nDisplayObject.prototype.setVal = function(vals){\n    if(vals===undefined)return;\n    for(var key in vals){\n        if(this[key]===undefined){\n            continue;\n        }else{\n            this[key] = vals[key];\n        }\n    }\n};\nDisplayObject.prototype.updateMe = function(){\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n\n    var a, b, c, d, tx, ty;\n\n    if(this.skewX || this.skewY){\n\n        JC.TEMP_MATRIX.setTransform(\n            this.x,\n            this.y,\n            this.pivotX,\n            this.pivotY,\n            this.scaleX,\n            this.scaleY,\n            this.rotation,\n            this.skewX,\n            this.skewY\n        );\n\n        wt.a  = JC.TEMP_MATRIX.a  * pt.a + JC.TEMP_MATRIX.b  * pt.c;\n        wt.b  = JC.TEMP_MATRIX.a  * pt.b + JC.TEMP_MATRIX.b  * pt.d;\n        wt.c  = JC.TEMP_MATRIX.c  * pt.a + JC.TEMP_MATRIX.d  * pt.c;\n        wt.d  = JC.TEMP_MATRIX.c  * pt.b + JC.TEMP_MATRIX.d  * pt.d;\n        wt.tx = JC.TEMP_MATRIX.tx * pt.a + JC.TEMP_MATRIX.ty * pt.c + pt.tx;\n        wt.ty = JC.TEMP_MATRIX.tx * pt.b + JC.TEMP_MATRIX.ty * pt.d + pt.ty;\n    }else{\n        if(this.rotation % 360){\n            if(this.rotation !== this.rotationCache){\n                this.rotationCache = this.rotation;\n                this._sr = Math.sin(this.rotation*JC.DTR);\n                this._cr = Math.cos(this.rotation*JC.DTR);\n            }\n\n            a  =  this._cr * this.scaleX;\n            b  =  this._sr * this.scaleX;\n            c  = -this._sr * this.scaleY;\n            d  =  this._cr * this.scaleY;\n            tx =  this.x;\n            ty =  this.y;\n\n            if(this.pivotX || this.pivotY){\n                tx -= this.pivotX * a + this.pivotY * c;\n                ty -= this.pivotX * b + this.pivotY * d;\n            }\n            wt.a  = a  * pt.a + b  * pt.c;\n            wt.b  = a  * pt.b + b  * pt.d;\n            wt.c  = c  * pt.a + d  * pt.c;\n            wt.d  = c  * pt.b + d  * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty; \n        }else{\n            a  = this.scaleX;\n            d  = this.scaleY;\n\n            tx = this.x - this.pivotX * a;\n            ty = this.y - this.pivotY * d;\n\n            wt.a  = a  * pt.a;\n            wt.b  = a  * pt.b;\n            wt.c  = d  * pt.c;\n            wt.d  = d  * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n        }\n    }\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n};\n\nDisplayObject.prototype.upAnimation = function(snippet){\n    this.Animator.update(snippet);\n};\nDisplayObject.prototype.setTransform = function(ctx){\n    var matrix = this.worldTransform;\n    ctx.globalAlpha = this.worldAlpha;\n    ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);\n};\n/**\n * 获取物体相对于canvas世界坐标系的坐标位置\n *\n * @return {object}\n */\nDisplayObject.prototype.getGlobalPos = function(){\n    return {x: this.worldTransform.x,y: this.worldTransform.y};\n};\n/**\n * 显示对象的事件绑定函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 回调函数\n */\nDisplayObject.prototype.on = function(type,fn){\n    this.event.on(type,fn);\n};\n/**\n * 显示对象的事件解绑函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 注册时回调函数的引用\n */\nDisplayObject.prototype.off = function(type,fn){\n    this.event.off(type,fn);\n};\n/**\n * 显示对象的一次性事件绑定函数\n *\n * @param type {String} 事件类型\n * @param fn {Function} 回调函数\n */\nDisplayObject.prototype.once = function(type,fn){\n    var This = this,\n        cb = function(ev){\n            fn&&fn(ev);\n            This.event.off(type,cb);\n        };\n    this.event.on(type,cb);\n};\n/**\n * 获取当前坐标系下的监测区域\n *\n * @method getBound\n * @private\n */\nDisplayObject.prototype.getBound = function (){\n    var bound = [],\n        l = this.bound.length>>1;\n\n    for (var i = 0; i < l; i++) {\n        var p = this.worldTransform.apply({x: this.bound[i*2],y: this.bound[i*2+1]});\n        bound[i*2  ] = p.x;\n        bound[i*2+1] = p.y;\n    }\n    return bound;\n};\n/**\n * 设置显示对象的监测区域\n *\n * @param points {Array} 区域的坐标点 [x0,y0 ..... xn,yn]\n * @param needless {boolean} 当该值为true，当且仅当this.bound为空时才会更新点击区域。默认为false，总是更新点击区域。\n * @return {Array}\n */\nDisplayObject.prototype.setBound = function (points,needless){\n    var l = this.bound.length;\n    if(l>4&&needless)return;\n    points = points||[\n        -this.regX,this.regY,\n        -this.regX,this.regY-this.height,\n        -this.regX+this.width,this.regY-this.height,\n        -this.regX+this.width,this.regY\n    ];\n    this.bound = points;\n};\nDisplayObject.prototype.ContainsPoint = function (p,px,py){\n    var n = p.length>>1;\n    var ax, ay = p[2*n-3]-py, bx = p[2*n-2]-px, by = p[2*n-1]-py;\n    \n    //var lup = by > ay;\n    for(var i=0; i<n; i++){\n        ax = bx;  ay = by;\n        bx = p[2*i  ] - px;\n        by = p[2*i+1] - py;\n        if(ay==by) continue;\n        lup = by>ay;\n    }\n    \n    var depth = 0;\n    for(i=0; i<n; i++){\n        ax = bx;  ay = by;\n        bx = p[2*i  ] - px;\n        by = p[2*i+1] - py;\n        if(ay< 0 && by< 0) continue;\n        if(ay> 0 && by> 0) continue;\n        if(ax< 0 && bx< 0) continue;\n        \n        if(ay==by && Math.min(ax,bx)<=0) return true;\n        if(ay==by) continue;\n        \n        var lx = ax + (bx-ax)*(-ay)/(by-ay);\n        if(lx===0) return true;\n        if(lx> 0) depth++;\n        if(ay===0 &&  lup && by>ay) depth--;\n        if(ay===0 && !lup && by<ay) depth--;\n        lup = by>ay;\n    }\n    return (depth & 1) == 1;\n};\n","\n\n/**\n * 显示对象容器，继承至DisplayObject\n *\n * ```js\n * var container = new JC.Container();\n * container.addChilds(sprite);\n * ```\n *\n * @class\n * @extends JC.DisplayObject\n * @memberof JC\n */\nfunction Container(){\n    JC.DisplayObject.call( this );\n    this.cds = [];\n    this.timeScale = 1;\n    this.paused = false;\n}\nJC.Container = Container;\nContainer.prototype = Object.create( JC.DisplayObject.prototype );\nContainer.prototype.constructor = JC.Container;\n\n/**\n * 向容器添加一个物体\n * \n * ```js\n * container.addChilds(sprite,sprite2,text3,graphice);\n * ```\n *\n * @param child {JC.Container}\n * @return {JC.Container}\n */\nContainer.prototype.addChilds = function (cd){\n    if(cd === undefined)return cd;\n    var l = arguments.length;\n    if(l > 1){\n        for (var i=0; i<l; i++) { this.addChilds(arguments[i]); }\n        return arguments[l-1];\n    }\n    if(cd.parent){ cd.parent.removeChilds(cd); }\n    cd.parent = this;\n    this.cds.push(cd);\n    return cd;\n};\n/**\n * 从容器移除一个物体\n * \n * ```js\n * container.removeChilds(sprite,sprite2,text3,graphice);\n * ```\n *\n * @param child {JC.Container}\n * @return {JC.Container}\n */\nContainer.prototype.removeChilds = function (){\n    var l = arguments.length;\n    if(l > 1){\n        for (var i=0; i<l; i++) { this.removeChilds(arguments[i]); }\n    }else if(l===1){\n        for(var a=0;a<this.cds.length;a++){\n            if(this.cds[a]===arguments[0]){\n                this.cds.splice(a,1);\n                this.cds[a].parent = null;\n                a--;\n            }\n        }\n    }\n};\nContainer.prototype.updateTransform = function (snippet){\n    if(!this._ready)return;\n    snippet = this.timeScale*snippet;\n    !this.paused&&this.upAnimation(snippet);\n    this.updateMe();\n    this.cds.length>0&&this.updateChilds(snippet);\n};\nContainer.prototype.updateChilds = function (snippet){\n    for (var i=0,l=this.cds.length; i<l; i++) {\n        var cd = this.cds[i];\n        cd.updateTransform(snippet);\n    }\n};\nContainer.prototype.render = function (ctx){\n    ctx.save();\n    this.setTransform(ctx);\n    this.mask&&this.mask.render(ctx);\n    this.renderMe(ctx);\n    this.cds.length>0&&this.renderChilds(ctx);\n    ctx.restore();\n};\nContainer.prototype.renderMe = function (){\n    return true;\n};\nContainer.prototype.renderChilds = function (ctx){\n    for (var i=0,l=this.cds.length; i<l; i++) {\n        var cd = this.cds[i];\n        if (!cd.isVisible()||!cd._ready)continue;\n        cd.render(ctx);\n    }\n};\nContainer.prototype.noticeEvent = function (ev){\n    var i = this.cds.length-1;\n    while(i>=0){\n        var child = this.cds[i];\n        if(child.visible){\n            child.noticeEvent(ev);\n            if(ev.target)break;\n        }\n        i--;\n    }\n    this.upEvent(ev);\n};\nContainer.prototype.upEvent = function(ev){\n    if(!this._ready)return;\n    if(ev.target||(!this.passEvent&&this.hitTest(ev))){\n        if(!ev.cancleBubble||ev.target===this){\n            if(!(this.event.listeners[ev.type]&&this.event.listeners[ev.type].length>0))return;\n            this.event.emit(ev);\n        }\n    }\n};\nContainer.prototype.hitTest = function(ev){\n    if (ev.type==='touchmove'||ev.type==='touchend'||ev.type==='mousemove'||ev.type==='mouseup'){\n        var re = this.event.touchstarted;\n        if(re)ev.target = this;\n        if(ev.type==='touchend'||ev.type==='mouseup')this.event.touchstarted = false;\n        return re;\n    }\n    if(this.hitTestMe(ev)){\n        ev.target = this;\n        if(ev.type==='touchstart'||ev.type==='mousedown')this.event.touchstarted = true;\n        return true;\n    }\n    return false;\n};\nContainer.prototype.hitTestMe = function(ev){\n    return this.ContainsPoint(this.getBound(),ev.global.x,ev.global.y);\n};\nContainer.prototype.pause = function(){\n    this.paused = true;\n};\nContainer.prototype.start = function(){\n    this.paused = false;\n};\nContainer.prototype.cancle = function(){\n    this.Animator.animates.length = 0;\n};\n","function Sprite(texture) {\n    JC.Container.call(this);\n\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 this means the texture's origin is the top left\n     * Setting the anchor to 0.5,0.5 means the texture's origin is centered\n     * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner\n     *\n     * @member {PIXI.Point}\n     */\n    this.anchor = new JC.Point();\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     * @private\n     */\n    this._texture = null;\n\n    /**\n     * The width of the sprite (this is initially set by the texture)\n     *\n     * @member {number}\n     * @private\n     */\n    this._width = 0;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     *\n     * @member {number}\n     * @private\n     */\n    this._height = 0;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    this.tint = 0xFFFFFF;\n\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n\n    /**\n     * The shader that will be used to render the sprite. Set to null to remove a current shader.\n     *\n     * @member {PIXI.AbstractFilter|PIXI.Shader}\n     */\n    this.shader = null;\n\n    /**\n     * An internal cached value of the tint.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    this.cachedTint = 0xFFFFFF;\n\n    // call texture setter\n    this.texture = texture;\n}\n\n// constructor\nJC.Sprite = Sprite;\nSprite.prototype = Object.create(JC.Container.prototype);\nSprite.prototype.constructor = JC.Sprite;\n\nObject.defineProperties(Sprite.prototype, {\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     * @memberof PIXI.Sprite#\n     */\n    width: {\n        get: function() {\n            return Math.abs(this.scale.x) * this.texture._frame.width;\n        },\n        set: function(value) {\n            var sign = utils.sign(this.scale.x) || 1;\n            this.scale.x = sign * value / this.texture._frame.width;\n            this._width = value;\n        }\n    },\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     * @memberof PIXI.Sprite#\n     */\n    height: {\n        get: function() {\n            return Math.abs(this.scale.y) * this.texture._frame.height;\n        },\n        set: function(value) {\n            var sign = utils.sign(this.scale.y) || 1;\n            this.scale.y = sign * value / this.texture._frame.height;\n            this._height = value;\n        }\n    },\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     * @memberof PIXI.Sprite#\n     */\n    texture: {\n        get: function() {\n            return this._texture;\n        },\n        set: function(value) {\n            if (this._texture === value) {\n                return;\n            }\n\n            this._texture = value;\n            this.cachedTint = 0xFFFFFF;\n\n            if (value) {\n                // wait for the texture to load\n                if (value.baseTexture.hasLoaded) {\n                    this._onTextureUpdate();\n                } else {\n                    value.once('update', this._onTextureUpdate, this);\n                }\n            }\n        }\n    }\n});\n\n/**\n * When the texture is updated, this event will fire to update the scale and frame\n *\n * @private\n */\nSprite.prototype.upTexture = function() {\n    this._textureW = opts.texture.width;\n    this._textureH = opts.texture.height;\n    this.width = opts.width || this._textureW;\n    this.height = opts.height || this._textureH;\n    this.regX = this.width >> 1;\n    this.regY = this.height >> 1;\n    this.setBound(null, true);\n};\n\n/**\n *\n * Renders the object using the WebGL renderer\n *\n * @param renderer {PIXI.WebGLRenderer}\n * @private\n */\nSprite.prototype.render = function(renderer) {\n    renderer.setObjectRenderer(renderer.plugins.sprite);\n    renderer.plugins.sprite.render(this);\n};\n\n/**\n * Returns the bounds of the Sprite as a rectangle. The bounds calculation takes the worldTransform into account.\n *\n * @param matrix {PIXI.Matrix} the transformation matrix of the sprite\n * @return {PIXI.Rectangle} the framing rectangle\n */\nSprite.prototype.getBounds = function(matrix) {\n\n};\n\n/**\n * Gets the local bounds of the sprite object.\n *\n */\nSprite.prototype.getLocalBounds = function() {};\n\n/**\n * Tests if a point is inside this sprite\n *\n * @param point {PIXI.Point} the point to test\n * @return {boolean} the result of the test\n */\nSprite.prototype.containsPoint = function(point) {};\n","function ParticleContainer(maxSize, properties, batchSize)\n{\n    JC.Container.call(this);\n\n    batchSize = batchSize || 15000; //CONST.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n    maxSize = maxSize || 15000;\n\n    // Making sure the batch size is valid\n    // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n    var maxBatchSize = 16384;\n    if (batchSize > maxBatchSize) {\n        batchSize = maxBatchSize;\n    }\n\n    if (batchSize > maxSize) {\n        batchSize = maxSize;\n    }\n\n    /**\n     * Set properties to be dynamic (true) / static (false)\n     *\n     * @member {boolean[]}\n     * @private\n     */\n    this._properties = [false, true, false, false, false];\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._maxSize = maxSize;\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._batchSize = batchSize;\n\n    /**\n     * @member {WebGLBuffer}\n     * @private\n     */\n    this._buffers = null;\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._bufferToUpdate = 0;\n\n    /**\n     * @member {boolean}\n     *\n     */\n    this.interactiveChildren = false;\n\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    this.blendMode = JC.CONST.BLEND_MODES.NORMAL;\n\n    this.setProperties(properties);\n}\n\nJC.ParticleContainer = ParticleContainer;\nParticleContainer.prototype = Object.create(JC.Container.prototype);\nParticleContainer.prototype.constructor = JC.ParticleContainer;\n\n/**\n * Sets the private properties array to dynamic / static based on the passed properties object\n *\n * @param properties {object} The properties to be uploaded\n */\nParticleContainer.prototype.setProperties = function(properties)\n{\n    if ( properties ) {\n        this._properties[0] = 'scale' in properties ? !!properties.scale : this._properties[0];\n        this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n        this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n        this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n        this._properties[4] = 'alpha' in properties ? !!properties.alpha : this._properties[4];\n    }\n};\n\nParticleContainer.prototype.updateTransform = function ()\n{\n\n    this.displayObjectUpdateTransform();\n};\n\nParticleContainer.prototype.render = function (renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n    {\n        return;\n    }\n\n    renderer.setObjectRenderer( renderer.plugins.particle );\n    renderer.plugins.particle.render( this );\n};\n\n","function Renderer(view, options){\n    options = options || {};\n\n    if (options)\n    {\n        for (var i in JC.CONST.DEFAULT_RENDER_OPTIONS)\n        {\n            if (typeof options[i] === 'undefined')\n            {\n                options[i] = JC.CONST.DEFAULT_RENDER_OPTIONS[i];\n            }\n        }\n    }\n    else\n    {\n        options = JC.CONST.DEFAULT_RENDER_OPTIONS;\n    }\n\n    this.view = typeof view !== 'string' ? view : document.getElementById(view);\n\n    this.width = this.view.width;\n    this.height = this.view.height;\n\n    this.projection =  new Float32Array([this.width>>1, this.width>>1]);\n\n    this.resolution = options.resolution;\n\n    this.transparent = options.transparent;\n\n    this.autoResize = options.autoResize || false;\n\n    this.blendModes = null;\n\n    this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n    this.autoClear = options.autoClear;\n\n    this._backgroundColor = 0x000000;\n\n    this._backgroundColorRgb = [0, 0, 0];\n\n    this._backgroundColorString = '#000000';\n\n    this.backgroundColor = options.backgroundColor || this._backgroundColor;\n\n\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n\n    this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n    this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n\n    this._contextOptions = {\n        alpha: this.transparent,\n        antialias: options.antialias,\n        premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer\n    };\n\n    this.drawCount = 0;\n\n    this.shaderManager = new ShaderManager(this);\n\n    this.blendModeManager = new BlendModeManager(this);\n\n    this._createContext();\n    this._initContext();\n\n    this._mapGlModes();\n\n}\n\n// constructor\nJC.Renderer = Renderer;\nRenderer.prototype = Object.create(SystemRenderer.prototype);\nRenderer.prototype.constructor = Renderer;\n\nRenderer.glContextId = 0;\n\nRenderer.prototype._createContext = function () {\n    var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n    this.gl = gl;\n\n    if (!gl)\n    {\n        throw new Error('This browser does not support webGL. Try using the canvas renderer');\n    }\n\n    this.glContextId = Renderer.glContextId++;\n    gl.id = this.glContextId;\n    gl.renderer = this;\n};\n\nRenderer.prototype._initContext = function (){\n    var gl = this.gl;\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n    gl.enable(gl.BLEND);\n\n    this.emit('context', gl);\n\n    this.resize(this.width, this.height);\n\n};\n\nRenderer.prototype.render = function (object){\n\n    this.emit('prerender');\n\n    if (this.gl.isContextLost())\n    {\n        return;\n    }\n\n    this.drawCount = 0;\n\n    var cacheParent = object.parent;\n    object.parent = this._tempDisplayObjectParent;\n\n    object.updateTransform();\n\n    object.parent = cacheParent;\n\n    var gl = this.gl;\n\n\n    if (this.clearBeforeRender)\n    {\n        if (this.transparent)\n        {\n            gl.clearColor(0, 0, 0, 0);\n        }\n        else\n        {\n            gl.clearColor(this._backgroundColorRgb[0], this._backgroundColorRgb[1], this._backgroundColorRgb[2], 1);\n        }\n\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    this.renderDisplayObject(object);\n\n    this.emit('postrender');\n};\n\nRenderer.prototype.renderDisplayObject = function (displayObject){\n    displayObject.renderWebGL(this);\n};\n\nRenderer.prototype.handleContextLost = function (event){\n    event.preventDefault();\n};\n\nRenderer.prototype.handleContextRestored = function (){\n    this._initContext();\n};\n\nRenderer.prototype._mapGlModes = function (){\n    var gl = this.gl;\n\n    if (!this.blendModes)\n    {\n        this.blendModes = {};\n\n        this.blendModes[JC.CONST.BLEND_MODES.NORMAL]        = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[JC.CONST.BLEND_MODES.ADD]           = [gl.ONE,       gl.DST_ALPHA];\n        this.blendModes[JC.CONST.BLEND_MODES.MULTIPLY]      = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[JC.CONST.BLEND_MODES.SCREEN]        = [gl.ONE,       gl.ONE_MINUS_SRC_COLOR];\n    }\n\n    if (!this.drawModes)\n    {\n        this.drawModes = {};\n\n        this.drawModes[JC.CONST.DRAW_MODES.POINTS]         = gl.POINTS;\n        this.drawModes[JC.CONST.DRAW_MODES.LINES]          = gl.LINES;\n        this.drawModes[JC.CONST.DRAW_MODES.LINE_LOOP]      = gl.LINE_LOOP;\n        this.drawModes[JC.CONST.DRAW_MODES.LINE_STRIP]     = gl.LINE_STRIP;\n        this.drawModes[JC.CONST.DRAW_MODES.TRIANGLES]      = gl.TRIANGLES;\n        this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;\n        this.drawModes[JC.CONST.DRAW_MODES.TRIANGLE_FAN]   = gl.TRIANGLE_FAN;\n    }\n};\n\nObject.defineProperties(Renderer.prototype, {\n    backgroundColor:\n    {\n        get: function ()\n        {\n            return this._backgroundColor;\n        },\n        set: function (val)\n        {\n            this._backgroundColor = val;\n            this._backgroundColorString = utils.hex2string(val);\n            utils.hex2rgb(val, this._backgroundColorRgb);\n        }\n    }\n});\n\nRenderer.prototype.resize = function (width, height) {\n    this.width = width * this.resolution;\n    this.height = height * this.resolution;\n\n    this.view.width = this.width;\n    this.view.height = this.height;\n\n    this.projection =  new Float32Array([this.width>>1, this.width>>1]);\n\n    if (this.autoResize)\n    {\n        this.view.style.width = this.width / this.resolution + 'px';\n        this.view.style.height = this.height / this.resolution + 'px';\n    }\n};\n","\nfunction ShaderManager(renderer){\n\n    this.renderer = renderer;\n\n    this.shaderType = '';\n\n    this.currentShader = null;\n\n    this.init();\n}\n\nShaderManager.prototype.init = function (){\n\n    var gl = this.renderer.gl;\n\n    this.maxAttibs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n    this.shaderPool = {\n        particle: new ParticleShader(gl),\n        sprite: new SpriteShader(gl),\n        graphics: new GraphicsShader(gl),\n        text: new TextShader(gl)\n    };\n};\n\nShaderManager.prototype.setShader = function (shaderType)\n{\n    if (this.shaderType === shaderType)\n    {\n        return false;\n    }\n\n    this.currentShader = this.shaderPool[shaderType];\n\n    this.renderer.gl.useProgram(this.currentShader.program);\n\n    this.shaderType = shaderType;\n\n    return true;\n};\n\n","function Shader(gl, vertexSrc, fragmentSrc, uniforms, attributes) {\n    if (!vertexSrc || !fragmentSrc) {\n        throw new Error('jcw2d.js Error. Shader requires vertexSrc and fragmentSrc');\n    }\n\n    this.type = '';\n\n    this.gl = gl;\n\n    this.program = null;\n\n    this.uniforms = uniforms || {};\n\n    this.attributes = attributes || {};\n\n    this.textureCount = 1;\n\n    this.MAX_TEXTURE_UNITS = gl.getParameter(MAX_TEXTURE_IMAGE_UNITS);\n\n    this.vertexSrc = vertexSrc;\n\n    this.fragmentSrc = fragmentSrc;\n\n    this.init();\n}\n\nShader.prototype.constructor = Shader;\n\nShader.prototype.init = function() {\n    this.compile();\n\n    this.gl.useProgram(this.program);\n\n    this.cacheUniformLocations(Object.keys(this.uniforms));\n    this.cacheAttributeLocations(Object.keys(this.attributes));\n};\n\nShader.prototype.cacheUniformLocations = function(keys) {\n    for (var i = 0; i < keys.length; ++i) {\n        this.uniforms[keys[i]]._location = this.gl.getUniformLocation(this.program, keys[i]);\n    }\n};\n\nShader.prototype.cacheAttributeLocations = function(keys) {\n    for (var i = 0; i < keys.length; ++i) {\n        this.attributes[keys[i]] = this.gl.getAttribLocation(this.program, keys[i]);\n    }\n};\n\nShader.prototype.compile = function() {\n    var gl = this.gl;\n\n    var glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexSrc);\n    var glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentSrc);\n\n    var program = gl.createProgram();\n\n    gl.attachShader(program, glVertShader);\n    gl.attachShader(program, glFragShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error('jcw2d.js Error: Could not initialize shader.');\n        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        console.error('gl.getError()', gl.getError());\n\n        if (gl.getProgramInfoLog(program) !== '') {\n            console.warn('jcw2d.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n\n        gl.deleteProgram(program);\n        program = null;\n    }\n\n    // clean up some shaders\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    return (this.program = program);\n};\n\nShader.prototype.syncUniform = function(uniform) {\n    var location = uniform._location,\n        value = uniform.value,\n        gl = this.gl,\n        i, il;\n\n    switch (uniform.type) {\n        case 'b':\n        case 'bool':\n        case 'boolean':\n            gl.uniform1i(location, value ? 1 : 0);\n            break;\n\n            // single int value\n        case 'i':\n        case '1i':\n            gl.uniform1i(location, value);\n            break;\n\n            // single float value\n        case 'f':\n        case '1f':\n            gl.uniform1f(location, value);\n            break;\n\n            // Float32Array(2) or JS Arrray\n        case '2f':\n            gl.uniform2f(location, value[0], value[1]);\n            break;\n\n            // Float32Array(3) or JS Arrray\n        case '3f':\n            gl.uniform3f(location, value[0], value[1], value[2]);\n            break;\n\n            // Float32Array(4) or JS Arrray\n        case '4f':\n            gl.uniform4f(location, value[0], value[1], value[2], value[3]);\n            break;\n\n            // a 2D Point object\n        case 'v2':\n            gl.uniform2f(location, value.x, value.y);\n            break;\n\n            // a 3D Point object\n        case 'v3':\n            gl.uniform3f(location, value.x, value.y, value.z);\n            break;\n\n            // a 4D Point object\n        case 'v4':\n            gl.uniform4f(location, value.x, value.y, value.z, value.w);\n            break;\n\n            // Int32Array or JS Array\n        case '1iv':\n            gl.uniform1iv(location, value);\n            break;\n\n            // Int32Array or JS Array\n        case '2iv':\n            gl.uniform2iv(location, value);\n            break;\n\n            // Int32Array or JS Array\n        case '3iv':\n            gl.uniform3iv(location, value);\n            break;\n\n            // Int32Array or JS Array\n        case '4iv':\n            gl.uniform4iv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '1fv':\n            gl.uniform1fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '2fv':\n            gl.uniform2fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '3fv':\n            gl.uniform3fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case '4fv':\n            gl.uniform4fv(location, value);\n            break;\n\n            // Float32Array or JS Array\n        case 'm2':\n        case 'mat2':\n        case 'Matrix2fv':\n            gl.uniformMatrix2fv(location, uniform.transpose, value);\n            break;\n\n            // Float32Array or JS Array\n        case 'm3':\n        case 'mat3':\n        case 'Matrix3fv':\n\n            gl.uniformMatrix3fv(location, uniform.transpose, value);\n            break;\n\n            // Float32Array or JS Array\n        case 'm4':\n        case 'mat4':\n        case 'Matrix4fv':\n            gl.uniformMatrix4fv(location, uniform.transpose, value);\n            break;\n\n            // a Color Value\n        case 'c':\n            if (typeof value === 'number') {\n                value = utils.hex2rgb(value);\n            }\n\n            gl.uniform3f(location, value[0], value[1], value[2]);\n            break;\n\n            // flat array of integers (JS or typed array)\n        case 'iv1':\n            gl.uniform1iv(location, value);\n            break;\n\n            // flat array of integers with 3 x N size (JS or typed array)\n        case 'iv':\n            gl.uniform3iv(location, value);\n            break;\n\n            // flat array of floats (JS or typed array)\n        case 'fv1':\n            gl.uniform1fv(location, value);\n            break;\n\n            // flat array of floats with 3 x N size (JS or typed array)\n        case 'fv':\n            gl.uniform3fv(location, value);\n            break;\n\n            // array of 2D Point objects\n        case 'v2v':\n            if (!uniform._array) {\n                uniform._array = new Float32Array(2 * value.length);\n            }\n\n            for (i = 0, il = value.length; i < il; ++i) {\n                uniform._array[i * 2] = value[i].x;\n                uniform._array[i * 2 + 1] = value[i].y;\n            }\n\n            gl.uniform2fv(location, uniform._array);\n            break;\n\n            // array of 3D Point objects\n        case 'v3v':\n            if (!uniform._array) {\n                uniform._array = new Float32Array(3 * value.length);\n            }\n\n            for (i = 0, il = value.length; i < il; ++i) {\n                uniform._array[i * 3] = value[i].x;\n                uniform._array[i * 3 + 1] = value[i].y;\n                uniform._array[i * 3 + 2] = value[i].z;\n\n            }\n\n            gl.uniform3fv(location, uniform._array);\n            break;\n\n            // array of 4D Point objects\n        case 'v4v':\n            if (!uniform._array) {\n                uniform._array = new Float32Array(4 * value.length);\n            }\n\n            for (i = 0, il = value.length; i < il; ++i) {\n                uniform._array[i * 4] = value[i].x;\n                uniform._array[i * 4 + 1] = value[i].y;\n                uniform._array[i * 4 + 2] = value[i].z;\n                uniform._array[i * 4 + 3] = value[i].w;\n\n            }\n\n            gl.uniform4fv(location, uniform._array);\n            break;\n\n            // PIXI.Texture\n        case 't':\n        case 'sampler2D':\n\n            if (!uniform.value || !uniform.value.baseTexture.hasLoaded) {\n                break;\n            }\n\n            // activate this texture\n            gl.activeTexture(gl['TEXTURE' + this.textureCount]);\n\n            var texture = uniform.value.baseTexture.texture;\n\n            if (!texture) {\n                this.initSampler2D(uniform);\n\n                // set the textur to the newly created one..\n                texture = uniform.value.baseTexture.texture;\n            }\n\n            // bind the texture\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n\n            // set uniform to texture index\n            gl.uniform1i(uniform._location, this.textureCount);\n\n            // increment next texture id\n            this.textureCount++;\n\n            break;\n\n        default:\n            console.warn('jcw2d.js Shader Warning: Unknown uniform type: ' + uniform.type);\n    }\n};\n\nShader.prototype.syncUniforms = function() {\n    this.textureCount = 1;\n\n    for (var key in this.uniforms) {\n        this.syncUniform(this.uniforms[key]);\n    }\n};\n\nShader.prototype.initSampler2D = function(uniform) {\n    var gl = this.gl;\n\n    var texture = uniform.value.baseTexture;\n\n    if (!texture.hasLoaded) {\n        return;\n    }\n\n    this.updateTexture(texture);\n};\n\nShader.prototype.updateTexture = function (texture){\n    texture = texture.baseTexture || texture;\n\n    if (!texture.hasLoaded)\n    {\n        return;\n    }\n\n    var gl = this.gl;\n\n    if (!texture.texture)\n    {\n        texture.texture = gl.createTexture();\n        texture.on('update', this.updateTexture, this);\n    }\n\n\n    gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n\n\n    if (texture.mipmap && texture.isPowerOfTwo)\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    else\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === JC.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    }\n\n    if (!texture.isPowerOfTwo)\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    }\n    else\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    }\n\n    return  texture.texture;\n};\n\nShader.prototype._glCompile = function(type, src) {\n    var shader = this.gl.createShader(type);\n\n    this.gl.shaderSource(shader, src);\n    this.gl.compileShader(shader);\n\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n        console.log(this.gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n};\n","function SpriteShader(gl) {\n    var uniforms = {\n        uAlpha: { type: '1f', value: 1 },\n        uSampler: { type: 'sampler2D', value: 0 },\n        projectionMatrix: {\n            type: 'mat3',\n            value: new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1\n            ])\n        },\n        projectionVector: {\n            type: '2fv',\n            value: new Float32Array([1, 1])\n        }\n    };\n\n    if (customUniforms) {\n        for (var u in customUniforms) {\n            uniforms[u] = customUniforms[u];\n        }\n    }\n\n\n    var attributes = {\n        aVertexPosition: 0,\n        aTextureCoord: 0,\n        aColor: 0\n    };\n\n    if (customAttributes) {\n        for (var a in customAttributes) {\n            attributes[a] = customAttributes[a];\n        }\n    }\n\n    var vertexSrc = [\n        'precision lowp float;',\n        'attribute vec2 aVertexPosition;',\n        'attribute vec2 aTextureCoord;',\n        'attribute vec4 aColor;',\n\n        'uniform mat3 projectionMatrix;',\n        'uniform vec2 projectionVector;',\n\n        'varying vec2 vTextureCoord;',\n        'varying vec4 vColor;',\n\n        'void main(void){',\n        '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n        '   vTextureCoord = aTextureCoord;',\n        '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\n        '}'\n    ].join('\\n');\n\n    var fragmentSrc = [\n        'precision lowp float;',\n\n        'varying vec2 vTextureCoord;',\n        'varying vec4 vColor;',\n\n        'uniform sampler2D uSampler;',\n        'uniform float uAlpha;',\n\n        'void main(void){',\n        '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * uAlpha;',\n        '}'\n    ].join('\\n');\n\n\n    Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n}\n\n// constructor\nSpriteShader.prototype = Object.create(Shader.prototype);\nSpriteShader.prototype.constructor = SpriteShader;\n","function ParticleShader(shaderManager) {\n    var uniforms = {\n        uAlpha: { type: '1f', value: 1 },\n        uSampler: { type: 'sampler2D', value: 0 },\n        projectionMatrix: {\n            type: 'mat3',\n            value: new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1\n            ])\n        },\n        projectionVector: {\n            type: '2fv',\n            value: new Float32Array([1, 1])\n        }\n    };\n\n    if (customUniforms) {\n        for (var u in customUniforms) {\n            uniforms[u] = customUniforms[u];\n        }\n    }\n\n\n    var attributes = {\n        aVertexPosition: 0,\n        aTextureCoord: 0,\n        aAlpha: 0,\n        aPositionCoord: 0,\n        aRotation: 0\n    };\n\n    if (customAttributes) {\n        for (var a in customAttributes) {\n            attributes[a] = customAttributes[a];\n        }\n    }\n\n    var vertexSrc = [\n        'precision lowp float;',\n        \n        'attribute vec2 aVertexPosition;',\n        'attribute vec2 aTextureCoord;',\n        'attribute float aAlpha;',\n\n        'attribute vec2 aPositionCoord;',\n        'attribute float aRotation;',\n\n        'uniform mat3 projectionMatrix;',\n        'uniform vec2 projectionVector;',\n\n        'varying vec2 vTextureCoord;',\n        'varying float vAlpha;',\n\n        'void main(void){',\n        '   vec2 v = aVertexPosition;',\n\n        '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);',\n        '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);',\n        '   v = v + aPositionCoord;',\n\n        '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy / projectionVector, 0.0, 1.0);',\n\n        '   vTextureCoord = aTextureCoord;',\n        '   vAlpha = aAlpha;',\n        '}'\n    ].join('\\n');\n\n    var fragmentSrc = [\n        'precision lowp float;',\n\n        'varying vec2 vTextureCoord;',\n        'varying float vAlpha;',\n\n        'uniform sampler2D uSampler;',\n        'uniform float uAlpha;',\n\n        'void main(void){',\n        '  vec4 color = texture2D(uSampler, vTextureCoord) * vAlpha * uAlpha;',\n        '  if (color.a == 0.0) discard;',\n        '  gl_FragColor = color;',\n        '}'\n    ].join('\\n');\n\n\n    Shader.call(this, gl, vertexSrc, fragmentSrc, uniforms, attributes);\n\n}\n\nParticleShader.prototype = Object.create(TextureShader.prototype);\nParticleShader.prototype.constructor = ParticleShader;\n\nmodule.exports = ParticleShader;\n","function GraphicsShader(shaderManager) {\n    Shader.call(this,\n        shaderManager,\n        // vertex shader\n        [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec4 aColor;',\n\n            'uniform mat3 projectionMatrix;',\n            'uniform vec2 projectionVector;',\n\n            'uniform float alpha;',\n            'uniform vec3 tint;',\n\n            'varying vec4 vColor;',\n\n            'void main(void){',\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy / projectionVector, 0.0, 1.0);',\n            '   vColor = aColor * vec4(tint * alpha, alpha);',\n            '}'\n        ].join('\\n'),\n        // fragment shader\n        [\n            'precision mediump float;',\n\n            'varying vec4 vColor;',\n\n            'void main(void){',\n            '   gl_FragColor = vColor;',\n            '}'\n        ].join('\\n'),\n        // custom uniforms\n        {\n            tint: { type: '3f', value: [0, 0, 0] },\n            alpha: { type: '1f', value: 0 },\n            projectionMatrix: { type: 'mat3', value: new Float32Array(9) },\n            projectionVector: {\n                type: '2fv',\n                value: new Float32Array([1, 1])\n            }\n        },\n        // custom attributes\n        {\n            aVertexPosition: 0,\n            aColor: 0\n        }\n    );\n}\n\nGraphicsShader.prototype = Object.create(Shader.prototype);\nGraphicsShader.prototype.constructor = GraphicsShader;\n\n","(function() {\n    var lastTime = 0;\n    var androidUC = /(?=.*?uc)(?=.*?android)/i.test(window.navigator.userAgent);\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame||androidUC) {\n        window.requestAnimationFrame = function(callback) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 20 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n\n    window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n})();","\nJC.CONST = {\n    VERSION: '0.0.1',\n\n    PI_2: Math.PI * 2,\n\n    RTD: 180 / Math.PI,\n\n    DTR: Math.PI / 180,\n\n\n    /**\n     *\n     * @static\n     * @constant\n     * @property {object} BLEND_MODES\n     * @property {number} BLEND_MODES.NORMAL\n     * @property {number} BLEND_MODES.ADD\n     * @property {number} BLEND_MODES.MULTIPLY\n     * @property {number} BLEND_MODES.SCREEN\n     */\n    BLEND_MODES: {\n        NORMAL:         0,\n        ADD:            1,\n        MULTIPLY:       2,\n        SCREEN:         3\n    },\n\n    /**\n     *\n     * @static\n     * @constant\n     * @property {object} DRAW_MODES\n     * @property {number} DRAW_MODES.POINTS\n     * @property {number} DRAW_MODES.LINES\n     * @property {number} DRAW_MODES.LINE_LOOP\n     * @property {number} DRAW_MODES.LINE_STRIP\n     * @property {number} DRAW_MODES.TRIANGLES\n     * @property {number} DRAW_MODES.TRIANGLE_STRIP\n     * @property {number} DRAW_MODES.TRIANGLE_FAN\n     */\n    DRAW_MODES: {\n        POINTS:         0,\n        LINES:          1,\n        LINE_LOOP:      2,\n        LINE_STRIP:     3,\n        TRIANGLES:      4,\n        TRIANGLE_STRIP: 5,\n        TRIANGLE_FAN:   6\n    },\n\n    /**\n     *\n     * @static\n     * @constant\n     * @property {object} SCALE_MODES\n     * @property {number} SCALE_MODES.DEFAULT=LINEAR\n     * @property {number} SCALE_MODES.LINEAR Smooth scaling\n     * @property {number} SCALE_MODES.NEAREST Pixelating scaling\n     */\n    SCALE_MODES: {\n        DEFAULT:    0,\n        LINEAR:     0,\n        NEAREST:    1\n    },\n\n    DEFAULT_RENDER_OPTIONS: {\n        view: null,\n        resolution: 1,\n        antialias: false,\n        autoResize: false,\n        transparent: false,\n        backgroundColor: 0x000000,\n        clearBeforeRender: true,\n        preserveDrawingBuffer: false\n    },\n\n    SPRITE_BATCH_SIZE: 2000 //nice balance between mobile and desktop machines\n};","JC.TWEEN = {\n    easeBoth: function(t, b, c, d) { //加速减速曲线\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t + b;\n        }\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n    extend: function(opts) {\n        if (!opts) return;\n        for (var key in opts) {\n            if (key !== 'extend' && opts[key]) this[key] = opts[key];\n        }\n    }\n};\n"]}