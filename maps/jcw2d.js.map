{"version":3,"sources":["jcw2d.js","modules/jcw2d.js","modules/RAF.js","modules/tween.js","modules/math.js","modules/texture.js"],"names":["noop","Animate","this","MST","MAT","fx","complete","moving","infinity","alternate","repeats","window","JC","lastTime","vendors","x","length","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","RAF","requestAnimFrame","TWEEN","easeBoth","t","b","c","d","extend","opts","key","clamp","a","randIn","low","high","random","Texture","img","width","height","isPowerOfTwo","TextureUvs","x0","y0","x1","y1","x2","y2","x3","y3","TextureCache","ImageLoader","sources","crossorigin","receiveNum","failNum","requestNum","imgs","loading","prototype","constructor","ears","source","onload","This","onLoaded","onFailed","onerror","Image","crossOrigin","src","getTexture","VERSION","blendModes","NORMAL","ALPHA","ADD","MULTIPLY","SCREEN","scaleModes","DEFAULT","LINEAR","NEAREST","Float32Array","Uint16Array","Uint32Array","ArrayBuffer","Array","console","log","PI_2","PI","RTD","DTR","dontSpeek","defaultRenderOptions","view","transparent","antialias","preserveDrawingBuffer","resolution","clearBeforeRender","autoResize","sayHello","type","navigator","userAgent","toLowerCase","indexOf","args","apply","Point","y","clone","set","Matrix","tx","ty","fromArray","array","toArray","transpose","pos","newPos","applyInverse","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","identity","identityMatrix","moveTween","now","MATR","attr","time","MATRC","i","manager","nextPose","setVal","DisplayObject","call","visible","worldAlpha","alpha","scaleX","scaleY","skewX","skewY","rotation","rotationCache","_sr","_cr","pivotX","pivotY","_mask","parent","worldTransform","renderable","_cacheAsBitmap","_cacheIsDirty","Object","create","defineProperty","get","value","isMask","_generateCachedSprite","_destroyCachedSprite","vals","undefined","upDate","renderSession","texturesManager","setTexture","texture","shaderManager","setShader","shaderType","blendModeManager","setBlendMode","blendMode","dirty","createBuffer","gl","syncAttribute","syncUniforms","updateTransform","pt","wt","displayObjectUpdateTransform","render","DisplayObjectContainer","children","addChilds","l","arguments","addChildAt","child","index","removeChild","splice","Error","swapChildren","child2","index1","getChildIndex","index2","setChildIndex","currentIndex","getChildAt","removeChildAt","stage","removeStageReference","removeChildren","beginIndex","endIndex","begin","end","range","removed","j","displayObjectContainerUpdateTransform","_renderCachedSprite","maskManager","pushMask","mask","popMask","Sprite","sH","sW","tint","shader","repeatX","repeatY","buildMesh","w","h","vertices","indices","rX","rY","uvs","cachedTint","hex2rgb","vertexBuffer","uvsBuffer","indicesBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","projection","uniform1i","uSampler","uniform1f","uAlpha","uniform2f","projectionVector","uniformMatrix3fv","uMatrix","uniform3fv","uTint","enableVertexAttribArray","aVertexPosition","vertexAttribPointer","FLOAT","aTextureCoord","drawElements","TRIANGLES","UNSIGNED_SHORT","fromFrame","frameId","fromImage","imageId","scaleMode","Stage","backgroundColor","setBackgroundColor","bgc","hex","rgb2hex","rgb","Function","bind","thisArg","bound","boundArgs","concat","target","TypeError","F","proto","getNextPowerOfTwo","number","result","CompileVertexShader","shaderSrc","_CompileShader","VERTEX_SHADER","CompileFragmentShader","FRAGMENT_SHADER","join","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","compileProgram","vertexSrc","fragmentSrc","fragmentShader","vertexShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","SpriteShader","program","textureCount","init","useProgram","getUniformLocation","getAttribLocation","destroy","deleteProgram","PointShader","Renderer","options","devicePixelRatio","document","createElement","contextLostBound","handleContextLost","contextRestoredBound","handleContextRestored","addEventListener","_contextOptions","premultipliedAlpha","stencil","offset","ShaderManager","TexturesManager","WebGLMaskManager","WebGLBlendModeManager","renderer","initContext","mapBlendModes","getContext","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","setContext","resize","contextLost","clearColor","clear","COLOR_BUFFER_BIT","renderDisplayObject","displayObject","buffer","style","viewport","event","preventDefault","blendModesWebGL","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","DST_ALPHA","DST_COLOR","textures","currentId","setPara","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","currentBlendMode","blendModeWebGL","blendEquation","FUNC_ADD","blendFunc","shaders","_curShaderType","maskData","STENCIL_TEST","depthMask","colorMask","stencilFunc","ALWAYS","stencilOp","KEEP","REPLACE","EQUAL","exports","module","define","amd"],"mappings":"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","file":"../src/jcw2d.js","sourcesContent":["(function() {\n    window.JC = window.JC||{};\n\n    (function() {\n        var lastTime = 0;\n        var vendors = ['ms', 'moz', 'webkit', 'o'];\n        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n                window[vendors[x] + 'CancelRequestAnimationFrame'];\n        }\n    \n        if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = function(callback) {\n                var currTime = new Date().getTime();\n                var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                  timeToCall);\n                lastTime = currTime + timeToCall;\n                return id;\n            };\n        }\n    \n        if (!window.cancelAnimationFrame) {\n            window.cancelAnimationFrame = function(id) {\n                clearTimeout(id);\n            };\n        }\n    \n        window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n    })();\n\n    JC.TWEEN = {\n        easeBoth: function(t, b, c, d) { //加速减速曲线\n            if ((t /= d / 2) < 1) {\n                return c / 2 * t * t + b;\n            }\n            return -c / 2 * ((--t) * (t - 2) - 1) + b;\n        },\n        extend: function(opts) {\n            if (!opts) return;\n            for (var key in opts) {\n                if (key !== 'extend' && opts[key]) this[key] = opts[key];\n            }\n        }\n    };\n    \n\n    JC.Math = {\n        clamp: function(x, a, b) {\n    \n            return (x < a) ? a : ((x > b) ? b : x);\n    \n        },\n        randIn: function(low, high) {\n    \n            return low + Math.random() * (high - low);\n    \n        }\n    };\n    \n\n    JC.Texture = function(id, img) {\n        this.id = id;\n        this.img = img;\n        this.width = img.width;\n        this.height = img.height;\n        this.isPowerOfTwo = JC.isPowerOfTwo(this.width, this.height);\n    };\n    \n    \n    JC.TextureUvs = function() {\n        this.x0 = 0;\n        this.y0 = 0;\n    \n        this.x1 = 0;\n        this.y1 = 0;\n    \n        this.x2 = 0;\n        this.y2 = 0;\n    \n        this.x3 = 0;\n        this.y3 = 0;\n    };\n    \n    \n    \n    JC.TextureCache = {};\n    \n    \n    JC.ImageLoader = function(sources, crossorigin) {\n        this.receiveNum = 0;\n        this.failNum = 0;\n        this.requestNum = 0;\n        this.crossorigin = crossorigin;\n        this.sources = sources || {};\n        this.imgs = {};\n    \n        this.loading();\n    };\n    JC.ImageLoader.prototype.constructor = JC.ImageLoader;\n    JC.ImageLoader.prototype.loading = function() {\n        var This = this;\n    \n        function ears(source, img) {\n            img.onload = function() {\n                This.receiveNum++;\n                JC.TextureCache[source] = new JC.Texture(source, img);\n                if ((This.receiveNum + This.failNum) >= This.requestNum) {\n                    This.onLoaded();\n                    This.failNum > 0 && This.onFailed();\n                }\n            };\n            img.onerror = function() {\n                This.failNum++;\n            };\n        }\n    \n        for (var source in this.sources) {\n            this.imgs[source] = new Image();\n    \n            ears(source, this.imgs[source]);\n    \n            if (this.crossorigin) {\n                this.imgs[source].crossOrigin = '';\n            }\n            this.imgs[source].src = this.sources[source];\n            this.requestNum++;\n        }\n    };\n    JC.ImageLoader.prototype.getTexture = function(id) {\n        return JC.TextureCache[id];\n    };\n    JC.ImageLoader.prototype.onLoaded = function() {};\n    JC.ImageLoader.prototype.onFailed = function() {};\n    \n\n    \n    JC.VERSION = \"v0.0.3\";\n    \n    JC.blendModes = {\n        NORMAL: 0,\n        ALPHA: 1,\n        ADD: 2,\n        MULTIPLY: 3,\n        SCREEN: 4\n    };\n    \n    JC.scaleModes = {\n        DEFAULT: 0,\n        LINEAR: 0,\n        NEAREST: 1\n    };\n    \n    if (typeof(Float32Array) != 'undefined') {\n        JC.Float32Array = Float32Array;\n        JC.Uint16Array = Uint16Array;\n    \n        JC.Uint32Array = Uint32Array;\n        JC.ArrayBuffer = ArrayBuffer;\n    } else {\n        JC.Float32Array = Array;\n        JC.Uint16Array = Array;\n    \n        JC.Uint32Array = Array;\n        JC.ArrayBuffer = Array;\n        console.log('%c not type array ', 'color: #fff;background: #f00;');\n    }\n    \n    JC.PI_2 = Math.PI * 2;\n    \n    JC.RTD = 180 / Math.PI;\n    \n    JC.DTR = Math.PI / 180;\n    \n    JC.dontSpeek = false;\n    \n    JC.defaultRenderOptions = {\n        view: null,\n        transparent: false,\n        antialias: false,\n        preserveDrawingBuffer: false,\n        resolution: 1,\n        clearBeforeRender: true,\n        autoResize: false\n    };\n    \n    function noop() {}\n    \n    JC.sayHello = function(type) {\n        if (JC.dontSpeek) return;\n    \n        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n            var args = [\n                '%c  %c jcw2d.js ' + JC.VERSION + '  %c ' + ' %c ' + ' http://www.jason82.com/ %c  ',\n                'background: #80a89e',\n                'color: #f98165; background: #cad9d5;',\n                'background: #80a89e',\n                'background: #cad9d5',\n                'background: #80a89e'\n            ];\n    \n            console.log.apply(console, args);\n        } else {\n            console.log(' jcw2d.js ' + JC.VERSION + '  http://www.jason82.com/  ');\n        }\n    \n        JC.dontSpeek = true;\n    };\n    \n    \n    JC.Point = function(x, y) {\n        this.x = x || 0;\n    \n        this.y = y || 0;\n    };\n    JC.Point.prototype.clone = function() {\n        return new JC.Point(this.x, this.y);\n    };\n    JC.Point.prototype.set = function(x, y) {\n        this.x = x || 0;\n        this.y = y || ((y !== 0) ? this.x : 0);\n    };\n    JC.Point.prototype.constructor = JC.Point;\n    \n    \n    JC.Matrix = function() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n    };\n    JC.Matrix.prototype.fromArray = function(array) {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    };\n    JC.Matrix.prototype.toArray = function(transpose) {\n        if (!this.array) this.array = new JC.Float32Array(9);\n        var array = this.array;\n    \n        if (transpose) {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        } else {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n    \n        return array;\n    };\n    JC.Matrix.prototype.apply = function(pos, newPos) {\n        newPos = newPos || new JC.Point();\n    \n        newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n        newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n    \n        return newPos;\n    };\n    JC.Matrix.prototype.applyInverse = function(pos, newPos) {\n        newPos = newPos || new JC.Point();\n    \n        var id = 1 / (this.a * this.d + this.c * -this.b);\n    \n        newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n        newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n    \n        return newPos;\n    };\n    JC.Matrix.prototype.translate = function(x, y) {\n        this.tx += x;\n        this.ty += y;\n    \n        return this;\n    };\n    JC.Matrix.prototype.scale = function(x, y) {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n    \n        return this;\n    };\n    JC.Matrix.prototype.rotate = function(angle) {\n        var cos = Math.cos(angle);\n        var sin = Math.sin(angle);\n    \n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n    \n        this.a = a1 * cos - this.b * sin;\n        this.b = a1 * sin + this.b * cos;\n        this.c = c1 * cos - this.d * sin;\n        this.d = c1 * sin + this.d * cos;\n        this.tx = tx1 * cos - this.ty * sin;\n        this.ty = tx1 * sin + this.ty * cos;\n    \n        return this;\n    };\n    JC.Matrix.prototype.append = function(matrix) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n    \n        this.a = matrix.a * a1 + matrix.b * c1;\n        this.b = matrix.a * b1 + matrix.b * d1;\n        this.c = matrix.c * a1 + matrix.d * c1;\n        this.d = matrix.c * b1 + matrix.d * d1;\n    \n        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    \n        return this;\n    };\n    JC.Matrix.prototype.identity = function() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n    \n        return this;\n    };\n    \n    JC.identityMatrix = new JC.Matrix();\n    \n    \n    function Animate() {\n        this.MST = 0;\n        this.MAT = 300;\n        this.fx = 'easeBoth';\n        this.complete = noop;\n        this.moving = false;\n        this.infinity = false;\n        this.alternate = false;\n        this.repeats = 0;\n    }\n    Animate.prototype.moveTween = function(opts) {\n        this.MST = Date.now();\n        this.MATR = opts.attr || this.MATR;\n        this.MAT = opts.time || this.MAT;\n        this.fx = opts.fx || this.fx;\n        this.complete = opts.complete || this.complete;\n        this.infinity = opts.infinity || this.infinity;\n        this.alternate = opts.alternate || this.alternate;\n        this.repeats = opts.repeats || this.repeats;\n        this.moving = true;\n        this.MATRC = {};\n        for (var i in this.MATR) {\n            this.MATRC[i] = this[i];\n        }\n    };\n    Animate.prototype.manager = function() {\n        if (!this.moving) return;\n        var now = Date.now();\n        if (now < this.MST + this.MAT) {\n            this.nextPose();\n        } else {\n            this.setVal(this.MATR);\n            if (this.repeats > 0 || this.infinity) {\n                this.repeats > 0 && --this.repeats;\n                if (this.alternate) {\n                    this.moveTween({ attr: this.MATRC });\n                } else {\n                    this.setVal(this.MATRC);\n                    this.moveTween({ attr: this.MATR });\n                }\n            } else {\n                this.moving = false;\n                this.complete();\n                if (now > this.MST) this.complete = noop;\n            }\n        }\n    };\n    Animate.prototype.nextPose = function() {\n        var now = Date.now() - this.MST;\n        for (var i in this.MATR) {\n            this[i] = JC.TWEEN[this.fx](now, this.MATRC[i], this.MATR[i] - this.MATRC[i], this.MAT);\n        }\n    };\n    \n    JC.DisplayObject = function() {\n        Animate.call(this);\n        this.visible = true;\n        this.worldAlpha = 1;\n        this.alpha = 1;\n    \n        this.scaleX = 1;\n        this.scaleY = 1;\n    \n        this.skewX = 0;\n        this.skewY = 0;\n    \n        this.rotation = 0;\n        this.rotationCache = 0;\n        this._sr = 0;\n        this._cr = 1;\n    \n        this.x = 0;\n        this.y = 0;\n    \n        this.pivotX = 0;\n        this.pivotY = 0;\n    \n        this._mask = null;\n    \n        this.parent = null;\n        this.worldTransform = new JC.Matrix();\n    \n        this.renderable = false;\n    \n        this._cacheAsBitmap = false;\n    \n        this._cacheIsDirty = false;\n    };\n    \n    JC.DisplayObject.prototype = Object.create(Animate.prototype);\n    JC.DisplayObject.prototype.constructor = JC.DisplayObject;\n    \n    Object.defineProperty(JC.DisplayObject.prototype, 'mask', {\n        get: function() {\n            return this._mask;\n        },\n        set: function(value) {\n    \n            if (this._mask) this._mask.isMask = false;\n            this._mask = value;\n            if (this._mask) this._mask.isMask = true;\n        }\n    });\n    \n    Object.defineProperty(JC.DisplayObject.prototype, 'cacheAsBitmap', {\n    \n        get: function() {\n            return this._cacheAsBitmap;\n        },\n    \n        set: function(value) {\n    \n            if (this._cacheAsBitmap === value) return;\n    \n            if (value) {\n                this._generateCachedSprite();\n            } else {\n                this._destroyCachedSprite();\n            }\n    \n            this._cacheAsBitmap = value;\n        }\n    });\n    \n    JC.DisplayObject.prototype.setVal = function(vals) {\n        if (vals === undefined) return;\n        for (var key in vals) {\n            if (this[key] === undefined) {\n                continue;\n            } else {\n                this[key] = vals[key];\n            }\n        }\n    };\n    \n    JC.DisplayObject.prototype.upDate = function(renderSession) {\n        renderSession.texturesManager.setTexture(this.texture);\n        renderSession.shaderManager.setShader(this.shaderType);\n        renderSession.blendModeManager.setBlendMode(this.blendMode);\n        this.dirty && this.createBuffer(renderSession.gl);\n        this.syncAttribute(renderSession);\n        this.syncUniforms(renderSession);\n    };\n    \n    JC.DisplayObject.prototype.updateTransform = function() {\n        var pt = this.parent.worldTransform;\n        var wt = this.worldTransform;\n    \n        var a, b, c, d, tx, ty;\n    \n        if (this.rotation % JC.PI_2) {\n            if (this.rotation !== this.rotationCache) {\n                this.rotationCache = this.rotation;\n                this._sr = Math.sin(this.rotation);\n                this._cr = Math.cos(this.rotation);\n            }\n    \n            a = this._cr * this.scaleX;\n            b = this._sr * this.scaleX;\n            c = -this._sr * this.scaleY;\n            d = this._cr * this.scaleY;\n            tx = this.x;\n            ty = this.y;\n    \n            if (this.pivotX || this.pivotY) {\n                tx -= this.pivotX * a + this.pivotY * c;\n                ty -= this.pivotX * b + this.pivotY * d;\n            }\n    \n            wt.a = a * pt.a + b * pt.c;\n            wt.b = a * pt.b + b * pt.d;\n            wt.c = c * pt.a + d * pt.c;\n            wt.d = c * pt.b + d * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n    \n    \n        } else {\n            a = this.scaleX;\n            d = this.scaleY;\n    \n            tx = this.x - this.pivotX * a;\n            ty = this.y - this.pivotY * d;\n    \n            wt.a = a * pt.a;\n            wt.b = a * pt.b;\n            wt.c = d * pt.c;\n            wt.d = d * pt.d;\n            wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n            wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n        }\n    \n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    \n        this.manager();\n    };\n    \n    JC.DisplayObject.prototype.displayObjectUpdateTransform = JC.DisplayObject.prototype.updateTransform;\n    \n    JC.DisplayObject.prototype.render = function(renderSession) {\n        // OVERWRITE;\n        // this line is just here to pass jshinting :)\n        renderSession = renderSession;\n    };\n    \n    \n    \n    JC.DisplayObjectContainer = function() {\n        JC.DisplayObject.call(this);\n    \n        this.children = [];\n    };\n    \n    JC.DisplayObjectContainer.prototype = Object.create(JC.DisplayObject.prototype);\n    JC.DisplayObjectContainer.prototype.constructor = JC.DisplayObjectContainer;\n    \n    JC.DisplayObjectContainer.prototype.addChilds = function() {\n        var l = arguments.length;\n        if (l > 0) {\n            for (var i = 0; i < l; i++) {\n                this.addChildAt(arguments[i], this.children.length);\n            }\n            return arguments[l - 1];\n        }\n    };\n    \n    JC.DisplayObjectContainer.prototype.addChildAt = function(child, index) {\n        if (index >= 0 && index <= this.children.length) {\n            if (child.parent) {\n                child.parent.removeChild(child);\n            }\n    \n            child.parent = this;\n    \n            this.children.splice(index, 0, child);\n    \n            return child;\n        } else {\n            throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);\n        }\n    };\n    \n    JC.DisplayObjectContainer.prototype.swapChildren = function(child, child2) {\n        if (child === child2) {\n            return;\n        }\n    \n        var index1 = this.getChildIndex(child);\n        var index2 = this.getChildIndex(child2);\n    \n        if (index1 < 0 || index2 < 0) {\n            throw new Error('swapChildren: Both the supplied DisplayObjects must be a child of the caller.');\n        }\n    \n        this.children[index1] = child2;\n        this.children[index2] = child;\n    \n    };\n    \n    JC.DisplayObjectContainer.prototype.getChildIndex = function(child) {\n        var index = this.children.indexOf(child);\n        if (index === -1) {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n        return index;\n    };\n    \n    JC.DisplayObjectContainer.prototype.setChildIndex = function(child, index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('The supplied index is out of bounds');\n        }\n        var currentIndex = this.getChildIndex(child);\n        this.children.splice(currentIndex, 1); //remove from old position\n        this.children.splice(index, 0, child); //add at new position\n    };\n    \n    JC.DisplayObjectContainer.prototype.getChildAt = function(index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject must be a child of the caller');\n        }\n        return this.children[index];\n    \n    };\n    \n    JC.DisplayObjectContainer.prototype.removeChild = function(child) {\n        var index = this.children.indexOf(child);\n        if (index === -1) return;\n    \n        return this.removeChildAt(index);\n    };\n    \n    JC.DisplayObjectContainer.prototype.removeChildAt = function(index) {\n        var child = this.getChildAt(index);\n        if (this.stage)\n            child.removeStageReference();\n    \n        child.parent = undefined;\n        this.children.splice(index, 1);\n        return child;\n    };\n    \n    JC.DisplayObjectContainer.prototype.removeChildren = function(beginIndex, endIndex) {\n        var begin = beginIndex || 0;\n        var end = typeof endIndex === 'number' ? endIndex : this.children.length;\n        var range = end - begin;\n    \n        if (range > 0 && range <= end) {\n            var removed = this.children.splice(begin, range);\n            for (var i = 0; i < removed.length; i++) {\n                var child = removed[i];\n                if (this.stage)\n                    child.removeStageReference();\n                child.parent = undefined;\n            }\n            return removed;\n        } else if (range === 0 && this.children.length === 0) {\n            return [];\n        } else {\n            throw new Error('removeChildren: Range Error, numeric values are outside the acceptable range');\n        }\n    };\n    \n    JC.DisplayObjectContainer.prototype.updateTransform = function() {\n        if (!this.visible) return;\n    \n        this.displayObjectUpdateTransform();\n    \n        for (var i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].updateTransform();\n        }\n    };\n    \n    JC.DisplayObjectContainer.prototype.displayObjectContainerUpdateTransform = JC.DisplayObjectContainer.prototype.updateTransform;\n    \n    JC.DisplayObjectContainer.prototype.render = function(renderSession) {\n        if (!this.visible || this.alpha <= 0) return;\n    \n        if (this._cacheAsBitmap) {\n            this._renderCachedSprite(renderSession);\n            return;\n        }\n    \n        var i, j;\n    \n        if (this._mask) {\n    \n            if (this._mask) {\n                renderSession.maskManager.pushMask(this.mask, renderSession);\n            }\n    \n            // simple render children!\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n    \n            if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n    \n        } else {\n            // simple render children!\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n        }\n    };\n    \n    \n    \n    \n    JC.Sprite = function(opts) {\n        JC.DisplayObjectContainer.call(this);\n    \n        this.texture = opts.texture;\n    \n        this.width = opts.width || this.texture.width;\n    \n        this.height = opts.height || this.texture.height;\n    \n        this.sH = opts.sH || 0;\n    \n        this.sW = opts.sW || 0;\n    \n        this.tint = opts.tint || 0xFFFFFF;\n    \n        this.blendMode = opts.blendModes || JC.blendModes.ALPHA;\n    \n        this.shader = null;\n        this.shaderType = 'sprite';\n    \n        this.repeatX = opts.repeatX || false;\n        this.repeatY = opts.repeatY || false;\n    \n        this.renderable = true;\n    \n        this.buildMesh();\n    \n    };\n    \n    JC.Sprite.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n    JC.Sprite.prototype.constructor = JC.Sprite;\n    \n    \n    JC.Sprite.prototype.buildMesh = function() {\n        var w = this.texture.width,\n            h = this.texture.height;\n        this.vertices = new JC.Float32Array([-this.width / 2, this.height / 2, -this.width / 2, -this.height / 2,\n            this.width / 2, -this.height / 2,\n            this.width / 2, this.height / 2\n        ]);\n        this.indices = new JC.Uint16Array([\n            0, 1, 2,\n            0, 2, 3\n        ]);\n        if (this.repeatX || this.repeatY) {\n            var rX = this.repeatX ? 2 : 1,\n                rY = this.repeatY ? 2 : 1;\n            this.uvs = new JC.Float32Array([\n                0 * rX, 0 * rY,\n                0 * rX, 1 * rY,\n                1 * rX, 1 * rY,\n                1 * rX, 0 * rY\n            ]);\n        } else {\n            this.uvs = new JC.Float32Array([\n                this.sW / w, this.sH / h,\n                this.sW / w, (this.sH + this.height) / h,\n                (this.sW + this.width) / w, (this.sH + this.height) / h,\n                (this.sW + this.width) / w, this.sH / h\n            ]);\n        }\n        this.cachedTint = JC.hex2rgb(this.tint);\n        this.dirty = true;\n    };\n    \n    JC.Sprite.prototype.createBuffer = function(gl) {\n        this.vertexBuffer = gl.createBuffer();\n        this.uvsBuffer = gl.createBuffer();\n        this.indicesBuffer = gl.createBuffer();\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    \n        this.dirty = false;\n    };\n    \n    JC.Sprite.prototype.syncUniforms = function(renderSession) {\n        var gl = renderSession.gl,\n            shader = renderSession.shaderManager.shader,\n            projection = renderSession.projection;\n    \n        gl.uniform1i(shader.uSampler, 0);\n        gl.uniform1f(shader.uAlpha, this.worldAlpha);\n        gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n        gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n        gl.uniform3fv(shader.uTint, this.cachedTint);\n    \n    };\n    \n    JC.Sprite.prototype.syncAttribute = function(renderSession) {\n        var gl = renderSession.gl,\n            shader = renderSession.shaderManager.shader;\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.enableVertexAttribArray(shader.aVertexPosition);\n        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n        gl.enableVertexAttribArray(shader.aTextureCoord);\n        gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n    \n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    };\n    \n    JC.Sprite.prototype.render = function(renderSession) {\n        if (!this.visible || this.alpha <= 0) return;\n        this.upDate(renderSession);\n        var i, j, gl = renderSession.gl;\n    \n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask) {\n    \n            if (this._mask) {\n                renderSession.maskManager.pushMask(this.mask, renderSession);\n            }\n    \n            // add this sprite to the batch\n            gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n    \n            // now loop through the children and make sure they get rendered\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n    \n            // time to stop the sprite batch as either a mask element or a filter draw will happen next\n    \n            if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n        } else {\n    \n            gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n    \n            // simple render children!\n            for (i = 0, j = this.children.length; i < j; i++) {\n                this.children[i].render(renderSession);\n            }\n    \n        }\n    };\n    \n    JC.Sprite.fromFrame = function(frameId) {\n        var texture = JC.TextureCache[frameId];\n        if (!texture) throw new Error('The frameId \"' + frameId + '\" does not exist in the texture cache' + this);\n        return new JC.Sprite(texture);\n    };\n    \n    JC.Sprite.fromImage = function(imageId, crossorigin, scaleMode) {\n        var texture = JC.Texture.fromImage(imageId, crossorigin, scaleMode);\n        return new JC.Sprite(texture);\n    };\n    \n    \n    \n    \n    // JC.Point = function(opts) {\n    //     this.x = opts.x;\n    //     this.y = opts.y;\n    \n    //     this.radius = opts.radius || 10;\n    //     this.color = opts.color;\n    //     this.alpha = opts.alpha;\n    \n    //     this.alive = true;\n    \n    //     this.wander = JC.Math.randIn( 0.5, 2.0 );\n    //     this.theta = JC.Math.randIn( 0, Math.PI*2 );\n    //     this.drag = 0.92;\n    \n    //     this.vx = 0.0;\n    //     this.vy = 0.0;\n    // };\n    // JC.Point.prototype.move = function() {\n    //     this.x += this.vx;\n    //     this.y += this.vy;\n    \n    //     this.vx *= this.drag;\n    //     this.vy *= this.drag;\n    \n    //     this.theta += JC.Math.randIn( -0.5, 0.5 ) * this.wander;\n    //     this.vx += Math.sin( this.theta ) * 0.1;\n    //     this.vy += Math.cos( this.theta ) * 0.1;\n    \n    //     this.radius *= 0.96;\n    //     this.alive = this.radius > 0.5;\n    // };\n    // JC.Point.prototype.revive = function() {\n    //     var theta = JC.Math.randIn( 0, Math.PI*2 ),\n    //         force = JC.Math.randIn( 2, 8 );\n    //     this.x = JC.Math.randIn( -20, 20 );\n    //     this.y = JC.Math.randIn( -20, 20 );\n    \n    //     this.vx = Math.sin( theta ) * force;\n    //     this.vy = Math.cos( theta ) * force;\n    \n    //     this.drag = JC.Math.randIn( 0.9, 0.99 );\n    //     this.wander = JC.Math.randIn( 0.5, 2.0 );\n    \n    \n    //     this.radius = JC.Math.randIn(4,20);\n    // };\n    \n    \n    \n    // JC.Particles = function(opts) {\n    //     JC.DisplayObjectContainer.call(this);\n    \n    //     this.points = [];\n    \n    //     this.texture = opts.texture;\n    \n    //     this.tint = opts.tint||0xFFFFFF;\n    \n    //     this.blendMode = opts.blendModes||JC.blendModes.ALPHA;\n    \n    //     this.shader = null;\n    \n    //     this.renderable = true;\n    \n    //     this.buildMesh();\n    \n    // };\n    \n    // JC.Particles.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n    // JC.Particles.prototype.constructor = JC.Particles;\n    // JC.Particles.prototype.buildMesh = function() {\n    //     this.vertices = new JC.Float32Array(this.points.length*2);\n    //     this.sizes = new JC.Uint16Array(this.points.length);\n    //     this.point_colors = new JC.Float32Array(this.points.length*4);\n    //     var ct;\n    //     for(var i=0;i<this.points.length;i++){\n    //         this.vertices[2*i] = this.points[i].x;\n    //         this.vertices[2*i+1] = this.points[i].y;\n    //         this.sizes[i] = this.points[i].radius;\n    //         ct = JC.hex2rgb(this.points[i].color);\n    //         this.point_colors[4*i] = ct[0];\n    //         this.point_colors[4*i+1] = ct[1];\n    //         this.point_colors[4*i+2] = ct[2];\n    //         this.point_colors[4*i+3] = this.points[i].alpha;\n    //     }\n    // };\n    // JC.Particles.prototype.createBuffer = function(gl){\n    //     this.vertexBuffer = gl.createBuffer();\n    //     this.sizesBuffer = gl.createBuffer();\n    //     this.colorsBuffer = gl.createBuffer();\n    \n    //     gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    //     gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n    //     gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    //     gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n    //     gl.bufferData(gl.ARRAY_BUFFER, this.sizes, gl.DYNAMIC_DRAW);\n    //     gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    //     gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n    //     gl.bufferData(gl.ARRAY_BUFFER, this.point_colors, gl.DYNAMIC_DRAW);\n    //     gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    //     this.dirty = false;\n    // };\n    // JC.Particles.prototype.syncUniforms = function(renderSession){\n    //     var gl = renderSession.gl,\n    //         shader = renderSession.shaderManager.shader,\n    //         projection = renderSession.projection;\n    \n    //     gl.uniform1i(shader.uSampler, 0);\n    //     gl.uniform1f(shader.uAlpha, this.worldAlpha);\n    //     gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n    //     gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n    //     gl.uniform3fv(shader.uTint, this.cachedTint);\n    \n    // };\n    \n    // JC.Particles.prototype.syncAttribute = function(renderSession){\n    //     var gl = renderSession.gl,\n    //         shader = renderSession.shaderManager.shader;\n    \n    //     gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    //     gl.enableVertexAttribArray(shader.aVertexPosition);\n    //     gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n    \n    //     gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n    //     gl.enableVertexAttribArray(shader.aPointSize);\n    //     gl.vertexAttribPointer(shader.aPointSize, 2, gl.FLOAT, false, 0, 0);\n    \n    //     gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n    //     gl.enableVertexAttribArray(shader.aPointColors);\n    //     gl.vertexAttribPointer(shader.aPointColors, 4, gl.FLOAT, false, 0, 0);\n    \n    // };\n    \n    \n    \n    \n    JC.Stage = function(backgroundColor) {\n        JC.DisplayObjectContainer.call(this);\n    \n        this.worldTransform = new JC.Matrix();\n    \n        this.stage = this;\n    \n        this.setBackgroundColor(backgroundColor);\n    };\n    \n    JC.Stage.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n    JC.Stage.prototype.constructor = JC.Stage;\n    \n    JC.Stage.prototype.updateTransform = function() {\n        this.worldAlpha = 1;\n    \n        for (var i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].updateTransform();\n        }\n    };\n    \n    JC.Stage.prototype.setBackgroundColor = function(bgc) {\n        if (typeof bgc === 'number') return;\n        this.backgroundColor = JC.hex2rgb(bgc);\n    };\n    \n    \n    \n    JC.hex2rgb = function(hex) {\n        return [(hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255];\n    };\n    \n    JC.rgb2hex = function(rgb) {\n        return ((rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255);\n    };\n    \n    /**\n     * A polyfill for Function.prototype.bind\n     *\n     * @method bind\n     */\n    if (typeof Function.prototype.bind !== 'function') {\n        Function.prototype.bind = (function() {\n            return function(thisArg) {\n                var target = this,\n                    i = arguments.length - 1,\n                    boundArgs = [];\n                if (i > 0) {\n                    boundArgs.length = i;\n                    while (i--) boundArgs[i] = arguments[i + 1];\n                }\n    \n                if (typeof target !== 'function') throw new TypeError();\n    \n                function bound() {\n                    var i = arguments.length,\n                        args = new Array(i);\n                    while (i--) args[i] = arguments[i];\n                    args = boundArgs.concat(args);\n                    return target.apply(this instanceof bound ? this : thisArg, args);\n                }\n    \n                bound.prototype = (function F(proto) {\n                    if (proto) F.prototype = proto;\n                    if (!(this instanceof F)) return new F();\n                })(target.prototype);\n    \n                return bound;\n            };\n        })();\n    }\n    \n    JC.getNextPowerOfTwo = function(number) {\n        if (number > 0 && (number & (number - 1)) === 0) // see: http://goo.gl/D9kPj\n            return number;\n        else {\n            var result = 1;\n            while (result < number) result <<= 1;\n            return result;\n        }\n    };\n    \n    JC.isPowerOfTwo = function(width, height) {\n        return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n    \n    };\n    \n    \n    \n    JC.CompileVertexShader = function(gl, shaderSrc) {\n        return JC._CompileShader(gl, shaderSrc, gl.VERTEX_SHADER);\n    };\n    \n    JC.CompileFragmentShader = function(gl, shaderSrc) {\n        return JC._CompileShader(gl, shaderSrc, gl.FRAGMENT_SHADER);\n    };\n    \n    JC._CompileShader = function(gl, shaderSrc, shaderType) {\n        var src = shaderSrc.join(\"\\n\");\n        var shader = gl.createShader(shaderType);\n        gl.shaderSource(shader, src);\n        gl.compileShader(shader);\n    \n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            window.console.log(gl.getShaderInfoLog(shader));\n            return null;\n        }\n    \n        return shader;\n    };\n    \n    JC.compileProgram = function(gl, vertexSrc, fragmentSrc) {\n        var fragmentShader = JC.CompileFragmentShader(gl, fragmentSrc);\n        var vertexShader = JC.CompileVertexShader(gl, vertexSrc);\n    \n        var shaderProgram = gl.createProgram();\n    \n        gl.attachShader(shaderProgram, vertexShader);\n        gl.attachShader(shaderProgram, fragmentShader);\n        gl.linkProgram(shaderProgram);\n    \n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n            window.console.log(\"Could not initialise shaders\");\n        }\n    \n        return shaderProgram;\n    };\n    \n    \n    \n    JC.SpriteShader = function(gl) {\n        this.gl = gl;\n    \n        this.program = null;\n    \n        this.fragmentSrc = [\n            'precision lowp float;',\n            'varying vec2 vTextureCoord;',\n    \n            'uniform sampler2D uSampler;',\n            'uniform vec3 uTint;',\n            'uniform float uAlpha;',\n    \n            'void main(void) {',\n            '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n            '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n            '}'\n        ];\n    \n        this.vertexSrc = [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n    \n            'uniform vec2 projectionVector;',\n            'uniform mat3 uMatrix;',\n    \n            'varying vec2 vTextureCoord;',\n    \n            'void main(void) {',\n            '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n            '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n            '   vTextureCoord = aTextureCoord;',\n            '}'\n        ];\n    \n        this.textureCount = 0;\n    \n        this.init();\n    };\n    \n    JC.SpriteShader.prototype.constructor = JC.SpriteShader;\n    \n    JC.SpriteShader.prototype.init = function() {\n        var gl = this.gl;\n    \n        var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n    \n        gl.useProgram(program);\n    \n        this.uSampler = gl.getUniformLocation(program, 'uSampler');\n        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n        this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n        this.uTint = gl.getUniformLocation(program, 'uTint');\n        this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n    \n        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n        this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n    \n        this.program = program;\n    };\n    \n    JC.SpriteShader.prototype.destroy = function() {\n        this.gl.deleteProgram(this.program);\n        this.gl = null;\n    };\n    \n    \n    \n    \n    JC.PointShader = function(gl) {\n        this.gl = gl;\n    \n        this.program = null;\n    \n        this.fragmentSrc = [\n            'precision lowp float;',\n            'varying vec2 vTextureCoord;',\n    \n            'uniform sampler2D uSampler;',\n            'uniform vec3 uTint;',\n            'uniform float uAlpha;',\n    \n            'varying vec4 vPointColor;',\n    \n            'void main(void) {',\n            '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n            '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n            '}'\n        ];\n    \n        this.vertexSrc = [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute float aPointColor;',\n    \n            'uniform vec2 projectionVector;',\n            'uniform mat3 uMatrix;',\n    \n            'varying vec4 vPointColor;',\n    \n            'void main(void) {',\n            '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n            '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n            '   vPointColor = aPointColor;',\n            '}'\n        ];\n    \n        this.textureCount = 0;\n    \n        this.init();\n    };\n    \n    JC.PointShader.prototype.constructor = JC.PointShader;\n    \n    JC.PointShader.prototype.init = function() {\n        var gl = this.gl;\n    \n        var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n    \n        gl.useProgram(program);\n    \n        this.uSampler = gl.getUniformLocation(program, 'uSampler');\n        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n        this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n        this.uTint = gl.getUniformLocation(program, 'uTint');\n        this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n    \n        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n        this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n    \n        this.program = program;\n    };\n    \n    JC.PointShader.prototype.destroy = function() {\n        this.gl.deleteProgram(this.program);\n        this.gl = null;\n    };\n    \n    \n    \n    JC.Renderer = function(width, height, options) {\n        if (options) {\n            for (var i in JC.defaultRenderOptions) {\n                if (typeof options[i] === 'undefined') options[i] = JC.defaultRenderOptions[i];\n            }\n        } else {\n            options = JC.defaultRenderOptions;\n        }\n    \n        JC.sayHello();\n    \n        this.resolution = options.resolution || window.devicePixelRatio;\n    \n        this.transparent = options.transparent;\n    \n        this.autoResize = options.autoResize || false;\n    \n        this.clearBeforeRender = options.clearBeforeRender || true;\n    \n        this.width = width || 800;\n    \n        this.height = height || 600;\n    \n        this.view = options.view || document.createElement('canvas');\n    \n        this.contextLostBound = this.handleContextLost.bind(this);\n    \n        this.contextRestoredBound = this.handleContextRestored.bind(this);\n    \n        this.view.addEventListener('webglcontextlost', this.contextLostBound, false);\n        this.view.addEventListener('webglcontextrestored', this.contextRestoredBound, false);\n    \n        this._contextOptions = {\n            alpha: this.transparent,\n            antialias: options.antialias, // SPEED UP??\n            premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n            stencil: true,\n            preserveDrawingBuffer: options.preserveDrawingBuffer\n        };\n    \n        this.projection = new JC.Point();\n    \n        this.offset = new JC.Point(0, 0);\n    \n        this.shaderManager = new JC.ShaderManager();\n    \n        this.texturesManager = new JC.TexturesManager();\n    \n        this.maskManager = new JC.WebGLMaskManager();\n    \n        this.blendModeManager = new JC.WebGLBlendModeManager();\n    \n        this.renderSession = {};\n        this.renderSession.gl = this.gl;\n        this.renderSession.shaderManager = this.shaderManager;\n        this.renderSession.texturesManager = this.texturesManager;\n        this.renderSession.maskManager = this.maskManager;\n        this.renderSession.blendModeManager = this.blendModeManager;\n        this.renderSession.renderer = this;\n        this.renderSession.resolution = this.resolution;\n    \n        // time init the context..\n        this.initContext();\n    \n        // map some webGL blend modes..\n        this.mapBlendModes();\n    };\n    \n    JC.Renderer.prototype.constructor = JC.Renderer;\n    \n    JC.Renderer.prototype.initContext = function() {\n        var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n        this.gl = gl;\n    \n        if (!gl) {\n            throw new Error('This browser does not support webGL. Try using the canvas renderer');\n        }\n    \n        // set up the default JC settings..\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.enable(gl.BLEND);\n    \n        // need to set the context for all the managers...\n        this.shaderManager.setContext(gl);\n        this.texturesManager.setContext(gl);\n        this.maskManager.setContext(gl);\n        this.blendModeManager.setContext(gl);\n    \n        this.renderSession.gl = this.gl;\n    \n        // now resize and we are good to go!\n        this.resize(this.width, this.height);\n    \n    };\n    \n    JC.Renderer.prototype.render = function(stage) {\n        // no point rendering if our context has been blown up!\n        if (this.contextLost) return;\n    \n        // update the scene graph\n        stage.updateTransform();\n    \n        var gl = this.gl;\n    \n        // make sure we are bound to the main frame buffer\n        // gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n        if (this.clearBeforeRender) {\n            if (this.transparent) {\n                gl.clearColor(0, 0, 0, 0);\n            } else {\n                gl.clearColor(stage.backgroundColor[0], stage.backgroundColor[1], stage.backgroundColor[2], 1);\n            }\n    \n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    \n        this.renderDisplayObject(stage, this.projection);\n    };\n    \n    JC.Renderer.prototype.renderDisplayObject = function(displayObject, projection, buffer) {\n        this.renderSession.blendModeManager.setBlendMode(JC.blendModes.ALPHA);\n    \n        // set the default projection\n        this.renderSession.projection = projection;\n    \n        //set the default offset\n        this.renderSession.offset = this.offset;\n    \n        // render the scene!\n        displayObject.render(this.renderSession);\n    \n    };\n    \n    JC.Renderer.prototype.resize = function(width, height) {\n        this.width = width * this.resolution;\n        this.height = height * this.resolution;\n    \n        this.view.width = this.width;\n        this.view.height = this.height;\n    \n        if (this.autoResize) {\n            this.view.style.width = this.width / this.resolution + 'px';\n            this.view.style.height = this.height / this.resolution + 'px';\n        }\n    \n        this.gl.viewport(0, 0, this.width, this.height);\n    \n        this.projection.x = this.width / 2 / this.resolution;\n        this.projection.y = this.height / 2 / this.resolution;\n    };\n    \n    JC.Renderer.prototype.handleContextLost = function(event) {\n        event.preventDefault();\n        this.contextLost = true;\n    };\n    \n    JC.Renderer.prototype.handleContextRestored = function() {\n        this.initContext();\n    \n        this.contextLost = false;\n    };\n    \n    JC.Renderer.prototype.mapBlendModes = function() {\n        var gl = this.gl;\n    \n        if (!JC.blendModesWebGL) {\n            JC.blendModesWebGL = [];\n    \n            JC.blendModesWebGL[JC.blendModes.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.ALPHA] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.ADD] = [gl.SRC_ALPHA, gl.DST_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n            JC.blendModesWebGL[JC.blendModes.SCREEN] = [gl.SRC_ALPHA, gl.ONE];\n        }\n    };\n    \n    \n    \n    \n    \n    JC.TexturesManager = function() {\n        this.textures = {};\n    };\n    \n    JC.TexturesManager.prototype.constructor = JC.TexturesManager;\n    \n    JC.TexturesManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    };\n    \n    JC.TexturesManager.prototype.setTexture = function(texture) {\n        var gl = this.gl;\n        if (this.currentId === texture.id) return false;\n    \n        if (this.textures[texture.id] === undefined) {\n            this.setPara(texture);\n        }\n    \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.textures[texture.id].texture);\n    \n        this.currentId = texture.id;\n    \n        return true;\n    };\n    \n    JC.TexturesManager.prototype.setPara = function(texture) {\n        var gl = this.gl;\n    \n        texture.texture = gl.createTexture();\n    \n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n    \n        gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n    \n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.img);\n    \n        if (texture.isPowerOfTwo) gl.generateMipmap(gl.TEXTURE_2D);\n    \n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    \n        this.textures[texture.id] = texture;\n    \n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n    \n    JC.TexturesManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n    \n    \n    \n    \n    JC.WebGLBlendModeManager = function() {\n        this.currentBlendMode = 99999;\n    };\n    \n    JC.WebGLBlendModeManager.prototype.constructor = JC.WebGLBlendModeManager;\n    \n    JC.WebGLBlendModeManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    };\n    \n    JC.WebGLBlendModeManager.prototype.setBlendMode = function(blendMode) {\n        if (this.currentBlendMode === blendMode) return false;\n    \n        this.currentBlendMode = blendMode;\n    \n        var blendModeWebGL = JC.blendModesWebGL[this.currentBlendMode];\n    \n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);\n    \n        return true;\n    };\n    \n    JC.WebGLBlendModeManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n    \n    \n    JC.ShaderManager = function() {\n    \n        this.shaders = {};\n    \n    };\n    \n    JC.ShaderManager.prototype.constructor = JC.ShaderManager;\n    \n    JC.ShaderManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    \n        // this shader is used for the default sprite rendering\n        this.shaders['sprite'] = new JC.SpriteShader(gl);\n    \n        // this shader is used for the particle rendering\n        this.shaders['particle'] = new JC.PointShader(gl);\n    \n        this.setShader('sprite');\n    };\n    \n    \n    JC.ShaderManager.prototype.setShader = function(type) {\n        if (this._curShaderType === type) return false;\n    \n        this._curShaderType = type;\n    \n        this.shader = this.shaders[type];\n    \n        this.gl.useProgram(this.shader.program);\n    \n        return true;\n    };\n    \n    JC.ShaderManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n    \n    \n    \n    \n    JC.WebGLMaskManager = function() {};\n    \n    JC.WebGLMaskManager.prototype.constructor = JC.WebGLMaskManager;\n    \n    JC.WebGLMaskManager.prototype.setContext = function(gl) {\n        this.gl = gl;\n    };\n    \n    JC.WebGLMaskManager.prototype.pushMask = function(maskData, renderSession) {\n        var gl = renderSession.gl;\n    \n    \n        gl.enable(gl.STENCIL_TEST);\n        gl.depthMask(false);\n        gl.colorMask(false, false, false, false);\n        gl.stencilFunc(gl.ALWAYS, 1, ~0);\n        gl.stencilOp(gl.KEEP, gl.REPLACE, gl.REPLACE);\n    \n        // maskData.render();\n    \n        gl.depthMask(true);\n        gl.colorMask(true, true, true, true);\n        gl.stencilFunc(gl.EQUAL, 1, ~0);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    };\n    \n    JC.WebGLMaskManager.prototype.popMask = function() {\n        var gl = this.gl;\n        gl.disable(gl.STENCIL_TEST);\n    };\n    \n    JC.WebGLMaskManager.prototype.destroy = function() {\n        this.gl = null;\n    };\n    \n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = JC;\n        }else{\n            exports = JC;\n        }\n    } else if (typeof define !== 'undefined' && define.amd) {\n        define(JC);\n    }else{\n        window.JC = JC;\n    }\n\n})();","\nJC.VERSION = \"v0.0.3\";\n\nJC.blendModes = {\n    NORMAL: 0,\n    ALPHA: 1,\n    ADD: 2,\n    MULTIPLY: 3,\n    SCREEN: 4\n};\n\nJC.scaleModes = {\n    DEFAULT: 0,\n    LINEAR: 0,\n    NEAREST: 1\n};\n\nif (typeof(Float32Array) != 'undefined') {\n    JC.Float32Array = Float32Array;\n    JC.Uint16Array = Uint16Array;\n\n    JC.Uint32Array = Uint32Array;\n    JC.ArrayBuffer = ArrayBuffer;\n} else {\n    JC.Float32Array = Array;\n    JC.Uint16Array = Array;\n\n    JC.Uint32Array = Array;\n    JC.ArrayBuffer = Array;\n    console.log('%c not type array ', 'color: #fff;background: #f00;');\n}\n\nJC.PI_2 = Math.PI * 2;\n\nJC.RTD = 180 / Math.PI;\n\nJC.DTR = Math.PI / 180;\n\nJC.dontSpeek = false;\n\nJC.defaultRenderOptions = {\n    view: null,\n    transparent: false,\n    antialias: false,\n    preserveDrawingBuffer: false,\n    resolution: 1,\n    clearBeforeRender: true,\n    autoResize: false\n};\n\nfunction noop() {}\n\nJC.sayHello = function(type) {\n    if (JC.dontSpeek) return;\n\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        var args = [\n            '%c  %c jcw2d.js ' + JC.VERSION + '  %c ' + ' %c ' + ' http://www.jason82.com/ %c  ',\n            'background: #80a89e',\n            'color: #f98165; background: #cad9d5;',\n            'background: #80a89e',\n            'background: #cad9d5',\n            'background: #80a89e'\n        ];\n\n        console.log.apply(console, args);\n    } else {\n        console.log(' jcw2d.js ' + JC.VERSION + '  http://www.jason82.com/  ');\n    }\n\n    JC.dontSpeek = true;\n};\n\n\nJC.Point = function(x, y) {\n    this.x = x || 0;\n\n    this.y = y || 0;\n};\nJC.Point.prototype.clone = function() {\n    return new JC.Point(this.x, this.y);\n};\nJC.Point.prototype.set = function(x, y) {\n    this.x = x || 0;\n    this.y = y || ((y !== 0) ? this.x : 0);\n};\nJC.Point.prototype.constructor = JC.Point;\n\n\nJC.Matrix = function() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n};\nJC.Matrix.prototype.fromArray = function(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n};\nJC.Matrix.prototype.toArray = function(transpose) {\n    if (!this.array) this.array = new JC.Float32Array(9);\n    var array = this.array;\n\n    if (transpose) {\n        array[0] = this.a;\n        array[1] = this.b;\n        array[2] = 0;\n        array[3] = this.c;\n        array[4] = this.d;\n        array[5] = 0;\n        array[6] = this.tx;\n        array[7] = this.ty;\n        array[8] = 1;\n    } else {\n        array[0] = this.a;\n        array[1] = this.c;\n        array[2] = this.tx;\n        array[3] = this.b;\n        array[4] = this.d;\n        array[5] = this.ty;\n        array[6] = 0;\n        array[7] = 0;\n        array[8] = 1;\n    }\n\n    return array;\n};\nJC.Matrix.prototype.apply = function(pos, newPos) {\n    newPos = newPos || new JC.Point();\n\n    newPos.x = this.a * pos.x + this.c * pos.y + this.tx;\n    newPos.y = this.b * pos.x + this.d * pos.y + this.ty;\n\n    return newPos;\n};\nJC.Matrix.prototype.applyInverse = function(pos, newPos) {\n    newPos = newPos || new JC.Point();\n\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n\n    newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;\n\n    return newPos;\n};\nJC.Matrix.prototype.translate = function(x, y) {\n    this.tx += x;\n    this.ty += y;\n\n    return this;\n};\nJC.Matrix.prototype.scale = function(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n\n    return this;\n};\nJC.Matrix.prototype.rotate = function(angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n\n    return this;\n};\nJC.Matrix.prototype.append = function(matrix) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n\n    return this;\n};\nJC.Matrix.prototype.identity = function() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n\n    return this;\n};\n\nJC.identityMatrix = new JC.Matrix();\n\n\nfunction Animate() {\n    this.MST = 0;\n    this.MAT = 300;\n    this.fx = 'easeBoth';\n    this.complete = noop;\n    this.moving = false;\n    this.infinity = false;\n    this.alternate = false;\n    this.repeats = 0;\n}\nAnimate.prototype.moveTween = function(opts) {\n    this.MST = Date.now();\n    this.MATR = opts.attr || this.MATR;\n    this.MAT = opts.time || this.MAT;\n    this.fx = opts.fx || this.fx;\n    this.complete = opts.complete || this.complete;\n    this.infinity = opts.infinity || this.infinity;\n    this.alternate = opts.alternate || this.alternate;\n    this.repeats = opts.repeats || this.repeats;\n    this.moving = true;\n    this.MATRC = {};\n    for (var i in this.MATR) {\n        this.MATRC[i] = this[i];\n    }\n};\nAnimate.prototype.manager = function() {\n    if (!this.moving) return;\n    var now = Date.now();\n    if (now < this.MST + this.MAT) {\n        this.nextPose();\n    } else {\n        this.setVal(this.MATR);\n        if (this.repeats > 0 || this.infinity) {\n            this.repeats > 0 && --this.repeats;\n            if (this.alternate) {\n                this.moveTween({ attr: this.MATRC });\n            } else {\n                this.setVal(this.MATRC);\n                this.moveTween({ attr: this.MATR });\n            }\n        } else {\n            this.moving = false;\n            this.complete();\n            if (now > this.MST) this.complete = noop;\n        }\n    }\n};\nAnimate.prototype.nextPose = function() {\n    var now = Date.now() - this.MST;\n    for (var i in this.MATR) {\n        this[i] = JC.TWEEN[this.fx](now, this.MATRC[i], this.MATR[i] - this.MATRC[i], this.MAT);\n    }\n};\n\nJC.DisplayObject = function() {\n    Animate.call(this);\n    this.visible = true;\n    this.worldAlpha = 1;\n    this.alpha = 1;\n\n    this.scaleX = 1;\n    this.scaleY = 1;\n\n    this.skewX = 0;\n    this.skewY = 0;\n\n    this.rotation = 0;\n    this.rotationCache = 0;\n    this._sr = 0;\n    this._cr = 1;\n\n    this.x = 0;\n    this.y = 0;\n\n    this.pivotX = 0;\n    this.pivotY = 0;\n\n    this._mask = null;\n\n    this.parent = null;\n    this.worldTransform = new JC.Matrix();\n\n    this.renderable = false;\n\n    this._cacheAsBitmap = false;\n\n    this._cacheIsDirty = false;\n};\n\nJC.DisplayObject.prototype = Object.create(Animate.prototype);\nJC.DisplayObject.prototype.constructor = JC.DisplayObject;\n\nObject.defineProperty(JC.DisplayObject.prototype, 'mask', {\n    get: function() {\n        return this._mask;\n    },\n    set: function(value) {\n\n        if (this._mask) this._mask.isMask = false;\n        this._mask = value;\n        if (this._mask) this._mask.isMask = true;\n    }\n});\n\nObject.defineProperty(JC.DisplayObject.prototype, 'cacheAsBitmap', {\n\n    get: function() {\n        return this._cacheAsBitmap;\n    },\n\n    set: function(value) {\n\n        if (this._cacheAsBitmap === value) return;\n\n        if (value) {\n            this._generateCachedSprite();\n        } else {\n            this._destroyCachedSprite();\n        }\n\n        this._cacheAsBitmap = value;\n    }\n});\n\nJC.DisplayObject.prototype.setVal = function(vals) {\n    if (vals === undefined) return;\n    for (var key in vals) {\n        if (this[key] === undefined) {\n            continue;\n        } else {\n            this[key] = vals[key];\n        }\n    }\n};\n\nJC.DisplayObject.prototype.upDate = function(renderSession) {\n    renderSession.texturesManager.setTexture(this.texture);\n    renderSession.shaderManager.setShader(this.shaderType);\n    renderSession.blendModeManager.setBlendMode(this.blendMode);\n    this.dirty && this.createBuffer(renderSession.gl);\n    this.syncAttribute(renderSession);\n    this.syncUniforms(renderSession);\n};\n\nJC.DisplayObject.prototype.updateTransform = function() {\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n\n    var a, b, c, d, tx, ty;\n\n    if (this.rotation % JC.PI_2) {\n        if (this.rotation !== this.rotationCache) {\n            this.rotationCache = this.rotation;\n            this._sr = Math.sin(this.rotation);\n            this._cr = Math.cos(this.rotation);\n        }\n\n        a = this._cr * this.scaleX;\n        b = this._sr * this.scaleX;\n        c = -this._sr * this.scaleY;\n        d = this._cr * this.scaleY;\n        tx = this.x;\n        ty = this.y;\n\n        if (this.pivotX || this.pivotY) {\n            tx -= this.pivotX * a + this.pivotY * c;\n            ty -= this.pivotX * b + this.pivotY * d;\n        }\n\n        wt.a = a * pt.a + b * pt.c;\n        wt.b = a * pt.b + b * pt.d;\n        wt.c = c * pt.a + d * pt.c;\n        wt.d = c * pt.b + d * pt.d;\n        wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n        wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n\n\n    } else {\n        a = this.scaleX;\n        d = this.scaleY;\n\n        tx = this.x - this.pivotX * a;\n        ty = this.y - this.pivotY * d;\n\n        wt.a = a * pt.a;\n        wt.b = a * pt.b;\n        wt.c = d * pt.c;\n        wt.d = d * pt.d;\n        wt.tx = tx * pt.a + ty * pt.c + pt.tx;\n        wt.ty = tx * pt.b + ty * pt.d + pt.ty;\n    }\n\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n    this.manager();\n};\n\nJC.DisplayObject.prototype.displayObjectUpdateTransform = JC.DisplayObject.prototype.updateTransform;\n\nJC.DisplayObject.prototype.render = function(renderSession) {\n    // OVERWRITE;\n    // this line is just here to pass jshinting :)\n    renderSession = renderSession;\n};\n\n\n\nJC.DisplayObjectContainer = function() {\n    JC.DisplayObject.call(this);\n\n    this.children = [];\n};\n\nJC.DisplayObjectContainer.prototype = Object.create(JC.DisplayObject.prototype);\nJC.DisplayObjectContainer.prototype.constructor = JC.DisplayObjectContainer;\n\nJC.DisplayObjectContainer.prototype.addChilds = function() {\n    var l = arguments.length;\n    if (l > 0) {\n        for (var i = 0; i < l; i++) {\n            this.addChildAt(arguments[i], this.children.length);\n        }\n        return arguments[l - 1];\n    }\n};\n\nJC.DisplayObjectContainer.prototype.addChildAt = function(child, index) {\n    if (index >= 0 && index <= this.children.length) {\n        if (child.parent) {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n\n        this.children.splice(index, 0, child);\n\n        return child;\n    } else {\n        throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);\n    }\n};\n\nJC.DisplayObjectContainer.prototype.swapChildren = function(child, child2) {\n    if (child === child2) {\n        return;\n    }\n\n    var index1 = this.getChildIndex(child);\n    var index2 = this.getChildIndex(child2);\n\n    if (index1 < 0 || index2 < 0) {\n        throw new Error('swapChildren: Both the supplied DisplayObjects must be a child of the caller.');\n    }\n\n    this.children[index1] = child2;\n    this.children[index2] = child;\n\n};\n\nJC.DisplayObjectContainer.prototype.getChildIndex = function(child) {\n    var index = this.children.indexOf(child);\n    if (index === -1) {\n        throw new Error('The supplied DisplayObject must be a child of the caller');\n    }\n    return index;\n};\n\nJC.DisplayObjectContainer.prototype.setChildIndex = function(child, index) {\n    if (index < 0 || index >= this.children.length) {\n        throw new Error('The supplied index is out of bounds');\n    }\n    var currentIndex = this.getChildIndex(child);\n    this.children.splice(currentIndex, 1); //remove from old position\n    this.children.splice(index, 0, child); //add at new position\n};\n\nJC.DisplayObjectContainer.prototype.getChildAt = function(index) {\n    if (index < 0 || index >= this.children.length) {\n        throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject must be a child of the caller');\n    }\n    return this.children[index];\n\n};\n\nJC.DisplayObjectContainer.prototype.removeChild = function(child) {\n    var index = this.children.indexOf(child);\n    if (index === -1) return;\n\n    return this.removeChildAt(index);\n};\n\nJC.DisplayObjectContainer.prototype.removeChildAt = function(index) {\n    var child = this.getChildAt(index);\n    if (this.stage)\n        child.removeStageReference();\n\n    child.parent = undefined;\n    this.children.splice(index, 1);\n    return child;\n};\n\nJC.DisplayObjectContainer.prototype.removeChildren = function(beginIndex, endIndex) {\n    var begin = beginIndex || 0;\n    var end = typeof endIndex === 'number' ? endIndex : this.children.length;\n    var range = end - begin;\n\n    if (range > 0 && range <= end) {\n        var removed = this.children.splice(begin, range);\n        for (var i = 0; i < removed.length; i++) {\n            var child = removed[i];\n            if (this.stage)\n                child.removeStageReference();\n            child.parent = undefined;\n        }\n        return removed;\n    } else if (range === 0 && this.children.length === 0) {\n        return [];\n    } else {\n        throw new Error('removeChildren: Range Error, numeric values are outside the acceptable range');\n    }\n};\n\nJC.DisplayObjectContainer.prototype.updateTransform = function() {\n    if (!this.visible) return;\n\n    this.displayObjectUpdateTransform();\n\n    for (var i = 0, j = this.children.length; i < j; i++) {\n        this.children[i].updateTransform();\n    }\n};\n\nJC.DisplayObjectContainer.prototype.displayObjectContainerUpdateTransform = JC.DisplayObjectContainer.prototype.updateTransform;\n\nJC.DisplayObjectContainer.prototype.render = function(renderSession) {\n    if (!this.visible || this.alpha <= 0) return;\n\n    if (this._cacheAsBitmap) {\n        this._renderCachedSprite(renderSession);\n        return;\n    }\n\n    var i, j;\n\n    if (this._mask) {\n\n        if (this._mask) {\n            renderSession.maskManager.pushMask(this.mask, renderSession);\n        }\n\n        // simple render children!\n        for (i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].render(renderSession);\n        }\n\n        if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n\n    } else {\n        // simple render children!\n        for (i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].render(renderSession);\n        }\n    }\n};\n\n\n\n\nJC.Sprite = function(opts) {\n    JC.DisplayObjectContainer.call(this);\n\n    this.texture = opts.texture;\n\n    this.width = opts.width || this.texture.width;\n\n    this.height = opts.height || this.texture.height;\n\n    this.sH = opts.sH || 0;\n\n    this.sW = opts.sW || 0;\n\n    this.tint = opts.tint || 0xFFFFFF;\n\n    this.blendMode = opts.blendModes || JC.blendModes.ALPHA;\n\n    this.shader = null;\n    this.shaderType = 'sprite';\n\n    this.repeatX = opts.repeatX || false;\n    this.repeatY = opts.repeatY || false;\n\n    this.renderable = true;\n\n    this.buildMesh();\n\n};\n\nJC.Sprite.prototype = Object.create(JC.DisplayObjectContainer.prototype);\nJC.Sprite.prototype.constructor = JC.Sprite;\n\n\nJC.Sprite.prototype.buildMesh = function() {\n    var w = this.texture.width,\n        h = this.texture.height;\n    this.vertices = new JC.Float32Array([-this.width / 2, this.height / 2, -this.width / 2, -this.height / 2,\n        this.width / 2, -this.height / 2,\n        this.width / 2, this.height / 2\n    ]);\n    this.indices = new JC.Uint16Array([\n        0, 1, 2,\n        0, 2, 3\n    ]);\n    if (this.repeatX || this.repeatY) {\n        var rX = this.repeatX ? 2 : 1,\n            rY = this.repeatY ? 2 : 1;\n        this.uvs = new JC.Float32Array([\n            0 * rX, 0 * rY,\n            0 * rX, 1 * rY,\n            1 * rX, 1 * rY,\n            1 * rX, 0 * rY\n        ]);\n    } else {\n        this.uvs = new JC.Float32Array([\n            this.sW / w, this.sH / h,\n            this.sW / w, (this.sH + this.height) / h,\n            (this.sW + this.width) / w, (this.sH + this.height) / h,\n            (this.sW + this.width) / w, this.sH / h\n        ]);\n    }\n    this.cachedTint = JC.hex2rgb(this.tint);\n    this.dirty = true;\n};\n\nJC.Sprite.prototype.createBuffer = function(gl) {\n    this.vertexBuffer = gl.createBuffer();\n    this.uvsBuffer = gl.createBuffer();\n    this.indicesBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n    this.dirty = false;\n};\n\nJC.Sprite.prototype.syncUniforms = function(renderSession) {\n    var gl = renderSession.gl,\n        shader = renderSession.shaderManager.shader,\n        projection = renderSession.projection;\n\n    gl.uniform1i(shader.uSampler, 0);\n    gl.uniform1f(shader.uAlpha, this.worldAlpha);\n    gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n    gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n    gl.uniform3fv(shader.uTint, this.cachedTint);\n\n};\n\nJC.Sprite.prototype.syncAttribute = function(renderSession) {\n    var gl = renderSession.gl,\n        shader = renderSession.shaderManager.shader;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.enableVertexAttribArray(shader.aVertexPosition);\n    gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.uvsBuffer);\n    gl.enableVertexAttribArray(shader.aTextureCoord);\n    gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n};\n\nJC.Sprite.prototype.render = function(renderSession) {\n    if (!this.visible || this.alpha <= 0) return;\n    this.upDate(renderSession);\n    var i, j, gl = renderSession.gl;\n\n    // do a quick check to see if this element has a mask or a filter.\n    if (this._mask) {\n\n        if (this._mask) {\n            renderSession.maskManager.pushMask(this.mask, renderSession);\n        }\n\n        // add this sprite to the batch\n        gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n\n        // now loop through the children and make sure they get rendered\n        for (i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].render(renderSession);\n        }\n\n        // time to stop the sprite batch as either a mask element or a filter draw will happen next\n\n        if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);\n    } else {\n\n        gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n\n        // simple render children!\n        for (i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].render(renderSession);\n        }\n\n    }\n};\n\nJC.Sprite.fromFrame = function(frameId) {\n    var texture = JC.TextureCache[frameId];\n    if (!texture) throw new Error('The frameId \"' + frameId + '\" does not exist in the texture cache' + this);\n    return new JC.Sprite(texture);\n};\n\nJC.Sprite.fromImage = function(imageId, crossorigin, scaleMode) {\n    var texture = JC.Texture.fromImage(imageId, crossorigin, scaleMode);\n    return new JC.Sprite(texture);\n};\n\n\n\n\n// JC.Point = function(opts) {\n//     this.x = opts.x;\n//     this.y = opts.y;\n\n//     this.radius = opts.radius || 10;\n//     this.color = opts.color;\n//     this.alpha = opts.alpha;\n\n//     this.alive = true;\n\n//     this.wander = JC.Math.randIn( 0.5, 2.0 );\n//     this.theta = JC.Math.randIn( 0, Math.PI*2 );\n//     this.drag = 0.92;\n\n//     this.vx = 0.0;\n//     this.vy = 0.0;\n// };\n// JC.Point.prototype.move = function() {\n//     this.x += this.vx;\n//     this.y += this.vy;\n\n//     this.vx *= this.drag;\n//     this.vy *= this.drag;\n\n//     this.theta += JC.Math.randIn( -0.5, 0.5 ) * this.wander;\n//     this.vx += Math.sin( this.theta ) * 0.1;\n//     this.vy += Math.cos( this.theta ) * 0.1;\n\n//     this.radius *= 0.96;\n//     this.alive = this.radius > 0.5;\n// };\n// JC.Point.prototype.revive = function() {\n//     var theta = JC.Math.randIn( 0, Math.PI*2 ),\n//         force = JC.Math.randIn( 2, 8 );\n//     this.x = JC.Math.randIn( -20, 20 );\n//     this.y = JC.Math.randIn( -20, 20 );\n\n//     this.vx = Math.sin( theta ) * force;\n//     this.vy = Math.cos( theta ) * force;\n\n//     this.drag = JC.Math.randIn( 0.9, 0.99 );\n//     this.wander = JC.Math.randIn( 0.5, 2.0 );\n\n\n//     this.radius = JC.Math.randIn(4,20);\n// };\n\n\n\n// JC.Particles = function(opts) {\n//     JC.DisplayObjectContainer.call(this);\n\n//     this.points = [];\n\n//     this.texture = opts.texture;\n\n//     this.tint = opts.tint||0xFFFFFF;\n\n//     this.blendMode = opts.blendModes||JC.blendModes.ALPHA;\n\n//     this.shader = null;\n\n//     this.renderable = true;\n\n//     this.buildMesh();\n\n// };\n\n// JC.Particles.prototype = Object.create(JC.DisplayObjectContainer.prototype);\n// JC.Particles.prototype.constructor = JC.Particles;\n// JC.Particles.prototype.buildMesh = function() {\n//     this.vertices = new JC.Float32Array(this.points.length*2);\n//     this.sizes = new JC.Uint16Array(this.points.length);\n//     this.point_colors = new JC.Float32Array(this.points.length*4);\n//     var ct;\n//     for(var i=0;i<this.points.length;i++){\n//         this.vertices[2*i] = this.points[i].x;\n//         this.vertices[2*i+1] = this.points[i].y;\n//         this.sizes[i] = this.points[i].radius;\n//         ct = JC.hex2rgb(this.points[i].color);\n//         this.point_colors[4*i] = ct[0];\n//         this.point_colors[4*i+1] = ct[1];\n//         this.point_colors[4*i+2] = ct[2];\n//         this.point_colors[4*i+3] = this.points[i].alpha;\n//     }\n// };\n// JC.Particles.prototype.createBuffer = function(gl){\n//     this.vertexBuffer = gl.createBuffer();\n//     this.sizesBuffer = gl.createBuffer();\n//     this.colorsBuffer = gl.createBuffer();\n\n//     gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n//     gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\n//     gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n//     gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n//     gl.bufferData(gl.ARRAY_BUFFER, this.sizes, gl.DYNAMIC_DRAW);\n//     gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n//     gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n//     gl.bufferData(gl.ARRAY_BUFFER, this.point_colors, gl.DYNAMIC_DRAW);\n//     gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n//     this.dirty = false;\n// };\n// JC.Particles.prototype.syncUniforms = function(renderSession){\n//     var gl = renderSession.gl,\n//         shader = renderSession.shaderManager.shader,\n//         projection = renderSession.projection;\n\n//     gl.uniform1i(shader.uSampler, 0);\n//     gl.uniform1f(shader.uAlpha, this.worldAlpha);\n//     gl.uniform2f(shader.projectionVector, projection.x, projection.y);\n//     gl.uniformMatrix3fv(shader.uMatrix, false, this.worldTransform.toArray(true));\n//     gl.uniform3fv(shader.uTint, this.cachedTint);\n\n// };\n\n// JC.Particles.prototype.syncAttribute = function(renderSession){\n//     var gl = renderSession.gl,\n//         shader = renderSession.shaderManager.shader;\n\n//     gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n//     gl.enableVertexAttribArray(shader.aVertexPosition);\n//     gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\n//     gl.bindBuffer(gl.ARRAY_BUFFER, this.sizesBuffer);\n//     gl.enableVertexAttribArray(shader.aPointSize);\n//     gl.vertexAttribPointer(shader.aPointSize, 2, gl.FLOAT, false, 0, 0);\n\n//     gl.bindBuffer(gl.ARRAY_BUFFER, this.colorsBuffer);\n//     gl.enableVertexAttribArray(shader.aPointColors);\n//     gl.vertexAttribPointer(shader.aPointColors, 4, gl.FLOAT, false, 0, 0);\n\n// };\n\n\n\n\nJC.Stage = function(backgroundColor) {\n    JC.DisplayObjectContainer.call(this);\n\n    this.worldTransform = new JC.Matrix();\n\n    this.stage = this;\n\n    this.setBackgroundColor(backgroundColor);\n};\n\nJC.Stage.prototype = Object.create(JC.DisplayObjectContainer.prototype);\nJC.Stage.prototype.constructor = JC.Stage;\n\nJC.Stage.prototype.updateTransform = function() {\n    this.worldAlpha = 1;\n\n    for (var i = 0, j = this.children.length; i < j; i++) {\n        this.children[i].updateTransform();\n    }\n};\n\nJC.Stage.prototype.setBackgroundColor = function(bgc) {\n    if (typeof bgc === 'number') return;\n    this.backgroundColor = JC.hex2rgb(bgc);\n};\n\n\n\nJC.hex2rgb = function(hex) {\n    return [(hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255];\n};\n\nJC.rgb2hex = function(rgb) {\n    return ((rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255);\n};\n\n/**\n * A polyfill for Function.prototype.bind\n *\n * @method bind\n */\nif (typeof Function.prototype.bind !== 'function') {\n    Function.prototype.bind = (function() {\n        return function(thisArg) {\n            var target = this,\n                i = arguments.length - 1,\n                boundArgs = [];\n            if (i > 0) {\n                boundArgs.length = i;\n                while (i--) boundArgs[i] = arguments[i + 1];\n            }\n\n            if (typeof target !== 'function') throw new TypeError();\n\n            function bound() {\n                var i = arguments.length,\n                    args = new Array(i);\n                while (i--) args[i] = arguments[i];\n                args = boundArgs.concat(args);\n                return target.apply(this instanceof bound ? this : thisArg, args);\n            }\n\n            bound.prototype = (function F(proto) {\n                if (proto) F.prototype = proto;\n                if (!(this instanceof F)) return new F();\n            })(target.prototype);\n\n            return bound;\n        };\n    })();\n}\n\nJC.getNextPowerOfTwo = function(number) {\n    if (number > 0 && (number & (number - 1)) === 0) // see: http://goo.gl/D9kPj\n        return number;\n    else {\n        var result = 1;\n        while (result < number) result <<= 1;\n        return result;\n    }\n};\n\nJC.isPowerOfTwo = function(width, height) {\n    return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);\n\n};\n\n\n\nJC.CompileVertexShader = function(gl, shaderSrc) {\n    return JC._CompileShader(gl, shaderSrc, gl.VERTEX_SHADER);\n};\n\nJC.CompileFragmentShader = function(gl, shaderSrc) {\n    return JC._CompileShader(gl, shaderSrc, gl.FRAGMENT_SHADER);\n};\n\nJC._CompileShader = function(gl, shaderSrc, shaderType) {\n    var src = shaderSrc.join(\"\\n\");\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        window.console.log(gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n};\n\nJC.compileProgram = function(gl, vertexSrc, fragmentSrc) {\n    var fragmentShader = JC.CompileFragmentShader(gl, fragmentSrc);\n    var vertexShader = JC.CompileVertexShader(gl, vertexSrc);\n\n    var shaderProgram = gl.createProgram();\n\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        window.console.log(\"Could not initialise shaders\");\n    }\n\n    return shaderProgram;\n};\n\n\n\nJC.SpriteShader = function(gl) {\n    this.gl = gl;\n\n    this.program = null;\n\n    this.fragmentSrc = [\n        'precision lowp float;',\n        'varying vec2 vTextureCoord;',\n\n        'uniform sampler2D uSampler;',\n        'uniform vec3 uTint;',\n        'uniform float uAlpha;',\n\n        'void main(void) {',\n        '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n        '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n        '}'\n    ];\n\n    this.vertexSrc = [\n        'attribute vec2 aVertexPosition;',\n        'attribute vec2 aTextureCoord;',\n\n        'uniform vec2 projectionVector;',\n        'uniform mat3 uMatrix;',\n\n        'varying vec2 vTextureCoord;',\n\n        'void main(void) {',\n        '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n        '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n        '   vTextureCoord = aTextureCoord;',\n        '}'\n    ];\n\n    this.textureCount = 0;\n\n    this.init();\n};\n\nJC.SpriteShader.prototype.constructor = JC.SpriteShader;\n\nJC.SpriteShader.prototype.init = function() {\n    var gl = this.gl;\n\n    var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n\n    gl.useProgram(program);\n\n    this.uSampler = gl.getUniformLocation(program, 'uSampler');\n    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n    this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n    this.uTint = gl.getUniformLocation(program, 'uTint');\n    this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n\n    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n    this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n\n    this.program = program;\n};\n\nJC.SpriteShader.prototype.destroy = function() {\n    this.gl.deleteProgram(this.program);\n    this.gl = null;\n};\n\n\n\n\nJC.PointShader = function(gl) {\n    this.gl = gl;\n\n    this.program = null;\n\n    this.fragmentSrc = [\n        'precision lowp float;',\n        'varying vec2 vTextureCoord;',\n\n        'uniform sampler2D uSampler;',\n        'uniform vec3 uTint;',\n        'uniform float uAlpha;',\n\n        'varying vec4 vPointColor;',\n\n        'void main(void) {',\n        '   vec4 smpColor = texture2D(uSampler, vTextureCoord);',\n        '   gl_FragColor = vec4(uTint,uAlpha) * smpColor;',\n        '}'\n    ];\n\n    this.vertexSrc = [\n        'attribute vec2 aVertexPosition;',\n        'attribute vec2 aTextureCoord;',\n        'attribute float aPointColor;',\n\n        'uniform vec2 projectionVector;',\n        'uniform mat3 uMatrix;',\n\n        'varying vec4 vPointColor;',\n\n        'void main(void) {',\n        '   vec2 v = ( uMatrix * vec3(aVertexPosition , 1.0) ).xy ;',\n        '   gl_Position = vec4( v / projectionVector , 0.0, 1.0);',\n        '   vPointColor = aPointColor;',\n        '}'\n    ];\n\n    this.textureCount = 0;\n\n    this.init();\n};\n\nJC.PointShader.prototype.constructor = JC.PointShader;\n\nJC.PointShader.prototype.init = function() {\n    var gl = this.gl;\n\n    var program = JC.compileProgram(gl, this.vertexSrc, this.fragmentSrc);\n\n    gl.useProgram(program);\n\n    this.uSampler = gl.getUniformLocation(program, 'uSampler');\n    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');\n    this.uMatrix = gl.getUniformLocation(program, 'uMatrix');\n    this.uTint = gl.getUniformLocation(program, 'uTint');\n    this.uAlpha = gl.getUniformLocation(program, 'uAlpha');\n\n    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n    this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n\n    this.program = program;\n};\n\nJC.PointShader.prototype.destroy = function() {\n    this.gl.deleteProgram(this.program);\n    this.gl = null;\n};\n\n\n\nJC.Renderer = function(width, height, options) {\n    if (options) {\n        for (var i in JC.defaultRenderOptions) {\n            if (typeof options[i] === 'undefined') options[i] = JC.defaultRenderOptions[i];\n        }\n    } else {\n        options = JC.defaultRenderOptions;\n    }\n\n    JC.sayHello();\n\n    this.resolution = options.resolution || window.devicePixelRatio;\n\n    this.transparent = options.transparent;\n\n    this.autoResize = options.autoResize || false;\n\n    this.clearBeforeRender = options.clearBeforeRender || true;\n\n    this.width = width || 800;\n\n    this.height = height || 600;\n\n    this.view = options.view || document.createElement('canvas');\n\n    this.contextLostBound = this.handleContextLost.bind(this);\n\n    this.contextRestoredBound = this.handleContextRestored.bind(this);\n\n    this.view.addEventListener('webglcontextlost', this.contextLostBound, false);\n    this.view.addEventListener('webglcontextrestored', this.contextRestoredBound, false);\n\n    this._contextOptions = {\n        alpha: this.transparent,\n        antialias: options.antialias, // SPEED UP??\n        premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer\n    };\n\n    this.projection = new JC.Point();\n\n    this.offset = new JC.Point(0, 0);\n\n    this.shaderManager = new JC.ShaderManager();\n\n    this.texturesManager = new JC.TexturesManager();\n\n    this.maskManager = new JC.WebGLMaskManager();\n\n    this.blendModeManager = new JC.WebGLBlendModeManager();\n\n    this.renderSession = {};\n    this.renderSession.gl = this.gl;\n    this.renderSession.shaderManager = this.shaderManager;\n    this.renderSession.texturesManager = this.texturesManager;\n    this.renderSession.maskManager = this.maskManager;\n    this.renderSession.blendModeManager = this.blendModeManager;\n    this.renderSession.renderer = this;\n    this.renderSession.resolution = this.resolution;\n\n    // time init the context..\n    this.initContext();\n\n    // map some webGL blend modes..\n    this.mapBlendModes();\n};\n\nJC.Renderer.prototype.constructor = JC.Renderer;\n\nJC.Renderer.prototype.initContext = function() {\n    var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n    this.gl = gl;\n\n    if (!gl) {\n        throw new Error('This browser does not support webGL. Try using the canvas renderer');\n    }\n\n    // set up the default JC settings..\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n    gl.enable(gl.BLEND);\n\n    // need to set the context for all the managers...\n    this.shaderManager.setContext(gl);\n    this.texturesManager.setContext(gl);\n    this.maskManager.setContext(gl);\n    this.blendModeManager.setContext(gl);\n\n    this.renderSession.gl = this.gl;\n\n    // now resize and we are good to go!\n    this.resize(this.width, this.height);\n\n};\n\nJC.Renderer.prototype.render = function(stage) {\n    // no point rendering if our context has been blown up!\n    if (this.contextLost) return;\n\n    // update the scene graph\n    stage.updateTransform();\n\n    var gl = this.gl;\n\n    // make sure we are bound to the main frame buffer\n    // gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    if (this.clearBeforeRender) {\n        if (this.transparent) {\n            gl.clearColor(0, 0, 0, 0);\n        } else {\n            gl.clearColor(stage.backgroundColor[0], stage.backgroundColor[1], stage.backgroundColor[2], 1);\n        }\n\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    this.renderDisplayObject(stage, this.projection);\n};\n\nJC.Renderer.prototype.renderDisplayObject = function(displayObject, projection, buffer) {\n    this.renderSession.blendModeManager.setBlendMode(JC.blendModes.ALPHA);\n\n    // set the default projection\n    this.renderSession.projection = projection;\n\n    //set the default offset\n    this.renderSession.offset = this.offset;\n\n    // render the scene!\n    displayObject.render(this.renderSession);\n\n};\n\nJC.Renderer.prototype.resize = function(width, height) {\n    this.width = width * this.resolution;\n    this.height = height * this.resolution;\n\n    this.view.width = this.width;\n    this.view.height = this.height;\n\n    if (this.autoResize) {\n        this.view.style.width = this.width / this.resolution + 'px';\n        this.view.style.height = this.height / this.resolution + 'px';\n    }\n\n    this.gl.viewport(0, 0, this.width, this.height);\n\n    this.projection.x = this.width / 2 / this.resolution;\n    this.projection.y = this.height / 2 / this.resolution;\n};\n\nJC.Renderer.prototype.handleContextLost = function(event) {\n    event.preventDefault();\n    this.contextLost = true;\n};\n\nJC.Renderer.prototype.handleContextRestored = function() {\n    this.initContext();\n\n    this.contextLost = false;\n};\n\nJC.Renderer.prototype.mapBlendModes = function() {\n    var gl = this.gl;\n\n    if (!JC.blendModesWebGL) {\n        JC.blendModesWebGL = [];\n\n        JC.blendModesWebGL[JC.blendModes.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n        JC.blendModesWebGL[JC.blendModes.ALPHA] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n        JC.blendModesWebGL[JC.blendModes.ADD] = [gl.SRC_ALPHA, gl.DST_ALPHA];\n        JC.blendModesWebGL[JC.blendModes.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n        JC.blendModesWebGL[JC.blendModes.SCREEN] = [gl.SRC_ALPHA, gl.ONE];\n    }\n};\n\n\n\n\n\nJC.TexturesManager = function() {\n    this.textures = {};\n};\n\nJC.TexturesManager.prototype.constructor = JC.TexturesManager;\n\nJC.TexturesManager.prototype.setContext = function(gl) {\n    this.gl = gl;\n};\n\nJC.TexturesManager.prototype.setTexture = function(texture) {\n    var gl = this.gl;\n    if (this.currentId === texture.id) return false;\n\n    if (this.textures[texture.id] === undefined) {\n        this.setPara(texture);\n    }\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.textures[texture.id].texture);\n\n    this.currentId = texture.id;\n\n    return true;\n};\n\nJC.TexturesManager.prototype.setPara = function(texture) {\n    var gl = this.gl;\n\n    texture.texture = gl.createTexture();\n\n    // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\n    gl.bindTexture(gl.TEXTURE_2D, texture.texture);\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.img);\n\n    if (texture.isPowerOfTwo) gl.generateMipmap(gl.TEXTURE_2D);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\n    this.textures[texture.id] = texture;\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n};\n\nJC.TexturesManager.prototype.destroy = function() {\n    this.gl = null;\n};\n\n\n\n\nJC.WebGLBlendModeManager = function() {\n    this.currentBlendMode = 99999;\n};\n\nJC.WebGLBlendModeManager.prototype.constructor = JC.WebGLBlendModeManager;\n\nJC.WebGLBlendModeManager.prototype.setContext = function(gl) {\n    this.gl = gl;\n};\n\nJC.WebGLBlendModeManager.prototype.setBlendMode = function(blendMode) {\n    if (this.currentBlendMode === blendMode) return false;\n\n    this.currentBlendMode = blendMode;\n\n    var blendModeWebGL = JC.blendModesWebGL[this.currentBlendMode];\n\n    this.gl.blendEquation(this.gl.FUNC_ADD);\n    this.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);\n\n    return true;\n};\n\nJC.WebGLBlendModeManager.prototype.destroy = function() {\n    this.gl = null;\n};\n\n\nJC.ShaderManager = function() {\n\n    this.shaders = {};\n\n};\n\nJC.ShaderManager.prototype.constructor = JC.ShaderManager;\n\nJC.ShaderManager.prototype.setContext = function(gl) {\n    this.gl = gl;\n\n    // this shader is used for the default sprite rendering\n    this.shaders['sprite'] = new JC.SpriteShader(gl);\n\n    // this shader is used for the particle rendering\n    this.shaders['particle'] = new JC.PointShader(gl);\n\n    this.setShader('sprite');\n};\n\n\nJC.ShaderManager.prototype.setShader = function(type) {\n    if (this._curShaderType === type) return false;\n\n    this._curShaderType = type;\n\n    this.shader = this.shaders[type];\n\n    this.gl.useProgram(this.shader.program);\n\n    return true;\n};\n\nJC.ShaderManager.prototype.destroy = function() {\n    this.gl = null;\n};\n\n\n\n\nJC.WebGLMaskManager = function() {};\n\nJC.WebGLMaskManager.prototype.constructor = JC.WebGLMaskManager;\n\nJC.WebGLMaskManager.prototype.setContext = function(gl) {\n    this.gl = gl;\n};\n\nJC.WebGLMaskManager.prototype.pushMask = function(maskData, renderSession) {\n    var gl = renderSession.gl;\n\n\n    gl.enable(gl.STENCIL_TEST);\n    gl.depthMask(false);\n    gl.colorMask(false, false, false, false);\n    gl.stencilFunc(gl.ALWAYS, 1, ~0);\n    gl.stencilOp(gl.KEEP, gl.REPLACE, gl.REPLACE);\n\n    // maskData.render();\n\n    gl.depthMask(true);\n    gl.colorMask(true, true, true, true);\n    gl.stencilFunc(gl.EQUAL, 1, ~0);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n};\n\nJC.WebGLMaskManager.prototype.popMask = function() {\n    var gl = this.gl;\n    gl.disable(gl.STENCIL_TEST);\n};\n\nJC.WebGLMaskManager.prototype.destroy = function() {\n    this.gl = null;\n};\n","(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n\n    window.RAF = window.requestAnimFrame = window.requestAnimationFrame;\n})();","JC.TWEEN = {\n    easeBoth: function(t, b, c, d) { //加速减速曲线\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t + b;\n        }\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n    extend: function(opts) {\n        if (!opts) return;\n        for (var key in opts) {\n            if (key !== 'extend' && opts[key]) this[key] = opts[key];\n        }\n    }\n};\n","JC.Math = {\n    clamp: function(x, a, b) {\n\n        return (x < a) ? a : ((x > b) ? b : x);\n\n    },\n    randIn: function(low, high) {\n\n        return low + Math.random() * (high - low);\n\n    }\n};\n","JC.Texture = function(id, img) {\n    this.id = id;\n    this.img = img;\n    this.width = img.width;\n    this.height = img.height;\n    this.isPowerOfTwo = JC.isPowerOfTwo(this.width, this.height);\n};\n\n\nJC.TextureUvs = function() {\n    this.x0 = 0;\n    this.y0 = 0;\n\n    this.x1 = 0;\n    this.y1 = 0;\n\n    this.x2 = 0;\n    this.y2 = 0;\n\n    this.x3 = 0;\n    this.y3 = 0;\n};\n\n\n\nJC.TextureCache = {};\n\n\nJC.ImageLoader = function(sources, crossorigin) {\n    this.receiveNum = 0;\n    this.failNum = 0;\n    this.requestNum = 0;\n    this.crossorigin = crossorigin;\n    this.sources = sources || {};\n    this.imgs = {};\n\n    this.loading();\n};\nJC.ImageLoader.prototype.constructor = JC.ImageLoader;\nJC.ImageLoader.prototype.loading = function() {\n    var This = this;\n\n    function ears(source, img) {\n        img.onload = function() {\n            This.receiveNum++;\n            JC.TextureCache[source] = new JC.Texture(source, img);\n            if ((This.receiveNum + This.failNum) >= This.requestNum) {\n                This.onLoaded();\n                This.failNum > 0 && This.onFailed();\n            }\n        };\n        img.onerror = function() {\n            This.failNum++;\n        };\n    }\n\n    for (var source in this.sources) {\n        this.imgs[source] = new Image();\n\n        ears(source, this.imgs[source]);\n\n        if (this.crossorigin) {\n            this.imgs[source].crossOrigin = '';\n        }\n        this.imgs[source].src = this.sources[source];\n        this.requestNum++;\n    }\n};\nJC.ImageLoader.prototype.getTexture = function(id) {\n    return JC.TextureCache[id];\n};\nJC.ImageLoader.prototype.onLoaded = function() {};\nJC.ImageLoader.prototype.onFailed = function() {};\n"]}